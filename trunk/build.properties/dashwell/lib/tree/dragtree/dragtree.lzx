<library>
    <class name="dragtree" extends="opttree">
        <!-- Sent when a successful drag and drop happens -->
        <attribute name="ondragdrop" value="null" />
        <method event="ondragdrop" />

        <attribute name="trackgroupname" value="treeDragDropGroup" 
                   type="string" />

        <!-- Sent when a drag and drop fails -->
        <attribute name="ondragfail" value="null" />
        <method event="ondragfail" />

        <attribute name="floaterref" value="null" />

        <!-- Reference to leaf that was dragged -->
        <attribute name="_draggedleaf" value="null" />

        <!-- All external drop targets -->
        <attribute name="externaldroptargets" value="$once{new Array()}" />
        
        <!-- Reference to last external drop target -->
        <attribute name="_lastexternalmousedovertarget" 
                   value="null" />

        <attribute name="_externaldroplistenerdel" 
                   value="$once{new LzDelegate(this,
                                '_handleExternalDrop')}" />
        <attribute name="_externaloverlistenerdel" 
                   value="$once{new LzDelegate(this,
                                '_handleExternalMouseOver')}" />
        <attribute name="_externaloutlistenerdel" 
                   value="$once{new LzDelegate(this,
                                '_handleExternalMouseOut')}" />

        <method name="registerExternalDropTarget" args="v">
            this.unregisterExternalDropTarget(v,this.trackgroupname);
            LzTrack.register(v,this.trackgroupname);
            this.externaldroptargets.push(v);
            this._externaldroplistenerdel.register(v,"onmousetrackup");
            this._externaloverlistenerdel.register(v,"onmousetrackover");
            this._externaloutlistenerdel.register(v,"onmousetrackout");
        </method>

        <method name="unregisterExternalDropTarget" args="v">
            // As of 3.1.1, LzTrack.unregister() is undocumented, but
            // present and in the sources.
            LzTrack.unregister(v,this.trackgroupname);
            for (var i in this.externaldroptargets) {
                if (this.externaldroptargets[i]==v) {
                    this.externaldroptargets.splice(i,1);
                }
            }
        </method>

        <method name="_handleExternalDrop">
            // TODO: In the future, there will be a way to find out what
            //       object sent an event, but right now we have to keep
            //       track of which object was last moused over.
            //       (To fix in OpenLaszlo 3.2).
            setAttribute("validdrop", true);
            var sel = this.getSelection();
            var o = {draggedNodes:sel,
                     from:this._draggedleaf.datapath.p.parentNode,
                     to:this._lastexternalmousedovertarget,
                     type:"external"};
            this.ondragdrop.sendEvent(o);
            this.forceRefreshForRepBug();
        </method>

        <method name="_handleExternalMouseOver" args="sender">
            this.setAttribute("_lastexternalmousedovertarget",sender);
        </method>
        <method name="_handleExternalMouseOut" args="sender">
            if (this._lastexternalmousedovertarget==sender) {
                this._lastexternalmousedovertarget = null;
            }
        </method>

        <!-- True if on the last drag, a valid drag and drop happened.
             False if the drop failed (e.g. user releases mouse over
             canvas) -->
        <attribute name="validdrop" value="false" />

        <method name="startDrag" args="leaf">
            // NOTE: If multiple nodes are selected, and some are not 
            //       draggable, but the one the user mouses down over 
            //       *is* draggable, then the drag will succeed.
            Debug.write("!!!!!!!!!!!!!!!!!!!!!!!!!startDrag what leaf", leaf);
            setAttribute("validdrop", false);
            setAttribute("_draggedleaf", leaf);
            if (leaf.draggable) {
                floaterref.startDrag(leaf);
            } 
        </method>

        <method name="handleDrop" args="targetView">
            if (_draggedleaf.datapath.p == targetView.datapath.p) {
                return null;
            } else if (targetView.dragtarget) {
                // valid drop
                setAttribute("validdrop", true);
                var sel = this.getSelection();
                var o = {draggedNodes:sel,
                         from:this._draggedleaf.datapath.p.parentNode,
                         to:targetView,
                         type:"internal"};
                this["ondragdrop"].sendEvent(o);
            } else {
                setAttribute("validdrop", false);
                this.ondragfail.sendEvent();
            }
        </method>

    </class>
</library>
