<canvas debug="true">
	<include href="tree/dragtree/library.lzx" />

	<dragtreefloater id="floater" _dragtreeref="$once{main}" />

	<dataset name="dbUsergroups">
		<root>
      <node name="Groups" type="groups" _fontstyle="bold" __OPTTREE_META_open="true" _draggable="false">
      	<node name="Administrator" type="group" _fontstyle="plain" _dragtarget="true" _draggable="false" />
      	<node name="Sales" type="group" _fontstyle="plain" _dragtarget="true" _draggable="false" />
      	<node name="Field" type="group" _fontstyle="plain" _dragtarget="true" _draggable="false" />
      	<node name="Tech" type="group" _fontstyle="plain" _dragtarget="true" _draggable="false" />
      </node>
      <node name="Users" type="users" _fontstyle="bold" __OPTTREE_META_open="true" _dragtarget="true" _draggable="false" >
      	<node name="Tom" type="user" _fontstyle="plain" _draggable="true" _dragtarget="false" />
      	<node name="Jane" type="user" _fontstyle="plain" _draggable="true"  _dragtarget="false"/>
      	<node name="Bob" type="user" _fontstyle="plain" _draggable="true"  _dragtarget="false"/>
      	<node name="Jenny" type="user" _fontstyle="plain" _draggable="true"  _dragtarget="false"/>
      </node>
    </root>
  </dataset>

  <window title="Users &amp; Groups" x="20" y="20" height="320" width="200" resizable="true" >
  	<view clip="true" width="${immediateparent.width}" height="${immediateparent.height}">
	    <dragtree id="main" datapath="dbUsergroups:/root"
	            nodepath="node" nodeclass="dragtreenode"
	            floaterref="$once{floater}"
	            multiselect="true" width="${parent.width}">
	        <method name="updateHierarchy" args="p">
	            //update the model
	        </method>
	    </dragtree>
    </view>
  
	  <method event="ondragfail" reference="main">
	  	<![CDATA[
	      Debug.write(">> DRAG FAILED (ondragfail event sent)");
	   	]]>
	  </method>
	  
	  <datapointer name="copyFrom_dp" />
	  <datapointer name="copyTo_dp" />
	
	  <method event="ondragdrop" reference="main" 
	          args="resp">
	      <![CDATA[
	      Debug.write("ondragdrop event sent by dragtree with arguments: ", resp);
	      
	      var dragees = resp.draggedNodes;
	      var fromNode = resp.from;
	      Debug.write("fromNode: ", fromNode);
	      if (resp.type == "internal") {
	          // Dragging a node from one place in the tree to another node
	          var toNode = resp.to.datapath.p;
	          switch (toNode.getAttr("type")) {
	              case "group":
	              	if (fromNode.getAttr("type") == 'groups'){
	                  Debug.write( ">> Same parent. Don't so anything!");
                  	return;
                  }
	                  Debug.write( ">> copying user to group");
	                  Debug.write(fromNode.getAttr("type"));
	                  for (var i in dragees) {
	                  	var isPresent = false;
	                    copyFrom_dp.setPointer(dragees[i]);
	                    var draggedName = copyFrom_dp.getNodeAttribute("name");
	                    Debug.write("Dragged name is: "+ draggedName);
	                   
	                    if (toNode.childNodes != null){
												var numberNodes = toNode.childNodes.length;
												var subNode = null;
												for (var i = 0; i < numberNodes; i++){
													subNode = toNode.childNodes[i];
													if (subNode.getAttr("name") == draggedName){
														Debug.write("Don't add, exists already");
														isPresent = true;
													}
												}
											}
											if (! ispresent){
	                    	copyTo_dp.setPointer(toNode);
	                     	copyTo_dp.addNodeFromPointer(copyFrom_dp);
	                     	main.setY(-2000);
	                     	main.setY(0);
	                   	}
	                  }
	              break;
	              case "users":
	                  
	                  if (fromNode.getAttr("type") == 'users'){
		                  Debug.write( ">> Same parent. Don't so anything!");
	                  	return;
	                  }
	                  for (var i in dragees) {
	                  	Debug.write( ">> 'Moving' user back and remove from group/test");
	                      copyFrom_dp.setPointer(dragees[i]);
	                      var draggedType = copyFrom_dp.getNodeAttribute("type");
	                      if (draggedType == 'user'){
	                      	copyFrom_dp.deleteNode();
	                      }
	                  }
	              break;
	          }
	      } else if (resp.type=="external") {
	          // Dragging a node from a tree to an outside drop
	          // target
	          switch (resp.to) {
	              case rubbishBin:
	                  Debug.write(">> Dropping into rubbish bin");
	              break;
	          }
	      }
	      ]]>
	  </method>
	</window>
	
	<window title="Rubbish Bin" x="240" y="20" height="200" width="200" bgcolor="0xeeeeee">
		<view align="center" valign="middle" 
					resource="../images/rubbish_bin.png"
					id="rubbishBin" clickable="true">
			<method event="oninit">
	        	main.registerExternalDropTarget(this);
		    </method>
		    <method event="ondragdrop" reference="main" args="a">
				Debug.write( "Rubbish bin received: ", a );
	      	</method>
		</view>
	</window>

</canvas>
