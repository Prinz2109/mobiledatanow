<library>
    <include href="resources.lzx"/>
    
    <class name="sharedtreenode" extends="baseopttreenode"
           height="18" width="100%">
        <!-- Background color when mouse is hovering over view and 
             mouse button is up. -->
        <attribute name="mouseoverbgcolor" value="0xccccee" />

        <!-- Background color when dragging a node and the leaf is a valid
             drop target -->
        <attribute name="mouseoverdroptargetbgcolor" 
                   value="null" />

        <!-- Background color when dragging a node and the leaf is not
             a valid drop target -->
        <attribute name="mouseovernotdroptargetbgcolor" 
                   value="0xeeeeee" />

        <!-- Left indent of the text label -->
        <attribute name="labelx" value="15" />

        <attribute name="_fontstyle" setter="setFontStyle(_fontstyle)" 
                   value="$path{'@_fontstyle'}" />

        <attribute name="_showtreelines" 
                   value="${parent.showtreelines}" />

        <attribute name="_contextmenuref" 
                   value="$once{new LzContextMenu()}"/>

        <method name="setFontStyle" args="fontStyle, who">
            fontStyle = (fontStyle==null) ? "plain" : fontStyle;
            if (!this.isinited) {
                this._fontstyle = fontStyle;
                return;
            }
            this._fontstyle = fontStyle;
            if (this["label"]) {
                this.label.setAttribute("fontstyle",this._fontstyle);
            }
        </method>

        <!-- TODO: Add global feature to disable the context menu. -->
        <handler name="oninit">
            if (this["contextMenuView"]) {
                this.contextMenuView.setContextMenu(this._contextmenuref);
                new LzDelegate(this, "setupMenu", 
                            this._contextmenuref, "onmenuopen");
            }
        </handler>

        <method name="setupMenu"><![CDATA[
            // Select this item, as though the left-mouse button was clicked.
            if (!parent.isSelected(this)) {
                this._userselectedthiscycle = true;
                parent.select( this );
            }
            // Multi-select trees can't really be practica
            if ((parent.getSelection()).length > 1) {
                parent.clearSelection();
                this._userselectedthiscycle = true;
                parent.select( this );
            }
            var dptr = new LzDatapointer();
            dptr.setFromPointer(this.datapath);
            var cm = this.contextMenuView.getContextMenu();
            cm.clearItems();
            if (dptr.selectChild()) {
                if (dptr.getNodeName() == "_rcoptions") {
                    // make all new options
                    dptr.selectChild();
                    var opt;
                    do {
                        var optName = dptr.getNodeAttribute("name");
                        var isEnabledAttr = dptr.getNodeAttribute("enabled");
                        var isEnabled = isEnabledAttr == "true";

                        var isVisibleAttr = dptr.getNodeAttribute("visible") 
                        var isVisible = isVisibleAttr == "true";
                        opt = this._contextmenuref.makeMenuItem(optName, new LzDelegate(this,"handleRightClick"));
                        opt.setEnabled(isEnabled);
                        opt.setVisible(isVisible);
                        this._contextmenuref.addItem(opt);
                    } while (dptr.selectNext()) 
                }
            }
            contextMenuView.setContextMenu(_contextmenuref);
        ]]>
        </method>

        <method name="handleRightClick" args="a">
            parent.handleRightClick(this.datapath.p, a.cmenuitem.caption);
        </method>

        <!--
            TODO: Make showtreelines settable
        <handler name="on_showtreelines">
            if (this._showtreelines) {
                this.treelines.plusMinusState.remove();
                this.treelines.treeLinesState.apply();
            } else {
                this.treelines.treeLinesState.remove();
                this.treelines.plusMinusState.apply();
            }
        </handler>
        -->

        <drawview name="treelines" width="${parent.leafindent+9}"
                height="18" 
                onclick="if ( parent.haschildren ) parent.toggleOpen();">
            <attribute name="positionwidth" value="$once{parent.indent}" />
            <handler name="oninit">
                if (parent._showtreelines) {
                    this.plusMinusState.remove();
                    this.treeLinesState.apply();
                } else {
                    this.treeLinesState.remove();
                    this.plusMinusState.apply();
                }
            </handler>

            <method name="drawBox" args="position">
                this.beginPath();
                var yTopOfBox = 4;
                var yBottomOfBox = 12;
                var xLeftOfBox = position * this.positionwidth;
                var xRightOfBox = xLeftOfBox + this.positionwidth;
                this.moveTo(xLeftOfBox,yTopOfBox);
                this.lineTo(xRightOfBox,yTopOfBox);
                this.lineTo(xRightOfBox,yBottomOfBox);
                this.lineTo(xLeftOfBox,yBottomOfBox);
                this.closePath();
                this.strokeStyle = 0x999999;
                this.lineWidth = 1;
                this.stroke();
            </method>
            <method name="drawPlus" args="position">
                this.drawMinus(position);
                var lineX = (position * this.positionwidth) + (this.positionwidth/2);
                this.beginPath();
                this.moveTo(lineX,6);
                this.moveTo(lineX,11);
                this.strokeStyle = 0x666666;
                this.lineWidth = 1;
                this.closePath();
                this.stroke();
            </method>

            <method name="drawMinus" args="position">
                this.drawBox(position);
                var lineX = (position * this.positionwidth) + 3;
                this.beginPath();
                this.moveTo(lineX,8);
                this.lineTo(lineX+5,8);
                this.strokeStyle = 0x666666;
                this.lineWidth = 1;
                this.closePath();
                this.stroke();
            </method>

            <state name="plusMinusState">
                <handler name="onhaschildren" reference="parent">
                    this.drawPlusOrMinus();
                </handler>
                <handler name="onopen" reference="parent">
                    this.drawPlusOrMinus();
                </handler>
                <method name="drawPlusOrMinus">
                    this.clear();
                    if (parent.haschildren) {
                        if (!parent.open) {
                            this.drawPlus(parent.depth);
                        } else {
                            this.drawMinus(parent.depth);
                        }
                    }
                </method>
            </state>
            <state name="treeLinesState">

                <handler name="ondata" reference="parent">
                    this.drawConnectorLines();
                </handler>

                <handler name="onhaschildren" reference="parent">
                    this.drawConnectorLines();
                </handler>

                <method name="drawConnectorLines"><![CDATA[
                    this.clear();
                    for (var i = parent.depth; i >= 0; i--) {
                        /* The offset is the slot as measured from the leaf, 
                        moving to the right. The first slot is offset 0.
                        */
                        var offset = parent.depth - i; // The slot measured from leaf
                        switch (offset) {
                            case 0:
                                if (!parent.haschildren) {
                                    // Draw --
                                    this.drawHorizExtender(parent.depth);
                                } else {
                                    if (!parent.open) {
                                        this.drawPlus(parent.depth);
                                    } else {
                                        this.drawMinus(parent.depth);
                                    }
                                }
                            break;
                            
                            case 1:
                                if (!parent.islast) {
                                    // Draw T
                                    this.drawVertLineWithTee(parent.depth-1);
                                } else {
                                    // Draw L
                                    this.drawTerminal(parent.depth-1);
                                }
                            break;

                            default:
                                var leafNode = parent.datapath.p;
                                // Drill up to the right parent node 
                                // (e.g. parent.parent.parent)
                                for (var j=1;j<offset;j++) {
                                    leafNode = leafNode.parentNode;
                                }
                                var leaf = parent.parent.getLeafForNode(leafNode);
                                if (!leaf.islast) {
                                    this.drawVertLine(i);
                                }
                            break;
                        }
                    }
                    ]]>
                </method>
                <method name="drawHorizExtender" args="position">
                    this.beginPath();
                    var lineX = position * this.positionwidth;
                    var lineY = this.height / 2;
                    this.moveTo(lineX,lineY);
                    this.lineTo(lineX+this.positionwidth,lineY);
                    this.strokeStyle = 0x999999;
                    this.lineWidth = 1;
                    this.stroke();
                    this.closePath();
                </method>

                <method name="drawTerminal" args="position">
                    this.beginPath();
                    var lineX = (position*this.positionwidth)+(this.positionwidth/2);
                    var lineY = this.height / 2;
                    this.moveTo(lineX,0);
                    this.lineTo(lineX,lineY);
                    this.lineTo(lineX+5,lineY);
                    this.strokeStyle = 0x999999;
                    this.lineWidth = 1;
                    this.stroke();
                    this.closePath();
                </method>

                <method name="drawVertLine" args="position">
                    this.beginPath();
                    var lineX = (position*this.positionwidth)+(this.positionwidth/2);
                    this.moveTo(lineX,0);
                    this.moveTo(lineX,this.height);
                    this.closePath();
                    this.strokeStyle = 0x999999;
                    this.lineWidth = 1;
                    this.stroke();
                </method>

                <method name="drawVertLineWithTee" args="position">
                    this.drawVertLine(position);
                    this.beginPath();
                    var lineX = (position*this.positionwidth)+(this.positionwidth/2);
                    var lineY = this.height / 2;
                    this.moveTo(lineX,lineY);
                    this.lineTo(lineX+5,lineY);
                    this.closePath();
                    this.strokeStyle = 0x999999;
                    this.lineWidth = 1;
                    this.stroke();
                </method>
            </state>
            
        </drawview>

        <!-- This is really messy, but because of LPP-1548, we can't use
             a constraint to set fontstyle. Instead, see the setFontStyle
             method above. However in some cases, when the setFontStyle
             method is called the label view below is not yet initialized,
             so oninit, the label re-sets its fontstyle -->
        <text name="label" x="${parent.leafindent + parent.labelx}" 
              datapath="@name" 
              width="${parent.width-this.x}"
              oninit="parent.setFontStyle(parent._fontstyle, this)" />

        <view width="100%" height="100%" name="contextMenuView"
              bgcolor="0xffffff" opacity="0.1">

        </view>

        <attribute name="mousein" value="false"/>

        <attribute name="bgcolor" 
                   value="${ mousein ? (parent.selectable ? mouseoverbgcolor:null) :
                    ( highlight ? mouseoverdroptargetbgcolor : null ) }"/>

        <attribute name="_mousedownx" value="null"/>
        <attribute name="_mousedowny" value="null"/>

        <handler name="onmouseover">
            this.setAttribute( "mousein", true );
            if (treelines["drawPlusOrMinus"]) {
                treelines.drawPlusOrMinus();
            }
        </handler>

        <handler name="onmouseout">
            this.setAttribute( "mousein", false );
        </handler>

        <method name="setSelected" args="s">
            this.setAttribute( "highlight", s );
        </method>

        <attribute name="lctime" value="0"/>

        <handler name="onmousedown">
            this._mousedownx = this.getMouse("x");
            this._mousedowny = this.getMouse("y");
            this._userselectedthiscycle = false;
            if (!parent.isSelected(this)) {
                this._userselectedthiscycle = true;
                parent.select( this );
            }
        </handler>

        <handler name="onmouseup">
            <![CDATA[
            // This selection goo is for handling multi-select
            // and dragging issues.
            var acceptableOffset = (this.height/2)-2;
            var xOffset = this.getMouse("x")-this._mousedownx;
            var yOffset = this.getMouse("y")-this._mousedowny;
            xOffset = Math.max(xOffset,-xOffset);
            yOffset = Math.max(yOffset,-yOffset);
            if ((xOffset<acceptableOffset)&&(yOffset<acceptableOffset)) {
                if (!this._userselectedthiscycle) {
                    parent.select(this);
                }
            }
            ]]>
        </handler>

        <!-- TODO: look into 'openDetailsForEdit' -->
        <handler name="onclick">
            <![CDATA[
            var ctime = new Date();
            if ( ctime - lctime < 300 ) {
                //double click 
                this.doSelected();
            } else {
                // parent.select( this );
            }
            this.lctime = ctime;
            ]]>
        </handler>
        
        <attribute name="toggling" value="false"/>
        <method name="toggleOpen">
            if ( haschildren ){
                this.toggling = true;
                if ( LzKeys.isKeyDown( "Shift" ) ){
                    parent.recursiveOpen( datapath.p, !open );
                } else {
                    parent.setOpen( datapath.p, !open );
                }
                this.toggling = false;
            }
            parent.forceRefreshForRepBug();
        </method>

        <attribute name="haschildren" value="null"/>
        <method name="checkChildren" event="ondata">
            <![CDATA[
            this.setAttribute( 'haschildren' , 
                               datapath.xpathQuery( parent.nodepath ) != null );
            ]]>
        </method>
    </class>
</library>
