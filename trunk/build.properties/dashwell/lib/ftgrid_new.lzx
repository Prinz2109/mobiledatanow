<library>
    <!-- NOTE: components in this library is tested with LPS 3.3.3.
               They have dependency on the "out-of-the-box" grid, basegrid, basegridcolumn, etc. -->

    <!-- firetrust customized look-and-feel based on grid component.
         use the "ftgridcolumn" as the column class  -->
    <class name="ftgrid" extends="grid"
           style="{bordercolor:0xD5DDDD}"
           showvlines="true" showhlines="false" 
           bgcolor0="white" bgcolor1="0xE9E9E9">
        <!-- overwrite the default gridtext column -->
        <attribute name="_columnclass" value="ftgridtextcolumn" when="once"/>

        <event name="onblurintextfield" />
        <event name="onfocusintextfield" />
    </class>

    <!-- firetrust 'smart' grid component support dynamic column definition. 
         based on ftgrid component.
         use the "ftgridtextcolumn" as the column class  -->
    <class name="ftdynamicgrid" extends="ftgrid">
        <attribute name="metadatapath" type="string"/>

        <!-- overwrite the default gridtext column -->
        <attribute name="_columnclass" value="ftgridtextcolumn" when="once"/>

        <!-- overwrite the column / cell generation method -->
        <method name="inferColumns">
            <![CDATA[
            //get the content
            var res = this.datapath.xpathQuery( this.contentdatapath );
            if ( ! res ) return;
            if ( res instanceof Array ) res = res[ 0 ];

            //get the metadata
            var meta = this.datapath.xpathQuery( this.metadatapath );
            //Debug.write("inferColumns()\n",res,"\n",meta);

            if ( res != null ){
                var usename = true;

                //create the columns per metadata
                if ( meta.length > 0 ){
                    //loop the columns
                    var max = meta.length;

                    for (var i=0; i < max; i++ ){
                        //get the column confiduration from metadata
                        var metacol    = meta[i]; //is in LzDataelement
                        var colDisplay = metacol.getAttr("display");
                        var colName    = metacol.getAttr("name");
                        var colXpath   = colName+ '/@value';
                        var editable   = (metacol.getAttr("editable") == "true" ? true : false);
                        var resizable  = (metacol.getAttr("resizable") == "true" ? true : false);
                        //Debug.write("inferColumns() | colName="+colName+" | colDisplay="+colDisplay+" | colXpath=",colXpath);

                        new _columnclass( this , { datapath : colXpath,
                                                  text : colDisplay,
                                                  editable:editable,
                                                  resizable:resizable  } );
                    }

                    usename = false;
                }
                if ( usename ){
                        new _columnclass( this , { datapath : 'name()',
                                                  text : 'name' } );
                        new _columnclass( this , { datapath : 'text()',
                                                  text : 'text' } );
                }
                this.makeCellsAndColumns();
                if ( this.columns.length && this.inferDel ){
                    this.inferDel.unregisterAll();
                    delete this.inferDel;
                }
            }
            ]]>
        </method>
    </class>

    <!-- firetrust customized grid column for ftgrid -->
    <class name="ftgridcolumn" extends="basegridcolumn">
        <!--- If set to false, the column cannot be resized. -->
        <attribute name="resizable" value="true" type="boolean"/>

        <!--- If true, the column header is clickable and will initiate a
              sort -->
        <attribute name="sortable" type="boolean" value="true"/>
        <!--- If set to false, then no header will be shown for this column.-->
        <attribute name="showheader" value="true" type="boolean"/>
        <!--- The width of the resizer between columns.-->
        <attribute name="resizemargin" value="1" type="number"/>
        <!--- @keywords private -->
        <attribute name="colwidth" value="${this.width -
                                    (this.resizable ? 2 : 2) }"/>

        <!--- @keywords private -->
        <method name="init">
            if ( ! this.hassetwidth ){
                if ( this.showheader ){
                    this.setWidth( mybutton.measureWidth()  );
                } else {
                    this.setWidth( this.minwidth );
                }
            }
            if ( this.showheader ){
                mybutton.widthConstraint.apply();
            }
            super.init();
        </method>

        <!--- @keywords private -->
        <method name="_applystyle" args="s">
            if ( showheader ){
                setTint(mybutton.sortarrow, s.textcolor);
                if ( resizable ){
                    setTint(resizer, s.basecolor);
                }
            }
            super._applystyle( s );
        </method>

        <!--- @keywords private -->
        <state apply="${classroot.showheader}" placement="header">
            <button name="mybutton" 
                    clip="true"
                    placement="header"
                    text="${classroot.text}"  
                    text_padding_x="20"
                    focusable="$once{classroot.sortable}"
                    doesenter="false"
                    onclick="parent.doSort()"
                    clickable="$once{classroot.sortable}">

                <method name="setClickable" args="cl">
                    <![CDATA[ super.setClickable( cl && classroot.sortable );]]>
                </method>
                    
                <view resource="lzgridsortarrow_rsrc"  name="sortarrow"
                      x="${ parent._title.x + parent._title.width + 2}"
                      y="${ parent.titleshift + parent.height/2 - height/2}"
                      frame="${ classroot.ascendsort ? 1 : 2 }"
                      visible="${ classroot.hasSort }"/>

                <state name="widthConstraint" placement="header">
                    <attribute name="width" 
                               value="${ classroot.width - 
                                         ( parent.resizable ? 
                                           parent.resizer.width : 0 ) }"/>
                </state>
            </button>

            <state placement="header" apply="${parent.resizable}">
                <view height="${parent.height-1}"
                    x="${parent.mybutton.width - 1}" width="${classroot.resizemargin}"
                    placement="header" clip="true"
                    name="resizer"
                    clickable="$once{parent.resizable}"
                    onmouseover="LzCursor.setCursorGlobal ( 'lzgridcursor_rsrc' )"
                    onmouseout="LzCursor.restoreCursor()"
                    onmousedown="LzCursor.lock();parent.rs.apply()"
                    onmouseup="LzCursor.unlock();parent.rs.remove()" >
                    <view width="1" height="100%"/>
                </view>
            </state>

            <state name="rs" placement="header">
                <attribute name="xroffset"
                           value="$once{ this.x - this.width + 
                                         this.getMouse( 'x' ) }"/>

                <attribute name="width" 
                     value="${Math.max( minwidth, this.immediateparent.getMouse( 'x' )- xroffset)}"/>
            </state>
        </state>

    </class>

    <!-- firetrust customized gridtext column based on the ftgridcolumn, for the ftdynamicgrid component -->
    <class name="ftgridtextcolumn" extends="ftgridcolumn">
        <!--- The datapath attribute for a grid text is used for the text that
              is displayed in the rows. -->
        <attribute name="datapath" 
                   setter="this.setAttribute( 'rowdp', datapath )"/>
        <!--- type of content's alignment. Default: left
              possible values are: left, center, right     -->
        <attribute name="textalign" type="string" value="left"/>

        <!--- @keywords private -->
        <attribute name="rowdp" value="" type="string"/>
        <!--- If set to false, the field will not be editable. -->
        <attribute name="editable" value="true" type="boolean"/>
        
        <!-- SL:12/05/2006 set the height of a cell -->
        <attribute name="cellheight" value="20" />

        <!--- @keywords private -->
        <attribute name="_textcolor" value="null"/>
        <!--- @keywords private -->
        <attribute name="_texthilitecolor" value="null"/>
        <!--- @keywords private -->
        <attribute name="_textselectedcolor" value="null"/>
        
        <!--- @keywords private -->
        <method name="_inferSortpath">
            return this.rowdp;
        </method>

        <method name="_applystyle" args="s">
            super._applystyle( s );
            this.setAttribute( '_textcolor' , s.textcolor );
            this.setAttribute( '_texthilitecolor' , s.texthilitecolor );
            this.setAttribute( '_textselectedcolor' , s.textselectedcolor );
        </method>


        <view height="${parent.cellheight}" clickable='${parent.editable}'
              onmouseover="immediateparent.domouseover()"
              onmouseout="immediateparent.domouseout()"
              y="${immediateparent.height/2 - height/2}" 
              clip="true" >
            <attribute name="editing" value="false"/>
            <attribute name="focusable" value="${!editing &amp;&amp; 
                                                  parent.editable}"/>

            <method name="init">
                if ( parent.editable ){
                    this.editDel = new LzDelegate( this, 'startEditing' );
                    this.editDel.register( this , 'onmousedown' );
                    this.editDel.register( this , 'onfocus' );
                }
                super.init();
            </method>

            <method name="startEditing">
                immediateparent.select();
                this.setAttribute( 'editing' , true );
                LzFocus.setFocus( editbox );
            </method>

            <text visible="${!parent.editing}" width="${parent.width}"
                  y="$once{ parent.height /2 - this.height/2}"
                  fgcolor="${ parent.immediateparent.selected ? 
                                    classroot._textselectedcolor:
                                    (parent.immediateparent.highlighted ?
                                                classroot._texthilitecolor:
                                                classroot._textcolor)}"
                  datapath="$once{parent.parent.rowdp}">

                <method event="oninit">
                <![CDATA[
                    var f = function() {
                                this.setAttribute("x", this._calcX());
                            }
                    var d = [this, "width"];
                    this.applyConstraint("x", f, d);
                ]]>
                </method>

                <method event="ontext" args="val">
                <![CDATA[
                    this.setAttribute("x", this._calcX());
                ]]>

                </method>

                <method name="_calcX">
                <![CDATA[
                    if (classroot.textalign == "center"){
                        var x = ((this.width /2) - (this.getTextWidth() /2));
                        if (x < 0) x = 0;
                        return x;
                    }
                    else if (classroot.textalign == "right"){
                        var x = ((this.width) - (this.getTextWidth() + 10));
                        if (x < 0) x = 0;
                        return x;
                    }
                    else{
                        return 0;
                    }
                ]]>
                </method>
            </text>

            <state pooling="true" apply="${parent.editing}" 
                   onremove="parent.editbox.datapath.updateData()">
                <edittext datapath="$once{parent.parent.rowdp}" 
                          name="editbox" width="${parent.width}">
                    <method name="init">
                        this.globalMouseDel = new LzDelegate( this, 
                                                              "checkMouse" );
                        super.init();
                    </method>
                    <datapath>
                        <attribute name="datacontrolsvisibility" value="false"/>
                    </datapath>
                    <method name="applyData" args="d">
                        //because of the monkeying with init that this
                        //componentdoes, the data for this thing can sometimes
                        //get set before it's ready for it
                        if ( !this._initcomplete ) {
                            this.setText( d );
                        } else {
                            super.applyData(d);
                        }
                    </method>
                    <handler name="onfocus">
                        this.globalMouseDel.register( LzGlobalMouse, 
                                                      "onmousedown" );
                        parent.immediateparent.ownerGrid.onfocusintextfield.sendEvent(parent.immediateparent.datapath);
                    </handler>
                    <handler name="onblur">
                        parent.setAttribute( 'editing' , false );
                        parent.immediateparent.ownerGrid.onblurintextfield.sendEvent(parent.immediateparent.datapath);
                    </handler>
                    <method name="checkMouse" args="who">
                        if ( !this.containsPt( this.getMouse( 'x' ) , 
                                              this.getMouse( 'y' ) ) ){
                            parent.setAttribute( 'editing' ,false );
                        }
                    </method>
                    <handler name="onkeyup" args="k">
                        if ( k == 13 ){
                            parent.setAttribute( "editing" , false );
                            LzFocus.setFocus(parent.immediateparent.ownerGrid);
                        }
                    </handler>
                </edittext>
            </state>
        </view>
    </class>

</library>
