<library>
   <class name="viewAddUserReply" width="${projectTabs.currTab._borderView._projectView._rightView.width - 1}" 
        height="${projectTabs.currTab._borderView._projectView._rightView._upperPart.height - projectTabs.currTab._borderView._projectView._rightView._upperPart._header.height - 1}">
        
        <attribute name="maintab"/>
        <attribute name="qb_query_builder_message_new"/>
        <attribute name="txt_qb_sql_ur_new"/>
        <attribute name="initialLoadColumns" type="boolean" value="true"/>
        <attribute name="previousView" type="string" value="null"/>
        <attribute name="viewChanged" type="boolean" value="false"/>       
        <method name="clearData">
			parentView.mainTabs.tabpUrN.setAttribute('selected', true);

			parentView.mainTabs.tabpUrN.urKeywordView.textMsgTxtN.setText('');
          	parentView.mainTabs.tabpUrN.timeoutView.timeoutUrTxtN.setText('');
          	parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView3.txtSort2UrN.setText('');
          	parentView.mainTabs.tabmbUrN.responseView.textAreaViewName.newResponseFormatTxtAreaUrN.setText('');
          	parentView.mainTabs.tabpUrN.descView.descUrTxtN.setText('');
          	parentView.mainTabs.tabmbUrN.drView.displayResultUrN.setText('');

          	parentView.mainTabs.tabpUrN.addDBUrN.cbxDbUrN.clearSelection();
          	parentView.mainTabs.tabpUrN.addVTUrN.cbxQueryUrN.clearSelection();
          	parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView4.comGroupField2UrN.clearSelection();

			parentView.mainTabs.tabpUrN.addQTUrN.qTypeUrN.selectItem("1");
//			parentView.mainTabs.tabpUrN.datasource.dsStatusUrN.selectItem("1");

          	parentView.errorView.txtErrorMsgQUrN.setText('');
			parentView.msgTestTabs.tabpane1.msgHolderView3.msgResultUrN.setText('');    
			parentView.queryTestTabs.tabpane1.view1.wholeUserInputView.userInputView.txtUserInput.setText('');      	
        </method>
	    <view name="parentView" width="638" height="${immediateparent.height - 80}" x="1" y="1" >
           <tabs width="${immediateparent.width}" height="505" name="mainTabs" tabspacing="1" bgcolor="0x4386cc">
                <attribute name="tabclass" value="tabWhiteTab" type="string" />
                <method event="oninit">
					<![CDATA[
               			//Pushes the first tab in
						this.subviews[0].layouts[0].setAttribute("inset", 15);
					]]>
				</method>
                <tabpane datapath="gui:/gui-labels/tab-properties/@label" name="tabpUrN">
                    <method event="onselect" reference="this.tab">
                    	if (this.tab.selected)
                    	{
							Debug.write("Selected Properies Tab in ADD page");
							classroot.parentView.queryTestTabs.setVisible(false);
		                	//classroot.parentView.msgTestTabs.setVisible(false);							
						}
					</method>
                
	                <simplelayout axis="y" spacing="10"/>
			        <view name="name" >
			            <simplelayout axis="x" spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-parent-name/@label" width="150" fgcolor="0x454545" />
			            <text datapath="dbUserReply:/root/@queryName" width="250" />
			            <hinttip tipid="ENDUSERACCESS-msgquery-name" />
			        </view>
			        <view name="description">
			            <simplelayout axis="x" spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-parent-desc/@label" width="150" fgcolor="0x454545" />
			            <text datapath="dbUserReply:/root/@queryDesc" width="250" />
			        </view>

				    <view name="datasource">
			         	<simplelayout axis="x" spacing="2"/>
            				<text datapath="gui:/gui-labels/lbl-select-datasource/@label" width="150" fgcolor="0x454545"></text>
				        	<radiogroup layout="axis: x; spacing:7" name="dsStatusUrN">
								<radiobutton datapath="gui:/gui-labels/lbl-db/@label" width="110" value="1" />
							</radiogroup>
<!-- ds						<method event="onselect" reference="dsStatusUr">
							var ds = dsStatusUr.getValue();
							if(ds == 1){
								addWSUr.setVisible(false);
								classroot.parentView.mainTabs.tabpUrN.addDBUrN.setVisible(true);
								classroot.parentView.mainTabs.tabpUrN.addVTUrN.setVisible(true);
								addQTUr.setVisible(true);
								classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.setVisible(true);
							}else{
								addWSUr.setVisible(true);
								classroot.parentView.mainTabs.tabpUrN.addDBUrN.setVisible(false);
								classroot.parentView.mainTabs.tabpUrN.addVTUrN.setVisible(false);
								addQTUr.setVisible(false);
								classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.setVisible(false);
							}
						</method> -->
					</view>
					<view name="addQTUrN">
						<simplelayout axis="x" spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-query-type/@label" width="150" fgcolor="0x454545" />
			            <hinttip tipid="ENDUSERACCESS-msgquery-query_type" />
						<radiogroup layout="axis: x; spacing:7" name="qTypeUrN" >
							<radiobutton datapath="gui:/gui-labels/option-select-query/@label" width="110" value="1">
							<hinttip tipid="ENDUSERACCESS-msgquery-select_query" /></radiobutton>
							<radiobutton datapath="gui:/gui-labels/option-update-query/@label" width="110" value="2">
							<hinttip tipid="ENDUSERACCESS-msgquery-update_query" /></radiobutton>
							<radiobutton datapath="gui:/gui-labels/option-insert-query/@label" width="110" value="3">
							<hinttip tipid="ENDUSERACCESS-msgquery-insert_query" /></radiobutton>
						</radiogroup>
						<method event="onselect" reference="qTypeUrN">
							//Clear previous selection
				    		classroot.parentView.mainTabs.tabpUrN.addDBUrN.cbxDbUrN.clearSelection();
			 	    		classroot.parentView.mainTabs.tabpUrN.addVTUrN.cbxQueryUrN.clearSelection();
							classroot.parentView.errorView.txtErrorMsgQUrN.setText('');
			            	var qtype = classroot.parentView.mainTabs.tabpUrN.addQTUrN.qTypeUrN.getValue();
			           		if(qtype == 1) {
								   classroot.parentView.mainTabs.tabpUrN.addVTUrN.vtLableUrN.setText("Select View");
				
				               	  //Clear "Define Insert Criteria" Tab
				                   classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setVisible(false);
								   classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.setVisible(true);
				   		           classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.setVisible(false);  
				           		   classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.alertTxtUrN.setVisible(true);  
				           		   //classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.directSqlBtnUrNS.setVisible(false);
								   classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortAlertTxtUrN.setVisible(true);                		                         		
			
				                	classroot.parentView.mainTabs.tabpane1.view1.setAttribute("visible", true); 	
				                	classroot.parentView.mainTabs.tabpane1.resultGridUrN.setAttribute("visible", true); 	
				                	classroot.parentView.mainTabs.tabpane1.notSelectQuery.setAttribute("visible", false); 			                        	
			
			    			}else if(qtype == 2){
								   classroot.parentView.mainTabs.tabpUrN.addVTUrN.vtLableUrN.setText("Select Table");
				
				               	  //Clear "Define Insert Criteria" Tab
				                   classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setVisible(false);
								   classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.setVisible(false);
				   		           classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.setVisible(false);  
				           		   classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.alertTxtUrN.setVisible(true);                        		
				           		   //classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.directSqlBtnUrNS.setVisible(false);
				           		   classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortAlertTxtUrN.setVisible(true);
				           		   
				                	classroot.parentView.mainTabs.tabpane1.view1.setAttribute("visible", false); 	
				                	classroot.parentView.mainTabs.tabpane1.resultGridUrN.setAttribute("visible", false); 	
				                	classroot.parentView.mainTabs.tabpane1.notSelectQuery.setAttribute("visible", true); 			                        					           		   
			 	    		  }else if(qtype == 3){
								   classroot.parentView.mainTabs.tabpUrN.addVTUrN.vtLableUrN.setText("Select Table");
			
				               	  //Clear "Define Insert Criteria" Tab
				                   classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setVisible(false);
								   classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.setVisible(false);
			       		           classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.setVisible(false);  
			               		   classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.alertTxtUrN.setVisible(true);                        		
			               		   //classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.directSqlBtnUrNS.setVisible(false);
								   classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortAlertTxtUrN.setVisible(true);	
								   
				                	classroot.parentView.mainTabs.tabpane1.view1.setAttribute("visible", false); 	
				                	classroot.parentView.mainTabs.tabpane1.resultGridUrN.setAttribute("visible", false); 	
				                	classroot.parentView.mainTabs.tabpane1.notSelectQuery.setAttribute("visible", true); 			                        					           		   								   
			 	    		  }
						</method>
					</view>
				    <view name="addDBUrN">
		            	<simplelayout axis="x" spacing="1"/>
           					<text datapath="gui:/gui-labels/lbl-select-db/@label" width="150" fgcolor="0x454545" />
           					<hinttip tipid="ENDUSERACCESS-msgquery-select_database" />
			            	<combobox name="cbxDbUrN" width="250" editable="false" shownitems="8">
               				<textlistitem datapath="dbUserReply:/root/db" text="$path{'@name'}"  value="$path{'@id'}"/>
            			  </combobox>
		                  <method event="onselect" reference="cbxDbUrN">
				                classroot.parentView.errorView.txtErrorMsgQUrN.setText('');
				                classroot.txt_qb_sql_ur_new.setText("");
				                var textMsgUr = classroot.parentView.mainTabs.tabpUrN.urKeywordView.textMsgTxtN.getText();
				                var timeoutUr = classroot.parentView.mainTabs.tabpUrN.timeoutView.timeoutUrTxtN.getText();
		                		var sorts = classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView3.txtSort2UrN.getText();
		                		var groupFieldName = classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView4.comGroupField2UrN.getText();
		                		var groupFieldId = classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView4.comGroupField2UrN.getValue();
		        		        
		        		        var queryType = classroot.parentView.mainTabs.tabpUrN.addQTUrN.qTypeUrN.getValue(); 
					            var dbSelected = classroot.parentView.mainTabs.tabpUrN.addDBUrN.cbxDbUrN.getValue();
			        	    	
				    	        var params = new LzParam();
			    	    	    params.addValue('action', 'changedDataBaseItemForUserReply', true);
			        	    	params.addValue('selected-db-id', dbSelected);
			        	    	params.addValue('selected-q-type', queryType);
			    	    	    params.addValue('userReplyId', '-1', true);        	    
								params.addValue('connID', dbSelected, true);
								params.addValue('sorts', sorts, true);
								params.addValue('groupFieldName', groupFieldName, true);
								params.addValue('groupFieldId', groupFieldId, true);														
								params.addValue('queryType', queryType, true);														
								
					            var p = dbUserReply.getPointer();
					            p.selectChild(1);
					            var queryId = p.p.getAttr('queryId');
					            var queryName = p.p.getAttr('queryName');
					            var queryDesc = p.p.getAttr('queryDesc');
		                		var parentId = queryId;//TODO

								params.addValue('queryId', queryId, true);														
								params.addValue('queryName', queryName, true);														
								params.addValue('queryDesc', queryDesc, true);														
								params.addValue('parentId', parentId, true);														
								params.addValue('textMsgUr', textMsgUr, true);																						
								params.addValue('timeoutUr', timeoutUr, true);																						
			    	    	    	
								params.addValue('projectId', classroot.maintab.currProjectId, true);			    	    	    	
			    	    	    	
				    	        dbUserReply.setQueryString(params);
			    	    	    dbUserReply.doRequest();
			    	    	    classroot.parentView.mainTabs.tabpUrN.addVTUrN.cbxQueryUrN.clearSelection();
			    	    	    //classroot.parentView.errorView.txtErrorMsgQUrN.setText('');
			    	    	    
				 		  </method>
				   </view>
			       <view name="addVTUrN">
			            <simplelayout axis="x" spacing="1"/>
			            <text name="vtLableUrN" width="150" datapath="dbUserReply:/root/@vtLable" fgcolor="0x454545" />
			            <combobox name="cbxQueryUrN" width="250" editable="false" shownitems="8">
               				 <textlistitem datapath="dbUserReply:/root/query" text="$path{'@name'}"  value="$path{'@id'}"/> 
			            </combobox>
              			<method event="onselect" reference="cbxQueryUrN">
                        	classroot.parentView.errorView.txtErrorMsgQUrN.setText('');
                        	classroot.txt_qb_sql_ur_new.setText("");
                        	var tableID = classroot.parentView.mainTabs.tabpUrN.addVTUrN.cbxQueryUrN.getValue();
                        	var dbSelected = classroot.parentView.mainTabs.tabpUrN.addDBUrN.cbxDbUrN.getValue();
				           	Debug.write(" Table Id: " + tableID);
				           	if(dbSelected != '')//First must be select Database!
				           	{
                        		classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setVisible(true);
   		                		classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.setVisible(true);  
           		        		classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.alertTxtUrN.setVisible(false);                        		
           		        		//classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.directSqlBtnUrNS.setVisible(true);
								classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortAlertTxtUrN.setVisible(false);
	                        	var queryType = classroot.parentView.mainTabs.tabpUrN.addQTUrN.qTypeUrN.getValue(); 
					           	if(queryType == 1) {
		                        	var viewID = tableID;
   		                	    	controller.getNewSelectQueryBuilderForUserReply(viewID);
									classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setAttribute("update", false);
									classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setAttribute("insertQuery", false);
				           		}else if(queryType == 2){
   		        	            	controller.getNewUpdateQueryBuilderForUserReply(tableID);
		                        	classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setAttribute("update", true);
		                        	classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setAttribute("insertQuery", false);
				    	       	}else if(queryType == 3){
            	            		controller.getNewInsertQueryBuilderForUserReply(tableID);
    	                	    	classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setAttribute("update", false);
    	                	    	classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setAttribute("insertQuery", true);
					           	}
				               	Debug.write("Try to refresh the column name again");
				               	//controller.getEmptySelectQueryResultUrNew();
								var params2 = new LzParam(); 
		                		var dbId = classroot.parentView.mainTabs.tabpUrN.addDBUrN.cbxDbUrN.getValue();
				                var viewID = classroot.parentView.mainTabs.tabpUrN.addVTUrN.cbxQueryUrN.getValue();
				                var queryType = classroot.parentView.mainTabs.tabpUrN.addQTUrN.qTypeUrN.getValue();
				                var sql = classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n._qb_controller.getSQL();
		
								params2.addValue('action', 'getDefaultTextMsgForResponse', true);
								params2.addValue('queryType', queryType, true);
								params2.addValue('dbId', dbId, true);
								params2.addValue('sql', sql, true);
								params2.addValue('viewID', viewID, true);
		
								dbQueryReq.setQueryString(params2);
								dbQueryReq.doRequest();				               	
				               	
				               	classroot.parentView.mainTabs.tabpane1.resultGridUrN.refresh();
				               var previousViewId = classroot.getAttribute("previousView");
				               if (previousViewId != null ){
				               		if (previousViewId != 'null'){
					               		if (tableID != previousViewId){
					               			Debug.write("set viewChanged to be true", previousViewId, tableID);
					               			classroot.setAttribute("viewChanged", true);
					               		}
				               		}
				               }
				               classroot.setAttribute("previousView", tableID);
				           	} else {
	                        		classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setVisible(false);
      		                		classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.setVisible(false);  
              		        		classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.alertTxtUrN.setVisible(true);                        		
              		        		//classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.directSqlBtnUrNS.setVisible(false);
              		        		classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortAlertTxtUrN.setVisible(true);                        		
                      		}
                      		//classroot.parentView.errorView.txtErrorMsgQUrN.setText('');
              		   </method>
		         </view>
       		     <view>
         		   <simplelayout axis="y" spacing="0" />
		           <text datapath="gui:/gui-labels/lbl-user-reply/@label" width="400" fgcolor="0x454545" fontstyle="bold" />
		           <hinttip tipid="ENDUSERACCESS-msgquery-userreply" />
		           <view width="617" height="1" bgcolor="0xe3e3e3" />
	             </view>
	             <view name="urKeywordView" >
					<simplelayout axis="x" spacing="2"/>
					<text datapath="gui:/gui-labels/lbl-us-text/@label" width="150" fgcolor="0x454545" />
					<!-- <radiogroup layout="axis: y; spacing:10" id="textMsgTypeOption">
						<radiobutton datapath="gui:/gui-labels/option-pre-defined/@label" width="110" value="1" /> 
						<radiobutton datapath="gui:/gui-labels/option-from-ds/@label" width="110" value="2" />
					</radiogroup>  -->
	             	<edittext name="textMsgTxtN"/>
	             	<hinttip tipid="ENDUSERACCESS-msgquery-userreply-pre_defined_reply" />
	             </view>
	             <view name="descView">
					<simplelayout axis="x" spacing="2"/>
					<text datapath="gui:/gui-labels/lbl-description/@label" width="150" fgcolor="0x454545" />
	             	<edittext name="descUrTxtN" width="300"/>
	             	<hinttip tipid="ENDUSERACCESS-msgquery-userreply-Description" />
	             </view>
	             <view name="timeoutView">
					<simplelayout axis="x" spacing="2"/>
					<text datapath="gui:/gui-labels/lbl-timeout/@label" width="150" fgcolor="0x454545" />
	             	<edittext name="timeoutUrTxtN" width="50"/>
	             	<hinttip tipid="ENDUSERACCESS-msgquery-userreply-timeout" />
	             </view>

                </tabpane>
                <tabpane datapath="gui:/gui-labels/tab-query-builder/@label" name="tabqbUrN"> 
                    <method event="onselect" reference="this.tab">
                    	//classroot.parentView.queryTestTabs.setVisible(true);
	                	//classroot.parentView.msgTestTabs.setVisible(false);
	                	
                    	var tableID = classroot.parentView.mainTabs.tabpUrN.addVTUrN.cbxQueryUrN.getValue();
    	                var dbSelected = classroot.parentView.mainTabs.tabpUrN.addDBUrN.cbxDbUrN.getValue();
                      
                      	if(tableID ==''){
                      		classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setVisible(false);
                      		classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.setVisible(false);  
                      		classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.alertTxtUrN.setVisible(true);                        		
                      		//classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.directSqlBtnUrNS.setVisible(false);
                      		classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortAlertTxtUrN.setVisible(true);                        		
                      	} else {
                      		classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n.setVisible(true);
                      		classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.setVisible(true);  
                      		classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.alertTxtUrN.setVisible(false);                        		
                      		//classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.directSqlBtnUrNS.setVisible(true);
                      		classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortAlertTxtUrN.setVisible(false);                        		
                      	}
                    </method>
          			<tabslider sliderRH="true" width="620" height="434" name="parentSlider" >
		                <tabelement name="criteriaUrN" datapath="gui:/gui-labels/slider-criteria/@label" 
		                                        width="${immediateparent.width}" align="center" selected="true">
		                        <attribute name="wizardIsOpen" value="true" type="boolean" />
		                        <attribute name="manualIsOpen" value="true" type="boolean" />
		                        <tree name="treeWizard" open="true" text="Wizard" expander="lztree_plusminus_rsc" icon="lztree_wizard_rsc" style="null" styleable="false">
						        	<method event="oninit">
						        		//Set White
						        		this.treeitem.subviews[0].setAttribute("fgcolor", 0xFFFFFF);
						        		this.treeitem.subviews[2].setAttribute("fgcolor", 0xFFFFFF);
						        	</method>
						        	<method event="onopen">
						        		if(this.open) {
						        			//Switch
						        			parent.setAttribute("wizardIsOpen", true);
						        			//Open Wizard
						        			if(parent.manualIsOpen) {
						        				parent.bordertheedittext.scrollBorderOpenAnimatorHeight.doStart();
						        				parent.bordertheedittext.scrollBorderOpenAnimator.doStart();
						        				parent.qb_query_builder_messageUr_n.queryOpenAnimator.doStart();
						        				parent.treeManual.treeManualOpenAnimator.doStart();
						        			} else {
						        				parent.treeManual.treeManualCloseAnimatorWizard.doStart();
						        				parent.qb_query_builder_messageUr_n.manualCloseAnimator.doStart();
						        				parent.bordertheedittext.collapseHeight.doStart();
						        				parent.bordertheedittext.collapseHeightY.doStart();
						        			}
						        		} else {
						        			//Switch
						        			parent.setAttribute("wizardIsOpen", false);
						        			//Close Wizard
					        				parent.treeManual.setAttribute("open", true);
						        		}
						        	</method>
						        </tree>
		                        <querybuilder name="qb_query_builder_messageUr_n" width="${immediateparent.width}" 
		                            height="110" bgcolor="white" y="20">
					            	<method event="oninit">
					            		classroot.setAttribute("qb_query_builder_message_new", this);
					            		this.setAttribute("insertQuery", false);
					            		this.setAttribute("sqlEditBox", parent.bordertheedittext.qb_sql_textUr_n);//classroot.txt_qb_sql_ur_new);
					            		this.setAttribute("qbDatapath", "qb_query_builder_user_reply_new:/");
					            		this.setAttribute("qbDataset", qb_query_builder_user_reply_new);
					            	</method>
					            	<animator name="queryCloseAnimator" attribute="height" to="0" duration="250" start="false">
							            <handler name="onstop">
							            	parent.setAttribute("visible", false);
							            </handler>
						       		</animator>
						       		<animator name="queryOpenAnimator" attribute="height" to="110" duration="250" start="false">
						       			<handler name="onstart">
							                parent.setAttribute("visible", true);
							            </handler>
						       		</animator>
						       		<animator name="manualCloseAnimator" attribute="height" to="307" duration="250" start="false">
						       			<handler name="onstart">
							                parent.setAttribute("visible", true);
							            </handler>
						       		</animator>	                            
		                        </querybuilder >
		                        <view align="center" name="alertTxtUrN" y="20">
		                        	<simplelayout axis="y" />
               		                <text datapath="gui:/gui-labels/txt-new-query-msg-condition-1/@label" width="500" fontstyle="bold" fgcolor="0xffffff" />
		                            <text datapath="gui:/gui-labels/txt-new-query-msg-condition-2/@label" width="500" fontstyle="bold" fgcolor="0xffffff" />
		                        </view>
		                        
		                        <tree name="treeManual" open="true" text="Manual" expander="lztree_plusminus_rsc" icon="lztree_manual_rsc" style="null" styleable="false" y="138">
						        	<method event="oninit">
						        		//Set White
						        		this.treeitem.subviews[0].setAttribute("fgcolor", 0xFFFFFF);
						        		this.treeitem.subviews[2].setAttribute("fgcolor", 0xFFFFFF);
						        	</method>
						        	<method event="onopen">
						        		if(this.open) {
						        			//Switch
						        			parent.setAttribute("manualIsOpen", true);
						        			//Open Manual
						        			if(parent.wizardIsOpen) {
						        				parent.bordertheedittext.expandHeightY.doStart();
						        				parent.bordertheedittext.scrollBorderOpenAnimatorHeight.doStart();
						        				this.treeManualOpenAnimator.doStart();
						        				parent.qb_query_builder_messageUr_n.queryOpenAnimator.doStart();
						        			} else {
						        				parent.treeManual.treeManualCloseAnimator.doStart();
						        				parent.bordertheedittext.scrollBorderCloseAnimator.doStart();
						        				parent.bordertheedittext.scrollBorderCloseAnimatorHeight.doStart();
						        				parent.qb_query_builder_messageUr_n.queryCloseAnimator.doStart();
						        			}
						        		} else {
						        			//Switch
						        			parent.setAttribute("manualIsOpen", false);
						        			//Close Wizard
					        				parent.treeWizard.setAttribute("open", true);
						        		}
						        	</method>
						        	<animator name="treeManualCloseAnimator" attribute="y" to="20" duration="250" start="false">
						       		</animator>
						       		<animator name="treeManualOpenAnimator" attribute="y" to="138" duration="250" start="false">
						       		</animator>
						       		
						       		<animator name="treeManualCloseAnimatorWizard" attribute="y" to="335" duration="250" start="false">
						       		</animator>
						        </tree>
		                        
		                        
		                        
		                        
		                        
		                        
		                        <view name="bordertheedittext" bgcolor="0x9c9c9c" width="602" height="197" y="157">
			                        <animator name="scrollBorderCloseAnimator" attribute="y" to="39" duration="250" start="false">
						       		</animator>
						       		<animator name="scrollBorderOpenAnimator" attribute="y" to="157" duration="250" start="false">
						       		</animator>
						       		<animator name="scrollBorderCloseAnimatorHeight" attribute="height" to="315" duration="250" start="false">
						       			<handler name="onstart">
							                parent.setAttribute("visible", true);
							            </handler>
						       		</animator>
						       		<animator name="scrollBorderOpenAnimatorHeight" attribute="height" to="197" duration="250" start="false">
						       			<handler name="onstart">
							                parent.setAttribute("visible", true);
							            </handler>
						       		</animator>
						       		
						       		<animator name="collapseHeight" attribute="height" to="0" duration="250" start="false">
						       			<handler name="onstop">
							            	parent.setAttribute("visible", false);
							            </handler>
						       		</animator>
						       		<animator name="collapseHeightY" attribute="y" to="355" duration="250" start="false">
						       		</animator>
						       		<animator name="expandHeightY" attribute="y" to="157" duration="250" start="false">
						       		</animator>
			                    	<scrolledittext name="qb_sql_textUr_n" multiline="true" resizable="true" x="1" y="1" width="${parent.width - 1}" height="${parent.height - 2}"><!-- width="$once{immediateparent.width-2}" -->
								        <method event="oninit">
						            		classroot.setAttribute("txt_qb_sql_ur_new", this);
						            	</method>  	                
					                </scrolledittext>
                				</view>
		                </tabelement>
		                
		                <tabelement name="sortOrderUrN" datapath="gui:/gui-labels/slider-sort-group-result/@label" align="center">						
		                    <view name="sortLayoutUrN">
								<simplelayout axis="y" spacing="2"/>
		                        <view name="interView1">
		                            <simplelayout axis="x" />
		                            <text datapath="gui:/gui-labels/lbl-field/@label" width="100" fgcolor="0xFFFFFF" />
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_field" />
		                            <combobox name="lstSortField2UrN" width="250" editable="false" shownitems="8">
		                                <textlistitem datapath="qb_query_builder_user_reply_new:/root/query/query/field" text="$path{'@name'}"/>
		                            </combobox>
		                        </view>
		                        <view name="interView2" >
		                            <simplelayout axis="x" />
		                            <text datapath="gui:/gui-labels/lbl-sort-order/@label" width="100" fgcolor="0xFFFFFF" />
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_order" />
		                            <combobox name="comSortOrder2UrN"  width="250" editable="false" shownitems="8">
		                                <textlistitem text="Ascending" selected="true"/><!-- Default -->
		                                <textlistitem text="Descending"/>
		                            </combobox>
		                        </view>
		                        <view name="interView3">
		                            <simplelayout axis="x"/>
		                            <text datapath="gui:/gui-labels/lbl-sorts/@label"  width="100" fgcolor="0xFFFFFF" />
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_sort" />
		                            <edittext name="txtSort2UrN" datapath="qb_query_builder_user_reply_new:/root/query/query" text="$path{'@sort'}" width="250" height="50" multiline="true"/>
		                        </view>
		                        <view>
		                            <simplelayout axis="x" spacing="2"/>
									<text text="" width="100"/>                            
		                            <!-- add sort field -->
		                            <mdn_button datapath="gui:/gui-labels/btn-add/@label">
					                	<method event="onclick">
					                	<![CDATA[	
					                		var sortField = classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView1.lstSortField2UrN.getText();
					                		var sortOrder = (classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView2.comSortOrder2UrN.getText() == "Ascending" ? "ASC" : "DESC");
					                		var sortStr = classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView3.txtSort2UrN.getText();
					                		if (sortField == null || sortField == "" || sortField == undefined){
					                			classroot.parentView.errorView.txtErrorMsgQUrN.setText('Please select sort field.');
					                			return;
					                		}					                		
					                		Debug.write(" sortField: " + sortField + " sortOrder: " + sortOrder);
					                		var wholeSortStr = "";
					                		if (sortStr == null || sortStr == ""){
					                			wholeSortStr = sortField + " " + sortOrder;
					                			classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView3.txtSort2UrN.setText(wholeSortStr);
					                		}
					                		else{
					                			wholeSortStr = sortStr + ", " + sortField + " " + sortOrder;
					                			classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView3.txtSort2UrN.setText(wholeSortStr);
					                		}
					                		var sqlText = classroot.txt_qb_sql_ur_new.getText();
					                		if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_message_new._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("ORDER BY");
						                		if (firstIndex > 0){
						                			var lastIndex = sqlText.lastIndexOf("ASC");
						                			var lastIndex2 = sqlText.lastIndexOf("DESC");
						                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
						                			var firstPart="";
						          					var secondPart="";
						                			if (lastIndex > lastIndex2){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 4);
						                			}else if (lastIndex2 > lastIndex){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 5);
						                			}
						                			sqlText = firstPart + secondPart;
						                		}
					                		}
					                		if (wholeSortStr.length > 1){
					                			sqlText += " ORDER BY " + wholeSortStr;
					                		}		
					                		classroot.txt_qb_sql_ur_new.setText(sqlText);					                		
					                	]]>
					                	</method>  
					                	<hinttip tipid="ENDUSERACCESS-msgquery-sort_add" />                          
		                            </mdn_button>
		                            <mdn_button datapath="gui:/gui-labels/btn-remove/@label">
					                	<method event="onclick">
					                		classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView3.txtSort2UrN.setText("");
					                		var sqlText = classroot.txt_qb_sql_ur_new.getText();
					                		if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_message_new._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("ORDER BY");
						                		if (firstIndex > 0){
						                			var lastIndex = sqlText.lastIndexOf("ASC");
						                			var lastIndex2 = sqlText.lastIndexOf("DESC");
						                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
						                			var firstPart="";
						          					var secondPart="";
						                			if (lastIndex > lastIndex2){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 4);
						                			}else if (lastIndex2 > lastIndex){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 5);
						                			}
						                			sqlText = firstPart + secondPart;
						                		}
					                		}
					                		classroot.txt_qb_sql_ur_new.setText(sqlText);
					                	</method>  
					                	<hinttip tipid="ENDUSERACCESS-msgquery-sort_remove" />                          
		                            </mdn_button>
		                        </view>
		                        <view height="10"/>		                        
								<view name="interView4">
									<simplelayout axis="x"/>
			                        <text datapath="gui:/gui-labels/lbl-group-on/@label" width="100" fgcolor="0xFFFFFF" />
			                        <hinttip tipid="ENDUSERACCESS-msgquery-sort_group" />
		                            <combobox name="comGroupField2UrN" datapath="qb_query_builder_user_reply_new:/root/query/query/@groupFieldName" width="250" editable="false" shownitems="8">
		                                <textlistitem datapath="qb_query_builder_user_reply_new:/root/query/query/field" text="$path{'@name'}" value="$path{'@id'}" />
		                                <method event="onselect">
					                		Debug.write(this.getText(), getValue());
					                		var groupFieldName = this.getText();
					                		var sqlText = classroot.txt_qb_sql_ur_new.getText();
					                		var secondPart = "";
						                	if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_message_new._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("GROUP BY");
						                		var firstPart = "";
						                		if (firstIndex > 0){
						                			Debug.write("firstIndex of GROUP BY", firstIndex);
							                		var secondIndex= sqlText.indexOf(".", firstIndex);
						          					var thirdIndex= sqlText.indexOf(" ", secondIndex);
						          					Debug.write("firstIndex", firstIndex, "secondIndex", secondIndex, "thirdIndex", thirdIndex);
					                				firstPart = sqlText.substring(0, firstIndex-1);
					                				if (thirdIndex == -1)
					                					secondPart = "";
					                				else
					                					secondPart = sqlText.substring(thirdIndex);
						                			
						                			sqlText = firstPart;
						                		}else{
							                		firstIndex = sqlText.indexOf("ORDER BY");
							                		Debug.write("firstIndex of ORDER BY", firstIndex);
							                		if (firstIndex > 0){
							                			var lastIndex = sqlText.lastIndexOf("ASC");
							                			var lastIndex2 = sqlText.lastIndexOf("DESC");
							                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
							                			if (lastIndex > lastIndex2){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}else if (lastIndex2 > lastIndex){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}
							                			sqlText = firstPart;
							                		}					                		
						                		}
					                		}
					                		if (groupFieldName.length > 0){
					                			sqlText += " GROUP BY " + groupFieldName;
					                		}		
					                		Debug.write("secondPart", secondPart);	           
					                		if (secondPart.length > 0){
					                			sqlText += secondPart;
					                		}              
					                		classroot.txt_qb_sql_ur_new.setText(sqlText);       
		                                </method>
		                            </combobox>
		                        </view>
		                        </view>
		                        <view align="center" name="sortAlertTxtUrN">
		                        	<simplelayout axis="y"/>
               		                <text datapath="gui:/gui-labels/txt-new-query-msg-condition-1/@label" width="500" fontstyle="bold" fgcolor="0xffffff" />
		                            <text datapath="gui:/gui-labels/txt-new-query-msg-condition-2/@label" width="500" fontstyle="bold" fgcolor="0xffffff" />
		                        </view>
						</tabelement>
					</tabslider>                
                </tabpane>
                <tabpane datapath="gui:/gui-labels/tab-query-result/@label" name="tabpane1" selected="true">
                    <view width="620" height="51" name="view1" id="qResultViewAnimate3" y="160" bgcolor="0x4386cc">
                    	<animator attribute="y" name="startQuery" to="0" duration="1000" start="false"></animator>
		                <view name="wholeUserInputView" x="5" y="5">
					        <view name="userInputView">
					            <text datapath="gui:/gui-labels/lbl-user-input/@label" width="150" name="labeltext" fgcolor="0xFFFFFF" y="3"></text>
					            <edittext name="txtUserInput" width="200" enabled="true" x="150" />
					            <text name="userInputTxtN" datapath="gui:/gui-labels/lbl-query-result-userinput/@label" resize="true" x="0" y="25" fgcolor="0xFFFFFF" />
					        </view>		                	
		                </view>
		                <!-- Direct SQL Button -->
		                <view x="470" y="5">
			                <mdn_button datapath="gui:/gui-labels/btn-test-direct-sql/@label">
			                	<method event="onclick">
				                	<![CDATA[
				                		Debug.write("Direct SQL button clicked!");
				                		var dbId = classroot.parentView.mainTabs.tabpUrN.addDBUrN.cbxDbUrN.getValue();
										var tableID = classroot.parentView.mainTabs.tabpUrN.addVTUrN.cbxQueryUrN.getValue();
										var queryType = classroot.parentView.mainTabs.tabpUrN.addQTUrN.qTypeUrN.getValue();						            
						                //if(tableID != null && tableID != ''){
										//	if(queryType == '1') {
												//queryType = "select";
						                        
						                        //controller.getNewSelectQueryBuilderForUserReply(tableID);
						                        //sqlText = classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n._qb_controller.getSQL();
										//	}
										//}
							            var sqlText = classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.bordertheedittext.qb_sql_textUr_n.getText();
							            Debug.write("##### SQL IS: ", sqlText);
							            var viewID = tableID;
				                        
				                        var userInputTestValues = classroot.parentView.mainTabs.tabpane1.view1.wholeUserInputView.userInputView.txtUserInput.getText();
				                        Debug.write("##### TESTING VALUE IS: ", userInputTestValues);
							            if(queryType == '1') {
							            	controller.getSelectQueryResultUrNew(classroot.maintab.currProjectId, dbId , viewID, sqlText, null, userInputTestValues);
				                        }else if (queryType == '2'){
				                        	//controller.getUpdateQueryResultUrNew(classroot.maintab.currProjectId, dbId , sqlText, userInputTestValues);
				                        }else if (queryType == '3'){
				                        	//controller.getInsertQueryResultUrNew(classroot.maintab.currProjectId, dbId , sqlText, userInputTestValues);
				                        }
				                        //var p2 = qb_query_result.getPointer();   
				                      ]]>			                	
			                	</method>  
			                	<hinttip tipid="ENDUSERACCESS-msgquery-directsql-test" />              
			                </mdn_button>
		                </view>                    	
                	</view>
                	<ftdynamicgrid name="resultGridUrN" datapath="qb_query_result_ur_new:/root"
				                   contentdatapath="resultset/row"
				                   metadatapath="metadata/column"
				                   width="620" height="385" rowheight="20" visible="true" y="55" id="resultGridNAnimate3" opacity="0">
				                   <animator attribute="opacity" name="startQueryOpacity" to="1" duration="1000" start="false"></animator>
				    </ftdynamicgrid>
					<text name="notSelectQuery" datapath="gui:/gui-labels/no-select-query/@label" fgcolor="red" 
						  alialign="center" visible="true" width="500" fontstyle="bold" multiline="true"/> 				    
                </tabpane>
                <tabpane datapath="gui:/gui-labels/tab-message-builder/@label" name="tabmbUrN">
                	<simplelayout axis="y"/>
                	<method event="onselect" reference="this.tab">
                		Debug.write("New Message Buildet Tab");
	                	//classroot.parentView.queryTestTabs.setVisible(false);
	                	//classroot.parentView.msgTestTabs.setVisible(true);
	                	
						classroot.parentView.errorView.txtErrorMsgQUrN.setText("");

						/*var params = new LzParam(); 
                		var dbId = classroot.parentView.mainTabs.tabpUrN.addDBUrN.cbxDbUrN.getValue();
		                var viewID = classroot.parentView.mainTabs.tabpUrN.addVTUrN.cbxQueryUrN.getValue();
		                var queryType = classroot.parentView.mainTabs.tabpUrN.addQTUrN.qTypeUrN.getValue();
		                var sql = classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n._qb_controller.getSQL();

						params.addValue('action', 'getDefaultTextMsgForResponse', true);
						params.addValue('queryType', queryType, true);
						params.addValue('dbId', dbId, true);
						params.addValue('sql', sql, true);
						params.addValue('viewID', viewID, true);

						dbQueryReq.setQueryString(params);
						dbQueryReq.doRequest();*/
							
                	  </method>
						<view name="responseView">
							<simplelayout axis="y"/>
							<view name="textAreaViewName">
								<simplelayout axis="y" />
								<text datapath="gui:/gui-labels/slider-response-format/@label" fontstyle="bold" resize="true" />
		               			<scrolledittext name="newResponseFormatTxtAreaUrN" datapath="dbQueryReq:/root/@responseFormat" width="614" height="370"
						            defaultfontname="Arial" 
						            defaultfontcolor="black"
						            border="1" >
		               			</scrolledittext>
								<hinttip tipid="ENDUSERACCESS-msgquery-response-format" />
							</view>
	               			<view align="right">
								<simplelayout axis="x"/>
								<text text="" width="158"/>	               				
							  	<mdn_button datapath="gui:/gui-labels/btn-default/@label">
							  		<method event="onclick">
										var params = new LzParam(); 
				                		var dbId = classroot.parentView.mainTabs.tabpUrN.addDBUrN.cbxDbUrN.getValue();
						                var viewID = classroot.parentView.mainTabs.tabpUrN.addVTUrN.cbxQueryUrN.getValue();
						                var queryType = classroot.parentView.mainTabs.tabpUrN.addQTUrN.qTypeUrN.getValue();
						                var sql = classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n._qb_controller.getSQL();
				
										params.addValue('action', 'getDefaultTextMsgForResponse', true);
										params.addValue('queryType', queryType, true);
										params.addValue('dbId', dbId, true);
										params.addValue('sql', sql, true);
										params.addValue('viewID', viewID, true);
				
										dbQueryReq.setQueryString(params);
										dbQueryReq.doRequest();
							  		</method>
							  	</mdn_button>	
						  	</view>               				               																
						</view>
						<view name="drView">
							<simplelayout axis="x"/>
							<text datapath="gui:/gui-labels/lbl-display-result-ur/@label" width="158"/>
							<edittext name="displayResultUrN" width="80" />
							<hinttip tipid="ENDUSERACCESS-msgquery-msgdetails_results" />
						</view>							
                </tabpane>
                <tabpane datapath="gui:/gui-labels/tab-message-result/@label" name="tabpane1_new">
			               <view name="msgHolderView3" id="msgHolderViewAnimation3" width="621" height="55" bgcolor="0x4386cc" y="160">
				               <!-- <view name="interView1">
									<radiogroup layout="axis: x; spacing:7" name="newMessagingTypeRadioUrN" height="20">
										<radiobutton datapath="gui:/gui-labels/lbl-email2/@label" width="110" value="1" />
										<radiobutton datapath="gui:/gui-labels/lbl-sms/@label" width="110" value="2" />
										<radiobutton datapath="gui:/gui-labels/lbl-im/@label" width="110" value="3" />
									</radiogroup>
								</view> -->
								<animator attribute="y" name="startMessageTest" to="0" duration="1000" start="false"></animator>
								<view x="5" y="5" name="view1">
								   	<text datapath="gui:/gui-labels/lbl-msg-result-userinput-ur/@label" id="userInputTxt3" width="620" fgcolor="0xFFFFFF" />
								</view>	
								<view name="interView2" x="5" y="25">
									<simplelayout axis="x"  spacing="5"/>
					               	<edittext name="newEnterFormatMessageTxtUrN" text="" width="320"/>
					                <mdn_button datapath="gui:/gui-labels/btn-test-message/@label">
					                	<method event="onclick">
					                		<![CDATA[
					                		//var messagingType = classroot.parentView.mainTabs.tabpane1_new.interView1.newMessagingTypeRadioUrN.getValue();
					                		var enterFormatMessage = classroot.parentView.mainTabs.tabpane1_new.msgHolderView3.interView2.newEnterFormatMessageTxtUrN.getText();
					                		
								          	var response = classroot.parentView.mainTabs.tabmbUrN.responseView.textAreaViewName.newResponseFormatTxtAreaUrN.getText();
					                		var displayResult = classroot.parentView.mainTabs.tabmbUrN.drView.displayResultUrN.getText();
								          	
					                		var sorts = classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView3.txtSort2UrN.getText();
					                		var groupFieldName = classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView4.comGroupField2UrN.getText();
					                		var groupFieldId = classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView4.comGroupField2UrN.getValue();
								          	
				    	            		var viewID = classroot.parentView.mainTabs.tabpUrN.addVTUrN.cbxQueryUrN.getValue();
					                		var queryType = classroot.parentView.mainTabs.tabpUrN.addQTUrN.qTypeUrN.getValue(); 
											var sql;
											if(queryType == '1') {
				                		        sql = classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n._qb_controller.getSQL();
						                		if (groupFieldName.length > 0){
						                			sql += " GROUP BY " + groupFieldName;
						                		}
						                		if (sorts.length > 1){
						                			sql += " ORDER BY " + sorts;
						                		}	
				                        	}else if(queryType == '2'){
		
												queryType = "update";
												sql = classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n._qb_controller.getSQLForUpdate();
				
											}else if(queryType == '3'){
				
												queryType = "insert";
												sql = classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n._qb_controller.getSQLForInsert();
											}
		
											var params = new LzParam();
											params.addValue('action', 'testURMessaginResult', true);
											params.addValue('urId', -1, true);
											
								            params.addValue('responseFormat',response, true);   
	
								            //params.addValue('messagingType',messagingType);            
								            params.addValue('enterFormatMessage',enterFormatMessage);            
					                		params.addValue('displayResult', displayResult, true);
					                		
								            params.addValue('queryType',queryType);            
								            params.addValue('viewID',viewID);            
								            params.addValue('sql',sql);            							            
								            params.addValue('sort',sorts);            							            
								            params.addValue('groupId',groupFieldId);            							            
	
							        		var valueOrConditions = [];
							        		var ids = [];
							        		var rows = [];
							        		var types = [];
							        		var useds = [];
							        		var indents = [];
							        		var parents = [];
							        		var numbers = [];
							        		var fields = [];
							        		var compIDs = [];	
							        		var comparisons = [];
							        		var values = [];
							        		var connections = [];
							        		var value2s = [];	// The second value field, 'value2'. It is only used and visible when
																//	dealing with the 'is between' and 'is not between' operators.					
							        		var groupings = [];
							        		var userInputSeqs = [];
							        		var userInputSeqs2 = [];
											
											var tableIndex = 0;
							        		
						               		var allNodes = qb_query_builder_user_reply_new.getFirstChild();
											var rootNode = allNodes.getElementsByTagName("criteria")[0];											
							        		var numberNodes = rootNode.childNodes.length;
					                		for (var i = 0; i < numberNodes; i++){
												queryNode = rootNode.childNodes[i];
												var id = queryNode.getAttr("id");
							        			var row = queryNode.getAttr("row");
							        			var type = queryNode.getAttr("type");
							        			var used = queryNode.getAttr("used");
							        			var indent = queryNode.getAttr("indent");
								        		var valueOrCondition = queryNode.getAttr("valueOrCondition");
							        			var number = queryNode.getAttr("number");	
							        			var parent = queryNode.getAttr("parent");		        		
								        		var field = queryNode.getAttr("field");  			        		
								        		var compID = queryNode.getAttr("compID");
							        			var comparison = queryNode.getAttr("comparison");			        		
								        		var value = queryNode.getAttr("value");  			        		
								        		var connection = queryNode.getAttr("connection");
							        			var value2 = queryNode.getAttr("value2");			        		
								        		var grouping = queryNode.getAttr("grouping");
								        		var userInputSeq = queryNode.getAttr("valueUserInput");
								        		var userInputSeq2 = queryNode.getAttr("value2UserInput");
								        		
								        		ids[tableIndex] = id;
								        		rows[tableIndex] = row;
								        		types[tableIndex] = type;
												useds[tableIndex] = used;
												indents[tableIndex] = indent;
							        			valueOrConditions[tableIndex] = valueOrCondition;
							        			numbers[tableIndex] = number;
							        			parents[tableIndex] = parent;
							        			fields[tableIndex] = field;
							        			compIDs[tableIndex] = compID;	
								        		comparisons[tableIndex] = comparison;
								        		values[tableIndex] = value;
								        		connections[tableIndex] = connection;
								        		value2s[tableIndex] = value2;
								        		groupings[tableIndex] = grouping;
								        		userInputSeqs[tableIndex] = userInputSeq;
								        		userInputSeqs2[tableIndex] = userInputSeq2;
							        			
							        			tableIndex++;
							        		}										
											params.addValue('queryId', -1, true);
											//params.addValue('tableID', tableID, true);
											params.addValue('queryType', queryType, true);
											//params.addValue('sqlText', sqlText, true);
											params.addValue('ids', ids, true);
											params.addValue('rows', rows, true);
											params.addValue('types', types, true);
											params.addValue('useds', useds, true);
											params.addValue('indents', indents, true);
											params.addValue('valueOrConditions', valueOrConditions, true);
											params.addValue('parents', parents, true);
											params.addValue('numbers', numbers, true);
											params.addValue('fields', fields, true);
											params.addValue('compIDs', compIDs, true);			
											params.addValue('comparisons', comparisons, true);
											params.addValue('values', values, true);
											params.addValue('connections', connections, true);
											params.addValue('value2s', value2s, true);
											params.addValue('groupings', groupings, true);
											params.addValue('sorts', sorts, true);
											params.addValue('groupFieldId', groupFieldId, true);
											params.addValue('userInputSeqs', userInputSeqs, true);
											params.addValue('userInputSeqs2', userInputSeqs2, true);
											params.addValue('projectId', classroot.maintab.currProjectId, true);
	
											saveUserReply.setQueryString(params);
											saveUserReply.doRequest();
											
											//Animate
											msgHolderViewAnimation3.startMessageTest.doStart();
											msgResultNAnimation3.startMessageTest.doStart();
											msgHolderViewAnimation3.setAttribute("bgcolor", 0xebf3fc);
											userInputTxt3.setAttribute("fgcolor", 0x454545);
											]]>
					                	</method>
					                	<hinttip tipid="ENDUSERACCESS-msgquery-directsql-test" />
					                </mdn_button>
								</view>	
		               			<scrolledittext name="msgResultUrN" id="msgResultNAnimation3" datapath="saveUserReply:/root/@replyMessaing" width="621" height="371"
						            defaultfontname="Arial" 
						            defaultfontcolor="black"
						            border="1" y="68" opacity="0">
						            <animator attribute="opacity" name="startMessageTest" to="1" duration="1000" start="false"></animator>
		               			</scrolledittext>
		               		</view>
	               </tabpane>
            </tabs> 
	        <mdn_button datapath="gui:/gui-labels/btn-save/@label" width="50" x="577" y="476">
	            <method event="onclick">
	                	<![CDATA[
	                		var sorts = classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView3.txtSort2UrN.getText();
	                		var groupFieldName = classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView4.comGroupField2UrN.getText();
	                		var groupFieldId = classroot.parentView.mainTabs.tabqbUrN.parentSlider.sortOrderUrN.sortLayoutUrN.interView4.comGroupField2UrN.getValue();
	                		var displayResult = classroot.parentView.mainTabs.tabmbUrN.drView.displayResultUrN.getText();
	                		var msgDesc = classroot.parentView.mainTabs.tabpUrN.descView.descUrTxtN.getText();
	                		var ds = classroot.parentView.mainTabs.tabpUrN.datasource.dsStatusUrN.getValue();
	                		
	                		var dbId = classroot.parentView.mainTabs.tabpUrN.addDBUrN.cbxDbUrN.getValue();
	                		var tableID = classroot.parentView.mainTabs.tabpUrN.addVTUrN.cbxQueryUrN.getValue();
	                        var userReplyId = "0";
	                		var saveState = "0";

							var sqlText;
			                var queryType = classroot.parentView.mainTabs.tabpUrN.addQTUrN.qTypeUrN.getValue(); 
			                
			                if(tableID != null && tableID != ''){
								if(queryType == '1') {
									queryType = "select";
			                        sqlText = classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n._qb_controller.getSQL();
			                		if (groupFieldName.length > 0){
			                			sqlText += " GROUP BY " + groupFieldName;
			                		}
			                		if (sorts.length > 1){
			                			sqlText += " ORDER BY " + sorts;
			                		}	
								}else if(queryType == '2'){
	
									queryType = "update";
									sqlText = classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n._qb_controller.getSQLForUpdate();
	
								}else if(queryType == '3'){
	
									queryType = "insert";
									sqlText = classroot.parentView.mainTabs.tabqbUrN.parentSlider.criteriaUrN.qb_query_builder_messageUr_n._qb_controller.getSQLForInsert();
								}
							}
							var sqlString = classroot.txt_qb_sql_ur_new.getText();
							if (sqlString == null || sqlString == "" || sqlString == undefined){
								sqlString = sqlText;
							}
														
			        		var valueOrConditions = [];
			        		var ids = [];
			        		var rows = [];
			        		var types = [];
			        		var useds = [];
			        		var indents = [];
			        		var parents = [];
			        		var numbers = [];
			        		var fields = [];
			        		var compIDs = [];	
			        		var comparisons = [];
			        		var values = [];
			        		var connections = [];
			        		var value2s = [];	// The second value field, 'value2'. It is only used and visible when
												//	dealing with the 'is between' and 'is not between' operators.					
			        		var groupings = [];
			        		var userInputSeqs = [];
			        		var userInputSeqs2 = [];
							
							var tableIndex = 0;
			        		
		               		var allNodes = qb_query_builder_user_reply_new.getFirstChild();
							var rootNode = allNodes.getElementsByTagName("criteria")[0];											
			        		var numberNodes = rootNode.childNodes.length;
	                		for (var i = 0; i < numberNodes; i++){
								queryNode = rootNode.childNodes[i];
								var id = queryNode.getAttr("id");
			        			var row = queryNode.getAttr("row");
			        			var type = queryNode.getAttr("type");
			        			var used = queryNode.getAttr("used");
			        			var indent = queryNode.getAttr("indent");
				        		var valueOrCondition = queryNode.getAttr("valueOrCondition");
			        			var number = queryNode.getAttr("number");	
			        			var parent = queryNode.getAttr("parent");		        		
				        		var field = queryNode.getAttr("field");  			        		
				        		var compID = queryNode.getAttr("compID");
			        			var comparison = queryNode.getAttr("comparison");			        		
				        		var value = queryNode.getAttr("value");  			        		
				        		var connection = queryNode.getAttr("connection");
			        			var value2 = queryNode.getAttr("value2");			        		
				        		var grouping = queryNode.getAttr("grouping");
				        		var userInputSeq = queryNode.getAttr("valueUserInput");
				        		var userInputSeq2 = queryNode.getAttr("value2UserInput");
				        		
				        		ids[tableIndex] = id;
				        		rows[tableIndex] = row;
				        		types[tableIndex] = type;
								useds[tableIndex] = used;
								indents[tableIndex] = indent;
			        			valueOrConditions[tableIndex] = valueOrCondition;
			        			numbers[tableIndex] = number;
			        			parents[tableIndex] = parent;
			        			fields[tableIndex] = field;
			        			compIDs[tableIndex] = compID;	
				        		comparisons[tableIndex] = comparison;
				        		values[tableIndex] = value;
				        		connections[tableIndex] = connection;
				        		value2s[tableIndex] = value2;
				        		groupings[tableIndex] = grouping;
				        		userInputSeqs[tableIndex] = userInputSeq;
				        		userInputSeqs2[tableIndex] = userInputSeq2;
			        			
			        			tableIndex++;
			        		}		
							
				            var p2 = dbUserReply.getPointer();
				            p2.selectChild(1);
				            var queryId = p2.p.getAttr('queryId');
	                		
	                		var parentId = queryId;
	                		
	                		var textMsg = classroot.parentView.mainTabs.tabpUrN.urKeywordView.textMsgTxtN.getText();
	                		var timeoutUr = classroot.parentView.mainTabs.tabpUrN.timeoutView.timeoutUrTxtN.getText();
	                		
	                		var newResponseFormat = classroot.parentView.mainTabs.tabmbUrN.responseView.textAreaViewName.newResponseFormatTxtAreaUrN.getText();

							var params = new LzParam(); 
							params.addValue('action', 'addUserReply', true);
							params.addValue('saveState', saveState, true);
							params.addValue('userReplyId', userReplyId, true);
				            params.addValue('dsStatus', ds, true);            										
							params.addValue('tableID', tableID, true);
							if(queryType != 'insert'){
								params.addValue('viewID', tableID, true);
							}
							params.addValue('queryType', queryType, true);
							params.addValue('sqlText', sqlString, true);//using text box sql for saving
							params.addValue('ids', ids, true);
							params.addValue('rows', rows, true);
							params.addValue('types', types, true);
							params.addValue('useds', useds, true);
							params.addValue('indents', indents, true);
							params.addValue('valueOrConditions', valueOrConditions, true);
							params.addValue('parents', parents, true);
							params.addValue('numbers', numbers, true);
							params.addValue('fields', fields, true);
							params.addValue('compIDs', compIDs, true);			
							params.addValue('comparisons', comparisons, true);
							params.addValue('values', values, true);
							params.addValue('connections', connections, true);
							params.addValue('value2s', value2s, true);
							params.addValue('groupings', groupings, true);
							params.addValue('sorts', sorts, true);
							params.addValue('groupFieldId', groupFieldId, true);
							params.addValue('userInputSeqs', userInputSeqs, true);
							params.addValue('userInputSeqs2', userInputSeqs2, true);
							
				            params.addValue('dsType',1);	 
				            params.addValue('dbId',dbId);     
				            	
							params.addValue('queryId', queryId, true);
							params.addValue('parentId', parentId, true);
										
							params.addValue('textMsg', textMsg, true);			            
							params.addValue('timeoutUr', timeoutUr, true);			            
							params.addValue('newResponseFormat', newResponseFormat, true);		
							params.addValue('displayResult', displayResult, true);	
							params.addValue('msgDesc', msgDesc, true);
							params.addValue('projectId', classroot.maintab.currProjectId, true);															
				            	
							saveUserReply.setQueryString(params);
							saveUserReply.doRequest();
	                	]]>
	            </method>
	            <hinttip tipid="ENDUSERACCESS-msgquery-save-button" />
	        </mdn_button>
            <view name="errorView" y="486">
	            <text name="txtErrorMsgQUrN" text="" fgcolor="red" fontstyle="bold" resize="true"  width="600" height="60" multiline="true" />
    	    </view>
		</view>    
		
	    <!-- Deals with the query result. -->
	   	<datapointer xpath="qb_query_result_ur_new:/root" rerunxpath="true"
	    ondata="processData();" onerror="canvas.showError(this);"
	    ontimeout="canvas.showTimeout();">
	    <method name="processData">
	        Debug.write("received qb_query_result_ur_new return data ");
	        var result = this.getNodeText();
	        var action = this.getNodeAttribute('action');
	        var errorMessage = this.getNodeAttribute('errorMessage');
	        var updateData = false;
	        Debug.write(" >>> result = " + result +" >>> action = " + action +" >>> errorMessage = " + errorMessage);
	        if (action == 'getUpdateQueryResult'){
	            classroot.parentView.mainTabs.tabpane1.resultGridUrN.setVisible(false);
	            if (result == 'OK'){
	                classroot.parentView.errorView.txtErrorMsgQUrN.setText('Update Query Successful: ' + errorMessage);
	            } else {
	                classroot.parentView.errorView.txtErrorMsgQUrN.setText('Update Query Failed: ' + errorMessage);
	            }
			}else if(action == 'getInsertQueryResult'){
	            classroot.parentView.mainTabs.tabpane1.resultGridUrN.setVisible(false);
	            if (result == 'OK'){
	                classroot.parentView.errorView.txtErrorMsgQUrN.setText('Insert Query Successful: ' + errorMessage);
	            } else {
	                classroot.parentView.errorView.txtErrorMsgQUrN.setText('Insert Query Failed: ' + errorMessage);	
	            }
	        }else if (action == 'getEmptySelectQueryResult'){
		        classroot.parentView.errorView.txtErrorMsgQUrN.setText('');
	        }else {//if(action == 'getSelectQueryResult'){
               if (result == 'NoData'){
               		classroot.parentView.errorView.txtErrorMsgQUrN.setText('Select Query Result: No Data');
               		classroot.parentView.mainTabs.tabpane1.resultGridUrN.setVisible(false);
               }else if (result == 'Failed'){
               		classroot.parentView.errorView.txtErrorMsgQUrN.setText('Select Query Failed: ' + errorMessage);
               		classroot.parentView.mainTabs.tabpane1.resultGridUrN.setVisible(false);
               }else{
            	   //Animate
					qResultViewAnimate3.startQuery.doStart();
					resultGridNAnimate3.startQueryOpacity.doStart();
					qResultViewAnimate3.setAttribute("bgcolor", 0xebf3fc);
					qResultViewAnimate3.wholeUserInputView.userInputView.labeltext.setAttribute("fgcolor", 0x454545);
					qResultViewAnimate3.wholeUserInputView.userInputView.userInputTxtN.setAttribute("fgcolor", 0x454545);
					//Animate End
	               classroot.parentView.errorView.txtErrorMsgQUrN.setText('Select Query Successful.');
	               classroot.parentView.mainTabs.tabpane1.resultGridUrN.setVisible(true);
	               
	               var initialLoad = classroot.getAttribute("initialLoadColumns");
	               if (initialLoad == true){
			       		classroot.setAttribute("initialLoadColumns", false);
			       }else{
				       		
		               var viewChanged = classroot.getAttribute("viewChanged");
		               if (viewChanged == true){			               		
			               //Try to set the column name again
			               Debug.write("Try to set the column name again");
			               classroot.parentView.mainTabs.tabpane1.resultGridUrN.inferColumns();	
			               classroot.setAttribute("viewChanged", false);
		               }else{
							Debug.write("View is same, do not need to set the column name again");
		               }
			       }
	           }
	        }
	        
	    </method>
	   </datapointer>		
		
	</class>
	<class name="viewEditUserReply" width="${projectTabs.currTab._borderView._projectView._rightView.width - 1}" 
	        height="${projectTabs.currTab._borderView._projectView._rightView._upperPart.height - projectTabs.currTab._borderView._projectView._rightView._upperPart._header.height - 1}">
        <attribute name="maintab"/>
        <attribute name="qb_query_builder_messageEdit"/>
        <attribute name="txt_qb_sql_ur_edit"/>
        <attribute name="previousUrId"/>
        <attribute name="currUrId"/>
        <attribute name="viewChanged" type="boolean" value="false"/>
        <attribute name="initialLoad" type="boolean" value="true"/>
        <attribute name="initialLoadSqlBox" type="boolean" value="true"/>
        <attribute name="initialLoadColumns" type="boolean" value="true"/>
        <method name="clearData">
        	mainView.mainTabs.propsTabUrN.setAttribute('selected', true);
	        errorView.txtErrorMsgQEditUrN.setText("");
	        mainView.queryTestTabs.tabpane1.pView.wholeUserInputView.userInputView.txtUserInput.setText("");
    	</method>
    	<view name="mainView" width="638" height="${immediateparent.height - 80}" x="1" y="1" >
           <tabs width="${immediateparent.width}" height="505" name="mainTabs" tabspacing="1" bgcolor="0x4386cc">
                <attribute name="tabclass" value="tabWhiteTab" type="string" />
                <method event="oninit">
					<![CDATA[
               			//Pushes the first tab in
						this.subviews[0].layouts[0].setAttribute("inset", 15);
					]]>
				</method>
                <tabpane datapath="gui:/gui-labels/tab-properties/@label" name="propsTabUrN" selected="true">
                     <method event="onselect" reference="this.tab">
                    	if (this.tab.selected) {
							Debug.write("Selected User Reply Properties Edit Tab");
							//classroot.mainView.queryTestTabs.setVisible(false); 
							//classroot.mainView.msgTestTabs.setVisible(false); 
							classroot.errorView.txtErrorMsgQEditUrN.setText("");

				            var p = dbUserReply.getPointer();
				            p.selectChild(1);
				            var urId = p.p.getAttr('urId');
				            
<!-- ds							var ds = p.p.getAttr('queryDSId');
							if(ds == 1){
								editWSUr.setVisible(false);
								classroot.mainView.mainTabs.propsTabUrN.editQTUr.setVisible(true);								
								classroot.mainView.mainTabs.propsTabUrN.editDBUr.setVisible(true);
								classroot.mainView.mainTabs.propsTabUrN.editVTUr.setVisible(true);
							}else{
								editWSUr.setVisible(true);
								classroot.mainView.mainTabs.propsTabUrN.editQTUr.setVisible(false);								
								classroot.mainView.mainTabs.propsTabUrN.editDBUr.setVisible(false);
								classroot.mainView.mainTabs.propsTabUrN.editVTUr.setVisible(false);
							} -->
						}
					</method>  
		            <simplelayout axis="y" spacing="10"/>
			        <view name="name" width="550">
			            <simplelayout axis="x" spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-parent-name/@label" width="150" fgcolor="0x454545"></text>
			            <text width="250" datapath="dbUserReply:/root/@parentName" >
						    <handler name="ondata">
						        <![CDATA[
						        var oldId = classroot.getAttribute("previousUrId");
						        var newId = classroot.getAttribute("currUrId").getText();
						        var loaded = classroot.getAttribute("initialLoad");
						        
						        if (newId != null && newId != undefined && newId != "" && newId != -1){
							        if (loaded == true){
							        	Debug.write("=======================INITIAL LOAD");
							        	classroot.setAttribute("previousUrId", newId);
							        	controller.urLoadQueryBuilder();
							        	classroot.setAttribute("initialLoad", false);
							        }
							        else if (oldId != newId){
							        	Debug.write("========================RELOAD BECAUSE USER REPLY ID CHANGED");
							        	controller.urLoadQueryBuilder();
							        	classroot.setAttribute("previousUrId", newId);
							        	
						               	Debug.write("Try to refresh the column name again");
						               	controller.getEmptySelectQueryResultUrEdit();
						               	classroot.mainView.mainTabs.tabpane2.resultGridEditN.refresh();
							           	classroot.setAttribute("viewChanged", true);
							        }else{
							        	Debug.write("========================NO RELOAD BECAUSE USER REPLY ID NOT CHANGED================");
							        }
						        }
						        ]]>
						    </handler>			            
			            </text>
			            <text name="txtUrIdN" width="250" datapath="dbUserReply:/root/@urId" visible="false" >
			            	<method event="oninit">
			            		classroot.setAttribute("currUrId", this);
			            	</method>			            
			            </text>          
			            <text width="250" datapath="dbUserReply:/root/@dbId" visible="false" />
			        </view>
			        <view name="description" width="550">
			            <simplelayout axis="x" spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-parent-desc/@label" width="150" fgcolor="0x454545"></text>
			            <text width="250" datapath="dbUserReply:/root/@parentDesc" />
			        </view>
				    <view name="datasource" width="550">
		         	   <simplelayout axis="x" spacing="2"/>
        				<text datapath="gui:/gui-labels/lbl-select-datasource/@label" width="150" fgcolor="0x454545" />
			            <text name="queryDSNameUrN" width="250" text="Database" /> <!-- datapath="dbMsg:/root/@queryDSName"  -->
			            <text name="queryDSIdUrN" width="250" datapath="dbMsg:/root/@queryDSId" visible="false" />
					</view>
				    <!-- ds <view id="editWSUr" width="550">
		         	   <simplelayout axis="x" spacing="2"/>
        				<text datapath="gui:/gui-labels/lbl-select-ws/@label" width="150" fontstyle="bold" />
			            <text id="wsNameUr" width="250" text="testWSName"/> datapath="dbMsg:/root/@queryDSName" 
					</view> -->
					<view name="editQTUr" width="550">
						<simplelayout axis="x"  spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-query-type/@label" width="150" fgcolor="0x454545" ></text>
			            <text name="qTypeEditUrN" width="250" datapath="dbUserReply:/root/@queryTypeName" />
			            <text name="qTypeEditValueUrN" width="250" datapath="dbUserReply:/root/@queryTypeValue" visible="false" />
					</view>
					 <view name="editDBUr" width="550">
			            	<simplelayout axis="x" spacing="2"/>
           					<text datapath="gui:/gui-labels/lbl-select-db/@label" width="150" fgcolor="0x454545" />
           					<text width="250" datapath="dbUserReply:/root/@dbName"/>			            
				   </view>
			       <view name="editVTUr" width="550">
			            <simplelayout axis="x" spacing="2"/>
			            <text name="vtLableEditUrN" width="150" datapath="dbUserReply:/root/@vtLable" fgcolor="0x454545" />
			            <text width="250" datapath="dbUserReply:/root/@viewOrTableName"/>
               		</view>
	       		     <view>
	         		   <simplelayout axis="y" spacing="0"/>
			           <text datapath="gui:/gui-labels/lbl-user-reply/@label" width="80" fgcolor="0x454545" fontstyle="bold" />
			           <hinttip tipid="ENDUSERACCESS-msgquery-userreply" />
			           <view width="617" height="1" bgcolor="0xe3e3e3" />
		             </view>
		             <view name="keywordView" >
						<simplelayout axis="x"  spacing="2"/>
						<text datapath="gui:/gui-labels/lbl-us-text/@label" width="150" fgcolor="0x454545" />
		             	<edittext name="textMsgTxtEditN" datapath="dbUserReply:/root/@urMsgTxt" width="70" /> <!-- x="70" y="0" -->
		            	<hinttip tipid="ENDUSERACCESS-msgquery-userreply-pre_defined_reply" />
		             </view>
		             <view name="decsView">
						<simplelayout axis="x"  spacing="2"/>
						<text datapath="gui:/gui-labels/lbl-description/@label" width="150" fgcolor="0x454545" />
		             	<edittext name="descUrTxtEditN" datapath="dbUserReply:/root/@urDescTxt" width="300"/>
		             	<hinttip tipid="ENDUSERACCESS-msgquery-userreply-Description" />
		             </view>
		             <view name="timeoutView">
						<simplelayout axis="x"  spacing="2"/>
						<text datapath="gui:/gui-labels/lbl-timeout/@label" width="150" fgcolor="0x454545" />
		             	<edittext name="timeoutUrTxtEditN" datapath="dbUserReply:/root/@timeout" width="50"/>
		             	<hinttip tipid="ENDUSERACCESS-msgquery-userreply-timeout" />
		             </view>
	                <view width="617">
				      <mdn_button datapath="gui:/gui-labels/btn-save/@label" width="50" x="567" y="-28">
				          <method event="onclick">
				            var p = dbUserReply.getPointer();
				            p.selectChild(1);
				            var viewOrTableIdInDB = p.p.getAttr('tableId');
				            
				            var p = dbUserReply.getPointer();
				            p.selectChild(1);
				            var urId = p.p.getAttr('urId');
				            var viewID2 = p.p.getAttr('viewOrTableId');
				            var connIDConstants = p.p.getAttr('dbId');
				            var parentName = p.p.getAttr('parentName');
				            var parentDesc = p.p.getAttr('parentDesc');	
				            var parentId = p.p.getAttr('parentId');	
	                		
	                		var saveState = "1";
			                var queryType = classroot.mainView.mainTabs.propsTabUrN.editQTUr.qTypeEditUrN.getText();//name

							var msgTxt = classroot.mainView.mainTabs.propsTabUrN.keywordView.textMsgTxtEditN.getText();
							var msgDesc = classroot.mainView.mainTabs.propsTabUrN.decsView.descUrTxtEditN.getText();
							var timeout = classroot.mainView.mainTabs.propsTabUrN.timeoutView.timeoutUrTxtEditN.getText();
							
			                var queryDSName = classroot.mainView.mainTabs.propsTabUrN.datasource.queryDSNameUrN.getText();//name
			                var queryDSId = classroot.mainView.mainTabs.propsTabUrN.datasource.queryDSIdUrN.getText();//Id
			        		controller.saveUserReplyProps(saveState, urId, msgTxt, msgDesc, queryType ,"1",dbId, viewOrTableIdInDB, parentName, parentDesc, timeout, parentId, classroot.maintab.currProjectId);
				          </method>
				          <hinttip tipid="ENDUSERACCESS-msgquery-save-button" />
				      </mdn_button>
			        </view> 
                </tabpane>
                <tabpane datapath="gui:/gui-labels/tab-query-builder/@label" name="tabqbUrN">
                	<method event="onselect" reference="this.tab">
                    	if (this.tab.selected) {
							Debug.write("Selected Query builder tab");
							
							//classroot.mainView.queryTestTabs.setVisible(true);
							//classroot.mainView.msgTestTabs.setVisible(false);
							classroot.errorView.txtErrorMsgQEditUrN.setText("");
				            
				            var p = dbUserReply.getPointer();
				            p.selectChild(1);
				            //var urId = p.p.getAttr('urId');
				            //var viewID = p.p.getAttr('viewOrTableId');
				            var queryType = p.p.getAttr('queryTypeName');
							if( queryType == 'select'){
								classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.setVisible(true); 
					           	//controller.getSelectQueryBuilder(urId, "UR");
	                        	
	                        	classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n.setAttribute("update", false);
	                        	classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n.setAttribute("insertQuery", false);
			           		}else if(queryType == 'update'){//update
			           			classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.setVisible(false);
								//tableID = viewID;
	                        	//controller.getUpdateQueryBuilder(urId, "UR");
	                        	classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n.setAttribute("update", true);
	                        	classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n.setAttribute("insertQuery", false);
			    	       	}else if(queryType == 'insert'){//Insert
			    	       		classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.setVisible(false);
			    	       		//tableID = viewID;
	                        	//controller.getInsertQueryBuilder(urId, "UR");
	                        	classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n.setAttribute("update", false);
	                        	classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n.setAttribute("insertQuery", true);
				           	}
				           	
				           	classroot.setAttribute("txt_qb_sql_ur_edit", slider.criteriaTab.bordertheedittext.qb_sql_textEditUr_n);
				           	Debug.write("current sql edit box for existing user reply", classroot.txt_qb_sql_ur_edit);
				           	slider.criteriaTab.qb_query_builder_messageEditUr_n.setAttribute("sqlEditBox", classroot.txt_qb_sql_ur_edit);
				           	var initialLoadSqlBox = classroot.getAttribute("initialLoadSqlBox");
				           	if (initialLoadSqlBox == true){
							    Debug.write("=======================INITIAL LOAD");
							    classroot.setAttribute("initialLoadSqlBox", false);
				           		//slider.criteriaTab.qb_query_builder_messageEditUr_n.qb_controller_name.updateSqlEditBox();
				           	}				           	
				           					           	
			           	}
					</method>  
                	<simplelayout axis="y" spacing="2"/>
          			<tabslider name="slider" sliderRH="true" width="620" height="434" bgcolor="null">
		                <tabelement name="criteriaTab" datapath="gui:/gui-labels/slider-criteria/@label" 
		                                        width="${immediateparent.width}" align="center" selected="true">
		                        <attribute name="wizardIsOpen" value="true" type="boolean" />
		                        <attribute name="manualIsOpen" value="true" type="boolean" />
		                        <tree name="treeWizard" open="true" text="Wizard" expander="lztree_plusminus_rsc" icon="lztree_wizard_rsc" style="null" styleable="false">
						        	<method event="oninit">
						        		//Set White
						        		this.treeitem.subviews[0].setAttribute("fgcolor", 0xFFFFFF);
						        		this.treeitem.subviews[2].setAttribute("fgcolor", 0xFFFFFF);
						        	</method>
						        	<method event="onopen">
						        		if(this.open) {
						        			//Switch
						        			parent.setAttribute("wizardIsOpen", true);
						        			//Open Wizard
						        			if(parent.manualIsOpen) {
						        				parent.bordertheedittext.scrollBorderOpenAnimatorHeight.doStart();
						        				parent.bordertheedittext.scrollBorderOpenAnimator.doStart();
						        				parent.qb_query_builder_messageEditUr_n.queryOpenAnimator.doStart();
						        				parent.treeManual.treeManualOpenAnimator.doStart();
						        			} else {
						        				parent.treeManual.treeManualCloseAnimatorWizard.doStart();
						        				parent.qb_query_builder_messageEditUr_n.manualCloseAnimator.doStart();
						        				parent.bordertheedittext.collapseHeight.doStart();
						        				parent.bordertheedittext.collapseHeightY.doStart();
						        			}
						        		} else {
						        			//Switch
						        			parent.setAttribute("wizardIsOpen", false);
						        			//Close Wizard
					        				parent.treeManual.setAttribute("open", true);
						        		}
						        	</method>
						        </tree>
		                        <querybuilder name="qb_query_builder_messageEditUr_n" width="602" 
		                            bgcolor="white" height="110" y="20"> 
					            	<method event="oninit">
					            		classroot.setAttribute("qb_query_builder_messageEdit", this);
					            		this.setAttribute("insertQuery", false);
					            		this.setAttribute("sqlEditBox", parent.bordertheedittext.qb_sql_textEditUr_n);//classroot.txt_qb_sql_ur_edit);//
					            		this.setAttribute("qbDatapath", "qb_query_builder_user_reply:/");
					            		this.setAttribute("qbDataset", qb_query_builder_user_reply);					            		
					            	</method>
					            	<animator name="queryCloseAnimator" attribute="height" to="0" duration="250" start="false">
							            <handler name="onstop">
							            	parent.setAttribute("visible", false);
							            </handler>
						       		</animator>
						       		<animator name="queryOpenAnimator" attribute="height" to="110" duration="250" start="false">
						       			<handler name="onstart">
							                parent.setAttribute("visible", true);
							            </handler>
						       		</animator>
						       		<animator name="manualCloseAnimator" attribute="height" to="307" duration="250" start="false">
						       			<handler name="onstart">
							                parent.setAttribute("visible", true);
							            </handler>
						       		</animator>
		                        </querybuilder >
		                        <view height="5" />
		                        <tree name="treeManual" open="true" text="Manual" expander="lztree_plusminus_rsc" icon="lztree_manual_rsc" style="null" styleable="false" y="138">
						        	<method event="oninit">
						        		//Set White
						        		this.treeitem.subviews[0].setAttribute("fgcolor", 0xFFFFFF);
						        		this.treeitem.subviews[2].setAttribute("fgcolor", 0xFFFFFF);
						        	</method>
						        	<method event="onopen">
						        		if(this.open) {
						        			//Switch
						        			parent.setAttribute("manualIsOpen", true);
						        			//Open Manual
						        			if(parent.wizardIsOpen) {
						        				parent.bordertheedittext.expandHeightY.doStart();
						        				parent.bordertheedittext.scrollBorderOpenAnimatorHeight.doStart();
						        				this.treeManualOpenAnimator.doStart();
						        				parent.qb_query_builder_messageEditUr_n.queryOpenAnimator.doStart();
						        			} else {
						        				parent.treeManual.treeManualCloseAnimator.doStart();
						        				parent.bordertheedittext.scrollBorderCloseAnimator.doStart();
						        				parent.bordertheedittext.scrollBorderCloseAnimatorHeight.doStart();
						        				parent.qb_query_builder_messageEditUr_n.queryCloseAnimator.doStart();
						        			}
						        		} else {
						        			//Switch
						        			parent.setAttribute("manualIsOpen", false);
						        			//Close Wizard
					        				parent.treeWizard.setAttribute("open", true);
						        		}
						        	</method>
						        	<animator name="treeManualCloseAnimator" attribute="y" to="20" duration="250" start="false">
						       		</animator>
						       		<animator name="treeManualOpenAnimator" attribute="y" to="138" duration="250" start="false">
						       		</animator>
						       		
						       		<animator name="treeManualCloseAnimatorWizard" attribute="y" to="335" duration="250" start="false">
						       		</animator>
						        </tree>
		                        <view name="bordertheedittext" bgcolor="0x9c9c9c" width="602" height="197" y="157">
			                        <animator name="scrollBorderCloseAnimator" attribute="y" to="39" duration="250" start="false">
						       		</animator>
						       		<animator name="scrollBorderOpenAnimator" attribute="y" to="157" duration="250" start="false">
						       		</animator>
						       		<animator name="scrollBorderCloseAnimatorHeight" attribute="height" to="315" duration="250" start="false">
						       			<handler name="onstart">
							                parent.setAttribute("visible", true);
							            </handler>
						       		</animator>
						       		<animator name="scrollBorderOpenAnimatorHeight" attribute="height" to="197" duration="250" start="false">
						       			<handler name="onstart">
							                parent.setAttribute("visible", true);
							            </handler>
						       		</animator>
						       		
						       		<animator name="collapseHeight" attribute="height" to="0" duration="250" start="false">
						       			<handler name="onstop">
							            	parent.setAttribute("visible", false);
							            </handler>
						       		</animator>
						       		<animator name="collapseHeightY" attribute="y" to="355" duration="250" start="false">
						       		</animator>
						       		<animator name="expandHeightY" attribute="y" to="157" duration="250" start="false">
						       		</animator>
			                        <scrolledittext name="qb_sql_textEditUr_n" x="1" y="1" multiline="true" resizable="true" 
			                        	datapath="qb_query_builder_user_reply:/root/query/query" text="$path{'@sql'}"
			                    		width="${parent.width - 1}" height="${parent.height - 2}" >
								        <method event="oninit">
						            		classroot.setAttribute("txt_qb_sql_ur_edit", this);
						            	</method>
			                    	</scrolledittext>
		                    	</view>
		                </tabelement>
		                <tabelement name="sortTab" datapath="gui:/gui-labels/slider-sort-group-result/@label" align="center">
								<simplelayout axis="y" spacing="2"/>
		                        <view height="10"/>
		                        <view name="view1">
		                            <simplelayout axis="x" />
		                            <text datapath="gui:/gui-labels/lbl-field/@label" width="100" fgcolor="0xFFFFFF" />
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_field" />
		                            <combobox name="lstSortFieldEditUrN" width="250" editable="false" shownitems="8">
		                                <textlistitem datapath="qb_query_builder_user_reply:/root/query/query/field" text="$path{'@name'}"/>
		                            </combobox>
		                        </view>
		                        <view name="view2">
		                            <simplelayout axis="x" />
		                            <text datapath="gui:/gui-labels/lbl-sort-order/@label" width="100" fgcolor="0xFFFFFF" />
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_order" />
		                            <combobox name="comSortOrderEditUrN" width="250" editable="false" shownitems="8">
		                                <textlistitem text="Ascending" selected="true"/>
		                                <textlistitem text="Descending"/>
		                            </combobox>
		                        </view>
		                        <view name="view3" >
		                            <simplelayout axis="x"/>
		                            <text datapath="gui:/gui-labels/lbl-sorts/@label"  width="100" fgcolor="0xFFFFFF" />
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_sort" />
		                            <edittext name="txtSortEditUrN" datapath="qb_query_builder_user_reply:/root/query/query" text="$path{'@sort'}" width="250" height="50" multiline="true"/>
		                        </view>
		                        <view>
		                            <simplelayout axis="x" spacing="2"/>
									<text text="" width="100"/>                            
		                            <mdn_button datapath="gui:/gui-labels/btn-add/@label">
					                	<method event="onclick">
					                	<![CDATA[	
					                		var sortField = classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.view1.lstSortFieldEditUrN.getText();
					                		var sortOrder = (classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.view2.comSortOrderEditUrN.getText() == "Ascending" ? "ASC" : "DESC");
					                		var sortStr = classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.view3.txtSortEditUrN.getText();
					                		
					                		if (sortField == null || sortField == "" || sortField == undefined){
					                			classroot.errorView.txtErrorMsgQEditUrN.setText('Please select sort field.');
					                			return;
					                		}
					                		
					                		var wholeSortStr = "";
					                		if (sortStr == null || sortStr == ""){
					                			wholeSortStr = sortField + " " + sortOrder;
					                			classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.view3.txtSortEditUrN.setText(wholeSortStr);
					                		}
					                		else{
					                			wholeSortStr = sortStr + ", " + sortField + " " + sortOrder;
					                			classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.view3.txtSortEditUrN.setText(wholeSortStr);
					                		}
					                		var sqlText = classroot.txt_qb_sql_ur_edit.getText();
					                		if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_messageEdit._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("ORDER BY");
						                		if (firstIndex > 0){
						                			var lastIndex = sqlText.lastIndexOf("ASC");
						                			var lastIndex2 = sqlText.lastIndexOf("DESC");
						                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
						                			var firstPart="";
						          					var secondPart="";
						                			if (lastIndex > lastIndex2){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 4);
						                			}else if (lastIndex2 > lastIndex){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 5);
						                			}
						                			sqlText = firstPart + secondPart;
						                		}
						                	}
					                		if (wholeSortStr.length > 1){
					                			sqlText += " ORDER BY " + wholeSortStr;
					                		}		
					                		classroot.txt_qb_sql_ur_edit.setText(sqlText);	
					                	]]>
					                	</method> 
					                	<hinttip tipid="ENDUSERACCESS-msgquery-sort_add" />                           
		                            </mdn_button>
		                            <mdn_button datapath="gui:/gui-labels/btn-remove/@label">
					                	<method event="onclick">
					                		classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.view3.txtSortEditUrN.setText("");
					                		var sqlText = classroot.txt_qb_sql_ur_edit.getText();
					                		if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_messageEdit._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("ORDER BY");
						                		if (firstIndex > 0){
						                			var lastIndex = sqlText.lastIndexOf("ASC");
						                			var lastIndex2 = sqlText.lastIndexOf("DESC");
						                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
						                			var firstPart="";
						          					var secondPart="";
						                			if (lastIndex > lastIndex2){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 4);
						                			}else if (lastIndex2 > lastIndex){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 5);
						                			}
						                			sqlText = firstPart + secondPart;
						                		}
						                	}
					                		if (wholeSortStr.length > 1){
					                			sqlText += " ORDER BY " + wholeSortStr;
					                		}		
					                		classroot.txt_qb_sql_ur_edit.setText(sqlText);
					                	</method>  
					                	<hinttip tipid="ENDUSERACCESS-msgquery-sort_remove" />                          
		                            </mdn_button>
		                        </view>
								<view height="10"/>
								<view name="view4">
									<simplelayout axis="x"/>
			                        <text datapath="gui:/gui-labels/lbl-group-on/@label" width="100" fgcolor="0xFFFFFF" />
			                        <hinttip tipid="ENDUSERACCESS-msgquery-sort_group" />
		                            <combobox datapath="qb_query_builder_user_reply:/root/query/query/@groupFieldName" name="groupCbx" width="250" editable="false" shownitems="8">
		                                <textlistitem datapath="qb_query_builder_user_reply:/root/query/query/field" text="$path{'@name'}" value="$path{'@id'}" />
		                                <method event="onselect">
					                		Debug.write(this.getText(), getValue());
					                		var groupFieldName = this.getText();
					                		var sqlText = classroot.txt_qb_sql_ur_edit.getText();
					                		var secondPart = "";
						                	if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_messageEdit._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("GROUP BY");
						                		var firstPart = "";
						                		if (firstIndex > 0){
						                			Debug.write("firstIndex of GROUP BY", firstIndex);
							                		var secondIndex= sqlText.indexOf(".", firstIndex);
						          					var thirdIndex= sqlText.indexOf(" ", secondIndex);
						          					Debug.write("firstIndex", firstIndex, "secondIndex", secondIndex, "thirdIndex", thirdIndex);
					                				firstPart = sqlText.substring(0, firstIndex-1);
					                				if (thirdIndex == -1)
					                					secondPart = ""
					                				else
					                					secondPart = sqlText.substring(thirdIndex);
						                			
						                			sqlText = firstPart;
						                		}else{
							                		firstIndex = sqlText.indexOf("ORDER BY");
							                		Debug.write("firstIndex of ORDER BY", firstIndex);
							                		if (firstIndex > 0){
							                			var lastIndex = sqlText.lastIndexOf("ASC");
							                			var lastIndex2 = sqlText.lastIndexOf("DESC");
							                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
							                			if (lastIndex > lastIndex2){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}else if (lastIndex2 > lastIndex){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}
							                			sqlText = firstPart;
							                		}					                		
						                		}
					                		}
					                		if (groupFieldName.length > 0){
					                			sqlText += " GROUP BY " + groupFieldName;
					                		}		
					                		Debug.write("secondPart", secondPart);	           
					                		if (secondPart.length > 0){
					                			sqlText += secondPart;
					                		}              
					                		classroot.txt_qb_sql_ur_edit.setText(sqlText);       
		                                </method>
		                            </combobox>
		                        </view>
		                </tabelement> 
                    </tabslider>                 
                    <view align="right">
				        <mdn_button datapath="gui:/gui-labels/btn-save/@label" width="50" y="2">
				            <method event="onclick">
					            <![CDATA[
					            var p = dbUserReply.getPointer();
					            p.selectChild(1);
					            var urId = p.p.getAttr('urId');
					            var viewID2 = p.p.getAttr('viewOrTableId');
					            var connIDConstants = p.p.getAttr('dbId');
					            var queryTypeName = p.p.getAttr('queryTypeName');
		                		
		                		var sorts = classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.view3.txtSortEditUrN.getText();
		                		var groupFieldName = classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.view4.groupCbx.getText();
		                		var groupFieldId = classroot.mainView.mainTabs.tabqbUrN.slider.sortTab.view4.groupCbx.getValue();
		                		var sqlString;
		                		
							   	if(queryTypeName == 'select') {
							   		sqlString = classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n._qb_controller.getSQL();
			                		if (groupFieldName.length > 0){
			                			sqlString += " GROUP BY " + groupFieldName;
			                		}
			                		if (sorts.length > 1){
			                			sqlString += " ORDER BY " + sorts;
			                		}
			                		Debug.write("groupFieldName: " + groupFieldName + " groupFieldId: " + groupFieldId);
								}else if(queryTypeName == 'update'){
									sqlString = classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n._qb_controller.getSQLForUpdate();
								}else if(queryTypeName == 'insert'){
									sqlString = classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n._qb_controller.getSQLForInsert();
								}
		                		saveState = "1";
		                		//classroot.mainView.queryTestTabs.tabpane1.pView.qb_sql_textEditUr_n.setAttribute("text", sqlString);
		                		
								var sqlText = classroot.txt_qb_sql_ur_edit.getText();
								if (sqlText == null || sqlText == "" || sqlText == undefined){
									sqlText = sqlString;
								}
		                        
		                		var allNodes = qb_query_builder_user_reply.getFirstChild();
								var rootNode = allNodes.getElementsByTagName("query")[0];
								var queryNode = rootNode.getElementsByTagName("query")[0];
								var viewID = queryNode.getAttr("viewOrTableID");
                		
				        		var valueOrConditions = [];
				        		var ids = [];
				        		var rows = [];
				        		var types = [];
				        		var useds = [];
				        		var indents = [];
				        		var parents = [];
				        		var numbers = [];
				        		var fields = [];
				        		var compIDs = [];	
				        		var comparisons = [];
				        		var values = [];
				        		var connections = [];
				        		var value2s = [];	// The second value field, 'value2'. It is only used and visible when
													//	dealing with the 'is between' and 'is not between' operators.					
				        		var groupings = [];
				        		var userInputSeqs = [];
				        		var userInputSeqs2 = [];
								
								var tableIndex = 0;
				        		
			               		rootNode = allNodes.getElementsByTagName("criteria")[0];											
				        		var numberNodes = rootNode.childNodes.length;
		                		for (var i = 0; i < numberNodes; i++){
									queryNode = rootNode.childNodes[i];
									var id = queryNode.getAttr("id");
				        			var row = queryNode.getAttr("row");
				        			var type = queryNode.getAttr("type");
				        			var used = queryNode.getAttr("used");
				        			var indent = queryNode.getAttr("indent");
					        		var valueOrCondition = queryNode.getAttr("valueOrCondition");
				        			var number = queryNode.getAttr("number");	
				        			var parent = queryNode.getAttr("parent");		        		
					        		var field = queryNode.getAttr("field");  			        		
					        		var compID = queryNode.getAttr("compID");
				        			var comparison = queryNode.getAttr("comparison");			        		
					        		var value = queryNode.getAttr("value");  			        		
					        		var connection = queryNode.getAttr("connection");
				        			var value2 = queryNode.getAttr("value2");			        		
					        		var grouping = queryNode.getAttr("grouping");
					        		var userInputSeq = queryNode.getAttr("valueUserInput");
					        		var userInputSeq2 = queryNode.getAttr("value2UserInput");
					        		
					        		ids[tableIndex] = id;
					        		rows[tableIndex] = row;
					        		types[tableIndex] = type;
									useds[tableIndex] = used;
									indents[tableIndex] = indent;
				        			valueOrConditions[tableIndex] = valueOrCondition;
				        			numbers[tableIndex] = number;
				        			parents[tableIndex] = parent;
				        			fields[tableIndex] = field;
				        			compIDs[tableIndex] = compID;	
					        		comparisons[tableIndex] = comparison;
					        		values[tableIndex] = value;
					        		connections[tableIndex] = connection;
					        		value2s[tableIndex] = value2;
					        		groupings[tableIndex] = grouping;
					        		userInputSeqs[tableIndex] = userInputSeq;
					        		userInputSeqs2[tableIndex] = userInputSeq2;
				        			
				        			tableIndex++;
				        		}		
								var params = new LzParam(); 
								params.addValue('action', 'saveUserReplyQuery', true);
								params.addValue('saveState', saveState, true);
								params.addValue('connID', connIDConstants, true);
								params.addValue('urId', urId, true);
								params.addValue('tableID', viewID2, true);
								params.addValue('queryType', queryTypeName, true);
								params.addValue('sqlText', sqlText, true);
								params.addValue('ids', ids, true);
								params.addValue('rows', rows, true);
								params.addValue('types', types, true);
								params.addValue('useds', useds, true);
								params.addValue('indents', indents, true);
								params.addValue('valueOrConditions', valueOrConditions, true);
								params.addValue('parents', parents, true);
								params.addValue('numbers', numbers, true);
								params.addValue('fields', fields, true);
								params.addValue('compIDs', compIDs, true);			
								params.addValue('comparisons', comparisons, true);
								params.addValue('values', values, true);
								params.addValue('connections', connections, true);
								params.addValue('value2s', value2s, true);
								params.addValue('groupings', groupings, true);
								params.addValue('sorts', sorts, true);
								params.addValue('groupFieldId', groupFieldId, true);
								params.addValue('userInputSeqs', userInputSeqs, true);
								params.addValue('userInputSeqs2', userInputSeqs2, true);
								params.addValue('projectId', classroot.maintab.currProjectId, true);								
								
								saveUserReply.setQueryString(params);
								saveUserReply.doRequest();
				        		]]>
				            </method>
				            <hinttip tipid="ENDUSERACCESS-msgquery-save-button" />
				        </mdn_button>
                    </view>
                </tabpane>
                <!-- Query Result -->
	               <tabpane datapath="gui:/gui-labels/tab-query-result/@label" name="tabpane2">
	                    <method event="onselect" reference="this.tab">
		               		var queryType = classroot.mainView.mainTabs.propsTabUrN.editQTUr.qTypeEditUrN.getText();
		               		if(queryType == 'select'){
		               			classroot.mainView.mainTabs.tabpane2.pView.setAttribute("visible", true);
		               			classroot.mainView.mainTabs.tabpane2.resultGridEditN.setAttribute("visible", true);
		               			classroot.mainView.mainTabs.tabpane2.noSelectText.setAttribute("visible", false);
		               		}else{//Insert/update
		               			classroot.mainView.mainTabs.tabpane2.pView.setAttribute("visible", false);
		               			classroot.mainView.mainTabs.tabpane2.resultGridEditN.setAttribute("visible", false);
		               			classroot.mainView.mainTabs.tabpane2.noSelectText.setAttribute("visible", true);		               		
		               		}
	               		</method>
		               <view width="620" height="51" name="pView" id="qResultViewAnimate4" y="160" bgcolor="0x4386cc">
		               		<animator attribute="y" name="startQuery" to="0" duration="1000" start="false"></animator>
			                <!-- Direct SQL Button -->
			                <view name="wholeUserInputView" x="5" y="5">
						        <view name="userInputView">
						            <text datapath="gui:/gui-labels/lbl-user-input/@label" name="labeltext" width="150" fgcolor="0xFFFFFF"></text>
						            <edittext name="txtUserInput" width="300" enabled="true" x="150"/>
						            <text name="userInputTxtN" datapath="gui:/gui-labels/lbl-query-result-userinput/@label" resize="true" x="0" y="22" fgcolor="0xFFFFFF" />
						        </view>	
			                </view>
			                <view x="470" y="5">
				                <mdn_button datapath="gui:/gui-labels/btn-test-direct-sql/@label">
				                	<method event="onclick">
				                		Debug.write("Direct SQL button clicked!");
							            
							            var sqlString = classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.bordertheedittext.qb_sql_textEditUr_n.getText();
							            var p3 = dbUserReply.getPointer();
							            p3.selectChild(1);
							            var connIDConstants = p3.p.getAttr('dbId');
							            var viewID = p3.p.getAttr('viewOrTableId');
							            var queryType = p3.p.getAttr('queryTypeValue');
							            
							            Debug.write("queryType in editing user reply direct sql", queryType);
							            
				                        var userInputTestValues = classroot.mainView.mainTabs.tabpane2.pView.wholeUserInputView.userInputView.txtUserInput.getText();
							            if(queryType == '1') {
							            	controller.getSelectQueryResultUrEdit(classroot.maintab.currProjectId, connIDConstants, viewID, sqlString, null, userInputTestValues);
				                        }else if (queryType == '2') {
							            	//controller.getUpdateQueryResultUrEdit(classroot.maintab.currProjectId, connIDConstants, sqlString, userInputTestValues);
				                        }else if (queryType == '3') {
							            	//controller.getInsertQueryResultUrEdit(classroot.maintab.currProjectId, connIDConstants, sqlString, userInputTestValues);
				                        }
				                        //var p2 = qb_query_result.getPointer();   
				                	</method>   
				                	<hinttip tipid="ENDUSERACCESS-msgquery-directsql-button" />             
				                </mdn_button>
				                
				                <!-- Save Query Button -->
				                <!-- 
				                <mdn_button datapath="gui:/gui-labels/btn-save-direct-sql/@label">
				                	<method event="onclick">
				                	<![CDATA[
				                        var sqlString = classroot.mainView.queryTestTabs.tabpane1.pView.qb_sql_textEditUr_n.getText();
					                	var allNodes = qb_query_builder_user_reply.getFirstChild();
										var rootNode = allNodes.getElementsByTagName("query")[0];
										var queryNode = rootNode.getElementsByTagName("query")[0];
							            var queryId = queryNode.getAttr('queryID');

							            var p = dbUserReply.getPointer();
							            p.selectChild(1);
							            var urId = p.p.getAttr('urId');
							            var viewID = p.p.getAttr('viewOrTableId');
							            var connIDConstants = p.p.getAttr('dbId');
							            							            
				                		saveState = "1";//DataObject.IN_DB
				                	
										var params = new LzParam(); 
										params.addValue('action', 'saveUserReplyQuery', true);
										params.addValue('saveState', '1', true);
										params.addValue('connID', connIDConstants, true);
										params.addValue('urId', urId, true);
										params.addValue('tableID', viewID, true);
										params.addValue('queryType', "select", true);
										params.addValue('sqlText', sqlString, true);
										params.addValue('ids', ids, true);
										params.addValue('rows', rows, true);
										params.addValue('types', types, true);
										params.addValue('useds', useds, true);
										params.addValue('indents', indents, true);
										params.addValue('valueOrConditions', valueOrConditions, true);
										params.addValue('parents', parents, true);
										params.addValue('numbers', numbers, true);
										params.addValue('fields', fields, true);
										params.addValue('compIDs', compIDs, true);			
										params.addValue('comparisons', comparisons, true);
										params.addValue('values', values, true);
										params.addValue('connections', connections, true);
										params.addValue('value2s', value2s, true);
										params.addValue('groupings', groupings, true);
										params.addValue('sorts', sorts, true);
										params.addValue('groupFieldId', groupFieldId, true);
										params.addValue('userInputSeqs', userInputSeqs, true);
										params.addValue('userInputSeqs2', userInputSeqs2, true);
										params.addValue('projectId', classroot.maintab.currProjectId, true);										
										
										saveUserReply.setQueryString(params);
										saveUserReply.doRequest();
				                	]]>
				                	</method>
				                	<hinttip tipid="ENDUSERACCESS-msgquery-save-button" />
				                </mdn_button>
				                 -->
			                </view>                    	
	                	</view>
		               <!-- 
		               <view>
			               <simplelayout axis="x" />
			               <text text="" width="860" />
					        <mdn_button datapath="gui:/gui-labels/btn-test-query/@label" width="70">
					            <method event="onclick">
						            var p = dbUserReply.getPointer();
						            p.selectChild(1);
						            var urId = p.p.getAttr('urId');
						            var viewID = p.p.getAttr('viewOrTableId');
						            var dbId = p.p.getAttr('dbId');
						            var queryType = p.p.getAttr('queryTypeValue');					            
						            
								   	if(queryType == '1') {
								   		var sqlString = classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n._qb_controller.getSQL();
										classroot.mainView.queryTestTabs.tabpane1.pView.qb_sql_textEditUr_n.setAttribute("text", sqlString);
				                        controller.getSelectQueryResult(classroot.maintab.currProjectId, dbId, viewID, sqlString);                
									}else if(queryType == '2'){
										var sqlString = classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n._qb_controller.getSQLForUpdate();
										classroot.mainView.queryTestTabs.tabpane1.pView.qb_sql_textEditUr_n.setAttribute("text", sqlString);
										controller.getUpdateQueryResult(classroot.maintab.currProjectId, dbId, sqlString);                						
									}else if(queryType == '3'){
										var sqlString = classroot.mainView.mainTabs.tabqbUrN.slider.criteriaTab.qb_query_builder_messageEditUr_n._qb_controller.getSQLForInsert();
					                    classroot.mainView.queryTestTabs.tabpane1.pView.qb_sql_textEditUr_n.setAttribute("text", sqlString);
					                    controller.getInsertQueryResult(classroot.maintab.currProjectId, dbId, sqlString);                
									}
					            </method>
					            <hinttip tipid="ENDUSERACCESS-msgquery-test-button" />
					        </mdn_button>
						</view> -->
					    <ftdynamicgrid name="resultGridEditN" datapath="qb_query_result_ur_edit:/root"
					                   contentdatapath="resultset/row"
					                   metadatapath="metadata/column"
					                   width="620" height="385" rowheight="20" visible="true" y="55" id="resultGridNAnimate4" opacity="0">
					                   <animator attribute="opacity" name="startQueryOpacity" to="1" duration="1000" start="false"></animator>
					    </ftdynamicgrid>
					    <text name="noSelectText" datapath="gui:/gui-labels/no-select-query/@label" fontstyle="bold" 
					    	visible="false" fgcolor="red" width="500" multiline="true"/>					    
	               </tabpane>
                <tabpane datapath="gui:/gui-labels/tab-message-builder/@label" name="tabmbN" >
	                <simplelayout axis="y" spacing="4"/>
          			<method event="onselect" reference="this.tab">
                    	if (this.tab.selected) {
							Debug.write("Selected Message Builder tab");							
							
							classroot.errorView.txtErrorMsgQEditUrN.setText("");
							classroot.mainView.queryTestTabs.setVisible(false);
							//classroot.mainView.msgTestTabs.setVisible(true);
							
				            var p = dbUserReply.getPointer();
				            p.selectChild(1);
				            var urId = p.p.getAttr('urId');
							
							/*var params = new LzParam();
							params.addValue('action', 'displayUserReplyMessagingInfo', true);
							params.addValue('urId', urId, true);
							dbUserReply2.setQueryString(params);
							dbUserReply2.doRequest();*/
							
			           	}
					</method>  
					<view name="view1">
						<simplelayout axis="y" />
						<text name="defaultResponseN" datapath="dbUserReply:/root/@defaultResponseFormat" visible="false"/>
						<text datapath="gui:/gui-labels/slider-response-format/@label" resize="true" fontstyle="bold" />
						<hinttip tipid="ENDUSERACCESS-msgquery-response-format" />
               			<scrolledittext name="responseFormatTxtAreaUrN" datapath="dbUserReply:/root/@responseFormat" width="614" height="370"
				            defaultfontname="Arial" 
				            defaultfontcolor="black"
				            border="1" >
               			</scrolledittext>
					</view>
					<view name="view2">
						<simplelayout axis="x"/>
						<text datapath="gui:/gui-labels/lbl-display-result-ur/@label" width="158"/>
						<hinttip tipid="ENDUSERACCESS-msgquery-msgdetails_results" />
						<edittext name="displayResultUrEditN" datapath="dbUserReply:/root/@displayResult" width="80" />
					</view>
	                <view align="right">
             			<simplelayout axis="x" spacing="5" />
					  	<mdn_button datapath="gui:/gui-labels/btn-default/@label">
					  		<method event="onclick">
								var defaultResponse = classroot.mainView.mainTabs.tabmbN.view1.defaultResponseN.getText();
								classroot.mainView.mainTabs.tabmbN.view1.responseFormatTxtAreaUrN.setAttribute('text', defaultResponse);
					  		</method>
					  	</mdn_button>	
					  	<mdn_button datapath="gui:/gui-labels/btn-restore/@label">
					  		<method event="onclick">
					            var p = dbUserReply.getPointer();
					            p.selectChild(1);
								var responseFormatInDb = p.p.getAttr('responseFormat');
								
								classroot.mainView.mainTabs.tabmbN.view1.responseFormatTxtAreaUrN.setAttribute('text', responseFormatInDb);
					  		</method>
					  	</mdn_button>								  		                					  	
					      <mdn_button datapath="gui:/gui-labels/btn-save/@label" ><!-- width="50" y="-20" -->
					          <method event="onclick">
					            var p = dbUserReply.getPointer();
					            p.selectChild(1);
					            var urId = p.p.getAttr('urId');
					          
					          	var response = classroot.mainView.mainTabs.tabmbN.view1.responseFormatTxtAreaUrN.getText();
					          	var rd = classroot.mainView.mainTabs.tabmbN.view2.displayResultUrEditN.getText();
					          
								var params = new LzParam(); 
								params.addValue('action', 'saveUrMsgInfo', true);
								params.addValue('saveState', '1', true);
								params.addValue('urId', urId);
								params.addValue('displayResult', rd);	
								params.addValue('projectId', classroot.maintab.currProjectId);								
								
					            params.addValue('responseFormat',response, true);   
					            			
								saveUserReply.setQueryString(params);
								saveUserReply.doRequest();
					          </method>
					      </mdn_button>
			        </view> 
                </tabpane>
                       
	               <!-- Message Result -->
	               <tabpane datapath="gui:/gui-labels/tab-message-result/@label" name="tabpane_result1">
			               <view name="msgHolderView4" id="msgHolderViewAnimation4" width="621" height="55" bgcolor="0x4386cc" y="160">
			               <animator attribute="y" name="startMessageTest" to="0" duration="1000" start="false"></animator>
								<view x="5" y="5">
								   	<text datapath="gui:/gui-labels/lbl-msg-result-userinput-ur/@label" id="userInputTxt4" width="590" fgcolor="0xFFFFFF" />
								   	<hinttip tipid="ENDUSERACCESS-msgquery-msgtest-enter" />
								</view>	
								<view name="view1" x="5" y="25">
									<simplelayout axis="x"  spacing="5"/>
					               	<edittext name="enterFormatMessageTxtUrN" text="" width="300"/>
					                <mdn_button datapath="gui:/gui-labels/btn-test-message/@label">
					                	<method event="onclick">
								            var p = dbUserReply.getPointer();
								            p.selectChild(1);
								            var urId = p.p.getAttr('urId');
	
					                		var enterFormatMessage = classroot.mainView.mainTabs.tabpane_result1.msgHolderView4.view1.enterFormatMessageTxtUrN.getText();
								          	var response = classroot.mainView.mainTabs.tabmbN.view1.responseFormatTxtAreaUrN.getText();
					                		var displayResult = classroot.mainView.mainTabs.tabmbN.view2.displayResultUrEditN.getText();
	
											var params = new LzParam();
											params.addValue('action', 'testURMessaginResult', true);
											params.addValue('urId', urId, true);
											
								            params.addValue('responseFormat',response, true);   
					                		params.addValue('displayResult', displayResult, true);
								            params.addValue('enterFormatMessage',enterFormatMessage);            
											params.addValue('projectId', classroot.maintab.currProjectId, true);
											
											saveUserReply.setQueryString(params);
											saveUserReply.doRequest();
											
											//Animate
											msgHolderViewAnimation4.startMessageTest.doStart();
											msgResultNAnimation4.startMessageTest.doStart();
											msgHolderViewAnimation4.setAttribute("bgcolor", 0xebf3fc);
											userInputTxt4.setAttribute("fgcolor", 0x454545);
					                	</method>
					                	<hinttip tipid="ENDUSERACCESS-msgquery-test-button" />
					                </mdn_button>
								</view>	
							</view>
	               			<scrolledittext name="msgResultEditUrN" id="msgResultNAnimation4" datapath="saveUserReply:/root/@replyMessaing" width="621" height="380"
					            defaultfontname="Arial" 
					            defaultfontcolor="black"
					            border="1" y="68" opacity="0">
						        	<animator attribute="opacity" name="startMessageTest" to="1" duration="1000" start="false"></animator>
	               			</scrolledittext>
	               </tabpane>
	           </tabs>	
	           
              </view>
        <view name="errorView" x="3" y="486">
            <text name="txtErrorMsgQEditUrN" text="" fgcolor="red" fontstyle="bold" resize="true"  width="600" height="60" multiline="true" />
        </view>
	    <!-- Deals with the query result. -->
	   	<datapointer xpath="qb_query_result_ur_edit:/root" rerunxpath="true"
	    ondata="processData();" onerror="canvas.showError(this);"
	    ontimeout="canvas.showTimeout();">
	    <method name="processData">
	        Debug.write("received qb_query_result_edit return data ");
	        var result = this.getNodeText();
	        var action = this.getNodeAttribute('action');
	        var errorMessage = this.getNodeAttribute('errorMessage');
	        var updateData = false;
	        Debug.write(" >>> result = " + result +" >>> action = " + action);
	        if (action == 'getUpdateQueryResult'){
	            classroot.mainView.mainTabs.tabpane2.resultGridEditN.setVisible(false);
	            if (result == 'OK'){
	                classroot.errorView.txtErrorMsgQEditUrN.setText('Update Query Successful: ' + errorMessage);
	                
	            } else {
	                classroot.errorView.txtErrorMsgQEditUrN.setText('Update Query Failed: ' + errorMessage);
	            }
			}else if(action == 'getInsertQueryResult'){
	            classroot.mainView.mainTabs.tabpane2.resultGridEditN.setVisible(false);
	            if (result == 'OK'){
	                classroot.errorView.txtErrorMsgQEditUrN.setText('Insert Query Successful: ' + errorMessage);
	            } else {
	                classroot.errorView.txtErrorMsgQEditUrN.setText('Insert Query Failed: ' + errorMessage);	
	            }
	        }else if (action == 'getEmptySelectQueryResult'){
		        classroot.errorView.txtErrorMsgQEditUrN.setText('');
	        }else {//if(action == 'getSelectQueryResult'){
	               if (result == 'NoData'){
	               		classroot.errorView.txtErrorMsgQEditUrN.setText('Select Query Result: No Data');
	               		classroot.mainView.mainTabs.tabpane2.resultGridEditN.setVisible(false);
	               }else if (result == 'Failed'){
	               		classroot.errorView.txtErrorMsgQEditUrN.setText('Select Query Failed: ' + errorMessage);
	               		classroot.mainView.mainTabs.tabpane2.resultGridEditN.setVisible(false);
	               }else{
	               		//Animate
						qResultViewAnimate4.startQuery.doStart();
						resultGridNAnimate4.startQueryOpacity.doStart();
						qResultViewAnimate4.setAttribute("bgcolor", 0xebf3fc);
						qResultViewAnimate4.wholeUserInputView.userInputView.labeltext.setAttribute("fgcolor", 0x454545);
						qResultViewAnimate4.wholeUserInputView.userInputView.userInputTxtN.setAttribute("fgcolor", 0x454545);
						//Animate End
		               classroot.errorView.txtErrorMsgQEditUrN.setText('Select Query Successful.');
		               classroot.mainView.mainTabs.tabpane2.resultGridEditN.setVisible(true);
		               
		               var initialLoad = classroot.getAttribute("initialLoadColumns");
		               if (initialLoad == true){
				       		classroot.setAttribute("initialLoadColumns", false);
				       }else{			       		
			               var viewChanged = classroot.getAttribute("viewChanged");
			               if (viewChanged == true){			               		
				               //Try to set the column name again
				               Debug.write("Try to set the column name again");
				               classroot.mainView.mainTabs.tabpane2.resultGridEditN.inferColumns();	
				               classroot.setAttribute("viewChanged", false);
			               }else{
								Debug.write("View is same, do not need to set the column name again");
			               }
				       }
		           }
	        }
	        
	    </method>
	   </datapointer>
	</class>	
	
   <datapointer xpath="saveUserReply:/root" rerunxpath="true"
    ondata="processData();" onerror="canvas.showError(this);"
    ontimeout="canvas.showTimeout();">
    <method name="processData">
	    <![CDATA[
	        var action = this.getNodeAttribute('action');
	        var result = this.getNodeAttribute('result');
	        var urId = this.getNodeAttribute('urId');  
    	    var projectId = this.getNodeAttribute('projectId');
		
		    if(action == 'addUserReply'){
	        	addUserReply.parentView.errorView.txtErrorMsgQUrN.setAttribute('text', result);
	            if (result == 'OK'){//If new user reply can be saved then open edit window
				   controller.navEndUserAccess(projectId);
				   editUserReply.clearData();
				   controller.displayUrPropsInfo(urId,projectId);
				}            
	        }
	        if(action == 'saveUrMsgInfo' || action == 'saveUserReplyQuery'){
	        	editUserReply.errorView.txtErrorMsgQEditUrN.setAttribute('text', result);
	        }
        ]]>
    </method>
   </datapointer>
   <datapointer xpath="db_save_ur:/root" rerunxpath="true"
    ondata="processData();" onerror="canvas.showError(this);"
    ontimeout="canvas.showTimeout();">
    <method name="processData">
	    <![CDATA[
	        var action = this.getNodeAttribute('action');
	        var result = this.getNodeAttribute('result');
	        var urId = this.getNodeAttribute('urId');  
	
	        if(action == 'saveUserReplyProps'){
	        	editUserReply.errorView.txtErrorMsgQEditUrN.setAttribute('text', result);
	        }
        ]]>
    </method>
   </datapointer>	

   <datapointer xpath="saveUserReply:/root" rerunxpath="true"
    ondata="processData();" onerror="canvas.showError(this);"
    ontimeout="canvas.showTimeout();">
    <method name="processData">
         var action = this.getNodeAttribute('action');
         var result = this.getNodeAttribute('result');
//		if(action == 'testURMessaginResult'){
			editUserReply.errorView.txtErrorMsgQEditUrN.setAttribute('text', result);
			addUserReply.parentView.errorView.txtErrorMsgQUrN.setAttribute('text', result);
	   </method>
   </datapointer>
   
   <datapointer xpath="dbUserReply:/root" rerunxpath="true"
    ondata="processData();" onerror="canvas.showError(this);"
    ontimeout="canvas.showTimeout();">
	    <method name="processData">
/*            var queryType = this.getNodeAttribute('queryTypeName');
            
			if(queryType != null){
				if( queryType == 'select'){
	               	editUserReply.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.setAttribute("visible", true);
	               	
                    msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setAttribute("visible", true);
					msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.notSelectQuery.setAttribute("visible", false);				                        	
					msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.setAttribute("visible", true);	               	
	            }else{
					msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.setAttribute("visible", false);
					
                    msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setAttribute("visible", false);
					msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.notSelectQuery.setAttribute("visible", true);				                        	
					msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.setAttribute("visible", false);	               										               					               	
	            }   
            }
*/
	   </method>
   </datapointer>   
</library>