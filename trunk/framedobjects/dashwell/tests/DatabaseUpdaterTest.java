package com.framedobjects.dashwell.tests;
/*
 * Unit Test class to test update sql scripts on DB development
 * before to run those scripts in production DB via DatabaseUpdaterCustomAction
 * with installerAnywhere
 * run this Unit test to make sure DB scripts will modify DB correctly
 */
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import wsl.fw.datasource.DefaultKeyGeneratorData;
import wsl.fw.datasource.Entity;
import wsl.fw.datasource.EntityImpl;
import wsl.fw.datasource.Field;
import wsl.fw.datasource.FieldImpl;
import wsl.installerCustom.DatabaseUpdaterCustomAction;
import wsl.mdn.dataview.GroupTablePermission;

public class DatabaseUpdaterTest {
	private static boolean isSuccess = true;
	private static String error = "";
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		/*
		 	User: root 
			Passowrd: firetrust 
			Host: 192.168.1.226 
			Port: 3306
			Database: etomite
		 */
		
		String developmentDatabaseDir = "C:/Documents and Settings/adele/workspace/MobileDataNow/resources/config/development/mdn.drby";
		//String productionDatabaseDir = "C:/Documents and Settings/adele/workspace/MobileDataNow/resources/config/production/mdn.drby";
		String dbDevConfigFile = "C:/Documents and Settings/adele/workspace/MobileDataNow/resources/config/development/wsl/config/mdn/dbInstallerInfo.conf";
		//String dbProConfigFile = "C:/Documents and Settings/adele/workspace/MobileDataNow/resources/config/production/wsl/config/mdn/dbInstallerInfo.conf";
		
		String driver = "org.apache.derby.jdbc.EmbeddedDriver" ;
		String url = "jdbc:derby:" + developmentDatabaseDir;

		
		/*........................................ SQL update scripts for Version 1 to 2 ........................................*/
		/* create new tabel in DB ENT_GROUP_ENTITY_PERMISSION */
		String createGroupTblPermSQL = "CREATE TABLE TBL_GROUP_ENTITY_PERMISSION ( " +
					 "FLD_ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 ,INCREMENT BY 1), " +
					 "FLD_GROUPID BIGINT NOT NULL, " +
					 "FLD_ENTITY_ID BIGINT NOT NULL )";
		String groupTblPermIndexSQL = "CREATE UNIQUE INDEX SQL071026165746491 ON TBL_GROUP_ENTITY_PERMISSION (FLD_ID ASC)";
		String groupTblPermIndexOnPkSQL = "ALTER TABLE TBL_GROUP_ENTITY_PERMISSION ADD CONSTRAINT SQL071026165746491 PRIMARY KEY (FLD_ID)";
		String groupTblPermNextKeySQL = "INSERT INTO TBL_NEXTKEY VALUES ('TBL_GROUP_ENTITY_PERMISSION',1)";
		
		/* Remove  FLD_CANADD, FLD_CANEDIT, FLD_CANDELETE columns */
		String dropCanAddColSQL = "ALTER TABLE TBL_GROUPDATAVIEW DROP COLUMN FLD_CANADD";
		String dropCanEditColSQL = "ALTER TABLE TBL_GROUPDATAVIEW DROP COLUMN FLD_CANEDIT";
		String dropCanDeleteColSQL = "ALTER TABLE TBL_GROUPDATAVIEW DROP COLUMN FLD_CANDELETE";
		
		/* create new tabel in DB TBL_WS_CRITERIA */
		String createWebServiceCriteriaTblSQL = "CREATE TABLE TBL_WS_CRITERIA ( " +
		 "FLD_ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 ,INCREMENT BY 1), " +
		 "FLD_QUERY_ID BIGINT NOT NULL, " +
		 "FLD_FIELD_NAME VARCHAR(200) NOT NULL "+
		 "FLD_FIELD_VALUE VARCHAR(200) NOT NULL )";
		String webServiceCriteriaTblIndexSQL = "CREATE UNIQUE INDEX SQL071026165746492 ON TBL_WS_CRITERIA (FLD_ID ASC)";
		String webServiceCriteriaTblIndexOnPkSQL = "ALTER TABLE TBL_WS_CRITERIA ADD CONSTRAINT SQL071026165746492 PRIMARY KEY (FLD_ID)";
		String webServiceCriteriaTblNextKeySQL = "INSERT INTO TBL_NEXTKEY VALUES ('TBL_WS_CRITERIA',1)";		
		/*.............................................................................................................................*/
		
		
		/*
		 TBL_GROUP_ENTITY_PERMISSION
	    Entity ent = new EntityImpl(ENT_GROUP_ENTITY_PERMISSION, GroupTablePermission.class);
	
	    // add the key generator for the system id
	    ent.addKeyGeneratorData(new DefaultKeyGeneratorData(ENT_GROUP_ENTITY_PERMISSION, FLD_ID));
	
	    // create the fields and add them to the entity
	    ent.addField(new FieldImpl(FLD_ID, Field.FT_INTEGER, Field.FF_UNIQUE_KEY | Field.FF_SYSTEM_KEY));
	    ent.addField(new FieldImpl(FLD_GROUPID, Field.FT_INTEGER, Field.FF_NONE));
	    ent.addField(new FieldImpl(FLD_ENTITY_ID, Field.FT_INTEGER, Field.FF_NONE)); 
		 */
		
//		String sql1 = "CREATE TABLE TBL_TEST1 ( FLD_ID BIGINT, FLD_NAME VARCHAR(56))";//for ver 1
//		String sql2 = "ALTER TABLE TBL_TEST1 ADD FLD_NEW_COL VARCHAR(56)";//for version 1 & 2
//		String sql3 = "INSERT INTO TBL_TEST VALUES(1, 'Default data', 'Default data for new column')";//for version 1 & 2
//		String sql2 = "UPDATE TBL_TEST SET FLD_NAME = 'Data from custom action' WHERE FLD_ID = 1 ";
//		String sql3 = "INSERT INTO TBL_TEST VALUES(1, 'default data just for version 3')";
//		String sql1 = "RENAME TABLE TBL_SMS_GATEWAY TO TBL_SMPP";//for ver 1
//		String sql2 = "ALTER TABLE TBL_SMPP RENAME COLUMN FLD_NPI TO FLD_SOURCE_NPI";
//		String sql3 = "ALTER TABLE TBL_SMPP RENAME COLUMN FLD_TON TO FLD_SOURCE_TON";
//		String sql4 = "ALTER TABLE TBL_SMPP ADD FLD_SOURCE_NPI VARCHAR(100)";
//		String sql5 = "ALTER TABLE TBL_SMPP ADD FLD_SOURCE_TON VARCHAR(100)";
//		String sql6 = "ALTER TABLE TBL_SMPP ADD FLD_BIND_TON VARCHAR(100)";
//		String sql7 = "ALTER TABLE TBL_SMPP MODIFY FLD_SOURCE_NPI VARCHAR(50)";
		
		/*
		 * All SQL Statements must be execute
		 */
		
		String currentVersion =null;
		try {
			Class.forName(driver);
			Connection con = DriverManager.getConnection(url, null, null);
			
			//String dbConfigFile = ip.substitute("$USER_INSTALL_DIR$$/$tomcat-5.5.25$/$webapps$/$dashwell.war$/$WEB-INF$/$classes$/$wsl$/$config$/$mdn$/$dbInstallerInfo.conf" );
			Properties props = new Properties();
			
			props.load(new FileInputStream(dbDevConfigFile));
			currentVersion = props.getProperty(DatabaseUpdaterCustomAction.CURR_DB_VER);//get current db version

			if(currentVersion != null && !currentVersion.equals("")){
				List sqlList = new ArrayList();

				if(currentVersion.equals("1")){
					sqlList.add(createGroupTblPermSQL);
					sqlList.add(groupTblPermIndexSQL);
					sqlList.add(groupTblPermIndexOnPkSQL);
					sqlList.add(groupTblPermNextKeySQL);
					
					sqlList.add(dropCanAddColSQL);
					sqlList.add(dropCanEditColSQL);
					sqlList.add(dropCanDeleteColSQL);
					
					sqlList.add(createWebServiceCriteriaTblSQL);
					sqlList.add(webServiceCriteriaTblIndexSQL);
					sqlList.add(webServiceCriteriaTblIndexOnPkSQL);
					sqlList.add(webServiceCriteriaTblNextKeySQL);					
					
					upgradeDb(con, sqlList);
					
					if(isSuccess){
						props.setProperty(DatabaseUpdaterCustomAction.CURR_DB_VER, "2");//set new version after modified the DB
						props.setProperty(DatabaseUpdaterCustomAction.MDN_VER, "2.0.0");//TODO: change to next version
						props.store(new FileOutputStream(dbDevConfigFile), "Upgrade MDN database from ver 1 to 2 Successfully");
					}else{
						props.setProperty(DatabaseUpdaterCustomAction.MDN_VER, "2.0.0");//TODO: change to next version
						props.store(new FileOutputStream(dbDevConfigFile), "Note: Some error occured while executing SQL statements; \n" + error);
					}
				}/*else if(currentVersion.equals("2")){
					sqlList.add(sql2);
					sqlList.add(sql3);
					
					upgradeDb(con, sqlList);
					
					props.setProperty(DatabaseUpdaterCustomAction.CURR_DB_VER, "3");
					//props.setProperty("preDbversion", "2");
					
					props.store(new FileOutputStream(dbConfigFile), "Upgrade MDN database from ver 2 to 3");
				}*/
			}
		} catch (ClassNotFoundException e1) {
			e1.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private static void upgradeDb(Connection con, List<String> sqlList){
		for(int i=0; i<sqlList.size(); i++){
			String sql = sqlList.get(i);
			try {
				PreparedStatement stm = con.prepareStatement(sql);
				stm.execute();
				System.out.println("Done Successfully : " + sql);
			} catch (SQLException e) {
				isSuccess = false; 
				error += " Faild[" + sql + "] , Because of ["+ e.getMessage() + "] \n";
				//break;//TODO (?) just cancel this statement(on other hand previuse sql script was executed)
				//e.printStackTrace();
			}		
		}
	}
	
	
	//TODO: MS Access
	/*	impleDateFormat dateFormat2 = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
		String date2 = dateFormat2.format(currentDate);
		System.out.println("current date ::::::::::: " + date2);
		//Timestamp ts2 = new Timestamp(currentDate.getTime());
		//System.out.println("current date as a timestamp :::::::::: " + ts2);
		String matchingStr = "["+Constants.DATE_TIME_FORMAT+"]";
		sql = sql.replace(matchingStr, "#"+date2+" AM#");
	*/
}
