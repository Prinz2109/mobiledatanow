<library>
	<include href="incubator/roundrectbutton.lzx" />
	<class name="condition" extends="listitem">
	
		<attribute name="isEnabled" value="true" type="boolean"/>
		<attribute name="isDisabled" value="false" type="boolean"/>
		<attribute name="parentQB"/>
		
		<simplelayout axis="x" spacing="2"/>
		
		<!-- Method is used to double-check consistency between view and data. This
				problem arises when a condition is deleted than all current view
				properties apply to the data of the condition which takes the same place. -->
  
		<method event="ondata">
			<![CDATA[
			//Debug.write("***************Condition Data changed: " + this.datapath.serialize());
			var type = this.datapath.p.getAttr("type");
			if (type == 'bracket'){
				//Debug.write("Need to add a bracket");
				_br_group.setAttribute("visible", true);
				_br_desc.setAttribute("visible", true);
			} else {
				_br_group.setAttribute("visible", false);
				_br_desc.setAttribute("visible", false);
				var op = this.datapath.p.getAttr("compID");
				switch (op){
					case 14:
					case 15:
						_val2.setAttribute("visible", true);
						_betw_op.setAttribute("visible", true);
						break;
					default:
						_val2.setAttribute("visible", false);
						_betw_op.setAttribute("visible", false);
				}
			}
			var used = this.datapath.p.getAttr("used");
			//Debug.write("used: " + used);
			var fieldName = this.datapath.p.getAttr("grouping");
			//Debug.write(fieldName + " enable: " + used);
			
			var stringOrBoolean = "string";
			if (used == true){
				//Debug.write("used is boolean true");
				stringOrBoolean = "boolean";
			}else if (used == false){
				//Debug.write("used is boolean false");
				stringOrBoolean = "boolean";
			}else if (used == "true" ){
				//Debug.write("used is string true");
				stringOrBoolean = "string";
			} else if (used == "false"){
				//Debug.write("used is string false");
				stringOrBoolean = "string";
			}
			
			if (false){
				//Debug.write("if false?????????????");
			}
			
			if (( stringOrBoolean == "string" && used == "true")  || (stringOrBoolean == "boolean" && used == true)) {
				//Debug.write("Enable condition");
				this.enable();
			} else {
				//Debug.write("Disable condition");
				this.disable();
			}
			]]>
		</method>
		
		<method event="onclick">
	    	this.parentQB._qb_controller.listVisibility();
	  	</method>
		
		<method name="enable">
			this.setAttribute("isEnabled", true);
	 		this.setAttribute("isDisabled", false);
	 		this.datapath.setNodeAttribute("used", true);
		</method>
		
		<method name="disable">
			this.setAttribute("isEnabled", false);
	 		this.setAttribute("isDisabled", true);
	 		this.datapath.setNodeAttribute("used", false);
		</method>
			
		<method name="toggleEnabled">
			if (this.isEnabled){
				this.disable();
			} else {
				this.enable();
			}
		</method>
		
	<!-- The checkbox to enable/disable this condition. -->
    <view valign="middle" width="25">
    	<checkbox align="right" value="true">
    		<method event="onclick">
	    		classroot.parentQB._qb_controller.listVisibility();
    			if (this.getValue()){
    				parent.parent.enable();
    				this.parent.parent.datapath.setNodeAttribute("used", true);
		    	} else {
		    		parent.parent.disable();
		    		this.parent.parent.datapath.setNodeAttribute("used", false);
		    	}
		    	parent.parent.select(parent);
		    	classroot.parentQB._qb_controller.updateSqlEditBox();
    		</method>
    		<state apply="${parent.parent.parent.isEnabled}">
				<attribute name="value" value="true"/>
			</state>
			<state apply="${parent.parent.parent.isDisabled}">
				<attribute name="value" value="false"/>
			</state>
    	</checkbox>
    </view>
    
    <view name="_indent" datapath="@indent" height="15" >
    	<method event="ondata">
    		//Debug.write("***************Condition Data changed _indent: " + this.datapath.serialize());
    		var thisValue = this.datapath.p.getAttr("indent");
    		this.setAttribute("width", thisValue * 20);
    	</method>
    </view>
    
    <!-- The numbering button. If the user clicks on it the actions floating 
    			list is displayed. -->
    <roundrectbutton name="_numbering" datapath="@number" height="15">
    
    	<method event="ondata">
    		//Debug.write("***************Condition Data changed _numbering: " + this.datapath.serialize());
    		var thisValue = this.datapath.p.getAttr("number") + "";
    		var thisLength = thisValue.length;
    		this.setAttribute("width", 15 + ((thisLength - 1) * 7));
    		//Debug.write("button text: " + thisValue + ", length: " + thisValue);
    	</method>
    	
    	<method event="onclick">
    		classroot.parentQB._qb_actions_list.completeInstantiation();
    		classroot.parentQB._qb_controller.listVisibility(classroot.parentQB._qb_actions_list);
    		classroot.parentQB._qb_actions_list.setAttachTarget(this);
    		classroot.parentQB._qb_actions_list.setVisible(true);
    		parent.parent.select(parent);
    	</method>
    </roundrectbutton>
    
    <!-- 'value/condition' field -->
	<text name="_br_valueOrCondition" datapath="@valueOrCondition" resize="true" fgcolor="blue" 
					selectable="false" visible="true">
    	<attribute name="isEnabled" value="true" type="boolean"/>
    
    	<state apply="${parent.parent.isEnabled}">
			<attribute name="fgcolor" value="blue"/>
			<attribute name="isEnabled" value="true"/>
		</state>
		<state apply="${parent.parent.isDisabled}">
			<attribute name="fgcolor" value="gray"/>
			<attribute name="isEnabled" value="false"/>
		</state>
    </text>
    <!-- Bracket only: 'grouping' field -->
	<text name="_br_group" datapath="@grouping" resize="true" fgcolor="blue" 
					selectable="true" visible="false">
    	<attribute name="isEnabled" value="true" type="boolean"/>
    
    	<state apply="${parent.parent.isEnabled}">
			<attribute name="fgcolor" value="blue"/>
			<attribute name="isEnabled" value="true"/>
		</state>
		<state apply="${parent.parent.isDisabled}">
			<attribute name="fgcolor" value="gray"/>
			<attribute name="isEnabled" value="false"/>
		</state>
    
    	<method event="onclick">
    		if (this.isEnabled){
    			//Debug.write("Display grouping floating list.");
    			classroot.parentQB._qb_controller.listVisibility();
				classroot.parentQB._qb_grouping_list.completeInstantiation();
				classroot.parentQB._qb_grouping_list.setAttachTarget(this);
				classroot.parentQB._qb_grouping_list.setAttribute("isGlobal", false);
	    		classroot.parentQB._qb_grouping_list.setVisible(true);
		    }
    	</method>
    </text>
    
    <!-- Bracket only: 'description' field -->
    <text name="_br_desc" text="of the following apply" resize="true" fgcolor="black" 
					selectable="false" visible="false">
    	<attribute name="isEnabled" value="true" type="boolean"/>
    
    	<state apply="${parent.parent.isEnabled}">
			<attribute name="fgcolor" value="black"/>
			<attribute name="isEnabled" value="true"/>
		</state>
		<state apply="${parent.parent.isDisabled}">
			<attribute name="fgcolor" value="gray"/>
			<attribute name="isEnabled" value="false"/>
		</state>
    
    </text>
    
    <!-- The 'views' field. If the user clicks on it the views floating list is
    			displayed. Any selection done will update the 'view' field as well
    			as the dataset. -->
    <text name="_field" datapath="@field" resize="true" fgcolor="red" selectable="true" >
    	<attribute name="isEnabled" value="true" type="boolean"/>
    
    	<state apply="${parent.parent.isEnabled}">
			<attribute name="fgcolor" value="red"/>
			<attribute name="isEnabled" value="true"/>
		</state>
		<state apply="${parent.parent.isDisabled}">
			<attribute name="fgcolor" value="gray"/>
			<attribute name="isEnabled" value="false"/>
		</state>
    
    	<method event="onclick">
    		if (this.isEnabled){
    			classroot.parentQB._qb_views_list.completeInstantiation();
    			classroot.parentQB._qb_controller.listVisibility(classroot.parentQB._qb_views_list);
	    		classroot.parentQB._qb_views_list.setAttachTarget(this);
	    		classroot.parentQB._qb_views_list.setVisible(true);
	    		parent.parent.select(parent);
	    	}
    	</method>
    </text>
    
   	<!-- The 'comparison' field. If the user clicks on it the comparison
   			floating lsit is displayed. Any selection updates this view as well
   			as the underlying dataset. -->
	<text name="_comp" datapath="@comparison" resize="true" fgcolor="green" selectable="true" >
		<attribute name="isEnabled" value="true" type="boolean"/>
		
		<state apply="${parent.parent.isEnabled}">
			<attribute name="fgcolor" value="green"/>
			<attribute name="isEnabled" value="true"/>
		</state>
		<state apply="${parent.parent.isDisabled}">
			<attribute name="fgcolor" value="gray"/>
			<attribute name="isEnabled" value="false"/>
		</state>
		
		<method event="onclick">
    		if (this.isEnabled){
    			classroot.parentQB._qb_comp_list.completeInstantiation();
    			classroot.parentQB._qb_controller.listVisibility(classroot.parentQB._qb_comp_list);
	    		classroot.parentQB._qb_comp_list.setAttachTarget(this);
	    		classroot.parentQB._qb_comp_list.setVisible(true);
	    		parent.parent.select(parent);
	    	}
    		//this.datapath.deleteNode();
    	</method>
   	</text>
    
   	<!-- The 'value' field. On a mouse click the value floating list is displayed
   			with the options of what action has to be performed. -->
	<text name="_val" datapath="@value" resize="true" fgcolor="blue" selectable="true">
		<attribute name="isEnabled" value="true" type="boolean"/>
		
		<state apply="${parent.parent.isEnabled}">
			<attribute name="fgcolor" value="blue"/>
			<attribute name="isEnabled" value="true"/>
		</state>
		<state apply="${parent.parent.isDisabled}">
			<attribute name="fgcolor" value="gray"/>
			<attribute name="isEnabled" value="false"/>
		</state>
		
		<method event="onclick">
    		if (this.isEnabled){
    			classroot.parentQB._qb_value_list.completeInstantiation();
    			classroot.parentQB._qb_controller.listVisibility(classroot.parentQB._qb_value_list);
	    		classroot.parentQB._qb_value_list.setAttachTarget(this);
	    		classroot.parentQB._qb_value_list.setVisible(true);
	    		parent.parent.select(parent);
	    	}
    	</method>
	</text>
	
	<!-- The default 'and' operator for the 'in between' and 'not is between'
			modes. -->	
	<text name="_betw_op" text="and" fgcolor="black" visible="false" selectable="false">
		<attribute name="isEnabled" value="true" type="boolean"/>
		
		<state apply="${parent.parent.isEnabled}">
			<attribute name="fgcolor" value="black"/>
			<attribute name="isEnabled" value="true"/>
		</state>
		<state apply="${parent.parent.isDisabled}">
			<attribute name="fgcolor" value="gray"/>
			<attribute name="isEnabled" value="false"/>
		</state>
	</text>
		
	<!-- The second value field, 'value2'. It is only used and visible when
				dealing with the 'is between' and 'is not between' operators. -->
	<text name="_val2" datapath="@value2" resize="true" fgcolor="blue" 
				visible="false" selectable="true">
		<attribute name="isEnabled" value="true" type="boolean"/>
		
		<state apply="${parent.parent.isEnabled}">
			<attribute name="fgcolor" value="blue"/>
			<attribute name="isEnabled" value="true"/>
		</state>
		<state apply="${parent.parent.isDisabled}">
			<attribute name="fgcolor" value="gray"/>
			<attribute name="isEnabled" value="false"/>
		</state>
		
		<method event="onclick">
    		if (this.isEnabled){
    			classroot.parentQB._qb_value_list.completeInstantiation();
    			classroot.parentQB._qb_controller.listVisibility(classroot.parentQB._qb_value_list);
	    		classroot.parentQB._qb_value_list.setAttachTarget(this);
	    		classroot.parentQB._qb_value_list.setVisible(true);
	    		parent.parent.select(parent);
	    	}
    	</method>
	</text>
		
	<!-- The 'connection' field. Only used in the 'and/or' mode. -->
	<text name="_conn" datapath="@connection" resize="true" fgcolor="red" 
				selectable="false" visible="false">
		<attribute name="isEnabled" value="true" type="boolean"/>
		<state apply="${parent.parent.isEnabled}">
			<attribute name="fgcolor" value="red"/>
			<attribute name="isEnabled" value="true"/>
		</state>
		<state apply="${parent.parent.isDisabled}">
			<attribute name="fgcolor" value="gray"/>
			<attribute name="isEnabled" value="false"/>
		</state>
	</text>
		

  </class>
</library>
