<library>
	<class name="qbcontroller" >
		<attribute name="parentQueryBuilder"/>
		<attribute name="qbcontrollerDataset"/>
		<method event="onqbcontrollerDataset">
			var allRootNode = this.qbcontrollerDataset.getFirstChild();
			Debug.write("inside qbconttroller --- allRootNode", allRootNode);
		</method>
		<method name="listVisibility" args="visibleList">
			<![CDATA[
			//Debug.write("***************qbcontroller listVisibility********************" );
			if (this.parentQueryBuilder._qb_grouping_list != visibleList && this.parentQueryBuilder._qb_grouping_list.visible){
				this.parentQueryBuilder._qb_grouping_list.setAttribute("visible", false);
			} 
			if (this.parentQueryBuilder._qb_actions_list != visibleList && this.parentQueryBuilder._qb_actions_list.visible){
				this.parentQueryBuilder._qb_actions_list.setAttribute("visible", false);
			} 
			if (this.parentQueryBuilder._qb_views_list != visibleList && this.parentQueryBuilder._qb_views_list.visible){
				this.parentQueryBuilder._qb_views_list.setAttribute("visible", false);
			}
			if (this.parentQueryBuilder._qb_subviews_list != visibleList && this.parentQueryBuilder._qb_subviews_list.visible){
				this.parentQueryBuilder._qb_subviews_list.setAttribute("visible", false);
			}
			if (this.parentQueryBuilder._qb_comp_list != visibleList && this.parentQueryBuilder._qb_comp_list.visible){
				this.parentQueryBuilder._qb_comp_list.setAttribute("visible", false);
			}
			if (this.parentQueryBuilder._qb_value_list != visibleList && this.parentQueryBuilder._qb_value_list.visible){
				this.parentQueryBuilder._qb_value_list.setAttribute("visible", false);
			}
			]]>
		</method>
		
		<method name="addCondition" args="currQueryNode,isValue">
			<![CDATA[
			Debug.write("***************qbcontroller addCondition********************" );
			// Get the first available view to set a default.
			var allRootNode = this.qbcontrollerDataset.getFirstChild();
			var rootNode = allRootNode.getElementsByTagName("view")[0];			
			//var rootNode = qb_views.getFirstChild();
			var numberNodes = rootNode.childNodes.length;
			var viewNode = null;
			var parentViewName = null;
			for (var i = 0; i < numberNodes; i++){
				viewNode = rootNode.childNodes[i];				
				if (viewNode.hasChildNodes()){
					parentViewName = viewNode.getAttr("field");
					viewNode = viewNode.getFirstChild();
					break;
				} else {
					break;
				}
			}
			var viewName = viewNode.getAttr("field");
			Debug.write("*******************parentViewName is: " + parentViewName);
			if (parentViewName != null && parentViewName != "" && parentViewName != "undefined"){//&& parentViewName != viewName
				//if (viewName.indexOf("[") > 0 && viewName.indexOf("]") > 0){
					viewName = parentViewName + "." + viewName;
				//}else{
				//	viewName = "[" + parentViewName + "].[" + viewName + "]";
				//}
				Debug.write("parentViewName", parentViewName, "viewName is: " + viewName);
			}else{
				/*if (viewName.indexOf("[") > 0 && viewName.indexOf("]") > 0){
					//do nothing
				}else{
					viewName = "[" + viewName + "]";
				}*/
			}
			
			// Get the first available comparison (id and value) to set a default.
			//rootNode = qb_comps.getFirstChild();
			//var compsNode = qb_query_builder.getFirstChild();
			rootNode = allRootNode.getElementsByTagName("comps")[0];
			var compNodeArray = rootNode.getElementsByTagName("comp");
			var compNode = compNodeArray[0];
			if (compNode == undefined){
				var compNodeID = "1";
				var compNodeName = "is equal to";			
			}else{
				var compNodeID = compNode.getAttr("value");
				var compNodeName = compNode.getAttr("name");
			}
			var valueOrCondition = isValue?"value":"condition";
			
			
			// Figure out whether we have to simply append the new node or insert it.
			var doAppend = false;
			if (currQueryNode != null){
				//Debug.write("currQueryNode: " + currQueryNode.serialize());
				// Set the datapointer to the correct node.
				var nextQueryNode = currQueryNode.p.getNextSibling();
				if (nextQueryNode != null){
					//Debug.write("nextQueryNode: " + nextQueryNode.serialize());
					var newNode = this.getNewQueryNode(valueOrCondition);
					this.datapath.p.insertBefore(newNode, nextQueryNode);
				} else {
					doAppend = true;
				}
				
			} else {
				doAppend = true;
			}
			//Debug.write("doAppend", doAppend);
			if (doAppend){
				//var newNode = this.datapath.addNodeFromPointer(this.getNewQueryNode());
				var newNode = this.datapath.addNode("node", "", 
								{	used:true,
									indent:0,
									type:"query",
									valueOrCondition:valueOrCondition,
									parent:"",
									number:0,
									field:viewName, 
									compID:compNodeID, 
									comparison:compNodeName, 
									value:"_____", 
									connection:"and", 
									value2:"_____"});
				//Debug.write("New Node is: " + newNode);
			}
			
			this.updateNumbering();
			//Debug.write("parent: " + parent);
			this.parentQueryBuilder.condition.datapath.setOrder("@valueOrCondition","descending");
			//Debug.write(this.parentQueryBuilder.update);
			
			//change number
			/*var dp = canvas.datasets.qb_query.getPointer();
			dp.selectChild();
			var nodecount = dp.getNodeCount();
			dp.selectChild();
			//Debug.write("wen",dp.getNodeCount());
			for(var i=0;i<nodecount;i++){
			    //dp.setNodeAttribute("number",i+2);
			    Debug.write(i+1);
			    dp.selectNext();
			}*/
			
			//parent.removeItem("50");
			
			// Add the new request row after two seconds.
			//this.timerNewRequest = new LzDelegate(this, "addNewRequest");
			//LzTimer.addTimer(this.timerNewRequest, 500);
			updateSqlEditBox();	
			]]>
		</method>
		
		<method name="updateSqlEditBox">
			var sqlString;
			if (this.parentQueryBuilder.update==true){
				sqlString = getSQLForUpdate();
			}else if (this.parentQueryBuilder.insertQuery==true){
				sqlString = getSQLForInsert();
			}else {
				sqlString = getSQL();
			}
			Debug.write("updateSqlEditBox getSQL()", sqlString);
			this.parentQueryBuilder.sqlEditBox.setAttribute("text", sqlString);			
		</method>
		
		<method name="addBracket" args="currQueryNode">
			<![CDATA[
			//Debug.write("***************qbcontroller Trying adding a bracket********************" );
			//Debug.write("parent: " + this.parent);
			var doAppend = false;
			var newNode = null;
			if (currQueryNode != null){
				//Debug.write("currQueryNode: " + currQueryNode.serialize());
				var indent = currQueryNode.p.getAttr("indent");
				var parent = currQueryNode.p.getAttr("parent");
				// Set the datapointer to the correct node.
				var nextQueryNode = currQueryNode.p.getNextSibling();
				if (nextQueryNode != null){
					//Debug.write("nextQueryNode: " + nextQueryNode.serialize());
					newNode = new LzDataElement("node", 
								{	used:true,
									indent:indent,
									type:"bracket",
									parent:parent,
									number:0,
									grouping:"all"});
					this.datapath.p.insertBefore(newNode, nextQueryNode);
				} else {
					doAppend = true;
				}
				
			} else {
				doAppend = true;
			}
			
			if (doAppend){
				newNode = this.datapath.addNode("node", "", 
								{	used:true,
									type:"bracket",
									indent:indent,
									parent:parent,
									number:0,
									grouping:"all"});
				//Debug.write("New Node is: " + newNode);
			}
			
			this.updateNumbering();
			
			this.addCondition(newNode);
			]]>
		</method>
		
		<!-- Supposed to be a private method. Builds a new blank query node. -->
		<method name="getNewQueryNode" args="valueOrCondition">
			// Get the first available view to set a default.
			<![CDATA[
			Debug.write("***************qbcontroller getNewQueryNode********************" );
			//var rootNode = qb_views.getFirstChild();
			var allRootNode = this.qbcontrollerDataset.getFirstChild();
			var rootNode = allRootNode.getElementsByTagName("view")[0];	
			var numberNodes = rootNode.childNodes.length;
			var viewNode = null;
			var parentViewName = null;
			for (var i = 0; i < numberNodes; i++){
				viewNode = rootNode.childNodes[i];
				parentViewName = viewNode.getAttr("field");
				if (viewNode.hasChildNodes()){
					viewNode = viewNode.getFirstChild();
					break;
				} else {
					break;
				}
			}
			
			var viewName = viewNode.getAttr("field");
			Debug.write("*******************parentViewName is: " + parentViewName);
			if (parentViewName != "" && parentViewName != viewName){
				//if (viewName.indexOf("[") > 0 && viewName.indexOf("]") > 0){
					viewName = parentViewName + "." + viewName;
				//}else{
				//	viewName = "[" + parentViewName + "].[" + viewName + "]";
				//}
				Debug.write("parentViewName", parentViewName, "viewName is: " + viewName);
			}else{
				/*if (viewName.indexOf("[") > 0 && viewName.indexOf("]") > 0){
					//do nothing
				}else{
					viewName = "[" + viewName + "]";
				}*/
			}

			
			// Get the first available comparison (id and value) to set a default.
			//rootNode = qb_comps.getFirstChild();
			var compsNode = this.qbcontrollerDataset.getFirstChild();
			rootNode = compsNode.getElementsByTagName("comps")[0];			
			var compNodeArray = rootNode.getElementsByTagName("comp");
			var compNode = compNodeArray[0];
			var compNodeID = compNode.getAttr("value");
			var compNodeName = compNode.getAttr("name");
			
			// Now build the default blank node and return it.
			return new LzDataElement("node", 
								{	used:true,
									indent:0,
									type:"query",
									valueOrCondition:valueOrCondition,
									parent:"",
									number:0,
									field:viewName, 
									compID:compNodeID, 
									comparison:compNodeName, 
									value:"_____", 
									connection:"and", 
									value2:"_____"});
			]]>
		</method>
		
		<method name="addNewRequest">
			//Debug.write("***************qbcontroller addNewRequest********************" );
			parent.addNewRequest();
		</method>
		
		<!-- Method updates the numbering of each condition. -->
		<method name="updateNumbering">
			<![CDATA[
				//Debug.write("***************qbcontroller updateNumbering********************" );
				//var rootNode = qb_query.getFirstChild();
				var allRootNode = this.qbcontrollerDataset.getFirstChild();
				var rootNode = allRootNode.getElementsByTagName("criteria")[0];
				var numberNodes = rootNode.childNodes.length;
				var queryNode = null;
				var indent = 0;
				for (var i = 0; i < numberNodes; i++){
					queryNode = rootNode.childNodes[i];
					indent = queryNode.getAttr("indent");
					//Debug.write("indent = " + indent);
					if (indent == 0){
						queryNode.setAttr("number", i+1);
					}
				}
			]]>
		</method>
		
		<!-- Displays the SQL 'translation'. This is based on the selected mode. 
					Currently we support the grouping mode.-->
		<method name="getSQL" >
			<![CDATA[
			var sql = "";
			//var rootNode = qb_query.getFirstChild();
			var allRootNode = this.qbcontrollerDataset.getFirstChild();
			var rootNode = allRootNode.getElementsByTagName("criteria")[0];
			var queryNode = null;
			var row = 0;
			var used = false;
			var type = null;
			var number = 0;
			var field = null;
			var compID = 0;
			var comparison = null;
			var value = null;
			
			//Reset QueryBuilder List Width
			projectTabs.querybuilder_maxwidth = 0;
			projectTabs.querybuilder_maxwidth_sub = 0;
						
			//var fieldNodesArray = viewNode.getElementsByTagName("field");
			/*var p = dbView.getPointer();
			p.selectChild(2);
			Debug.write(p);
			//Debug.write('***************dbView: ' + p);
			var nodename = p.getNodeName();
			Debug.write('***************nodename: ' + nodename);
			var viewName = p.p.getAttr('name');
			Debug.write('***************dbView: ' + viewName);
			var sourceTables = p.p.getAttr('sourceTables');
			*/
			var queryRootNode = allRootNode.getElementsByTagName("query")[0];
			var viewNode = queryRootNode.getElementsByTagName("query")[0];
			var viewName = viewNode.getAttr('name');
			var sourceTables = viewNode.getAttr('sourceTables');
			var sourceTablesArray = [];
			var startPos = 0;
			var currCommaPos = sourceTables.indexOf(",", startPos);
			while (currCommaPos > 0){
				var currTableName = sourceTables.substring(startPos, currCommaPos);
				sourceTablesArray[sourceTablesArray.length] = currTableName;
				startPos = currCommaPos+1;
				currCommaPos = sourceTables.indexOf(",", startPos);
			}
			sourceTablesArray[sourceTablesArray.length] = sourceTables.substring(startPos, sourceTables.length);
			
			/*Debug.write('***************sourceTablesArray: [' + sourceTablesArray[0] + "]", "sourceTables", sourceTables);
			var displayNum = 0;
			while (sourceTablesArray.length > displayNum ){
				Debug.write('***************sourceTablesArray: [' + sourceTablesArray[displayNum] + "]", "sourceTables", sourceTables);
				displayNum++;
			}*/
			//Debug.write('***************dbView: ' + viewName, "sourceTables", sourceTables);
			
			var condition = "??";
			switch (parent._qb_grouping_value){
				case 1:
					condition = "AND";
					break;
				case 2:
				case 3:
					condition = "OR";
					break;
				case 4:
					condition = "AND";
					break;
			}
		 	var numberNodes = rootNode.childNodes.length;
			var userInputSeq = 0;
			var lastQueryNode = null;
			var fromTableName = null;
			var fromTableNames = [];
			
			for (var i = 0; i < numberNodes; i++){
				queryNode = rootNode.childNodes[i];
				used = queryNode.getAttr("used"); 
				if (!used){
					continue;
				} else {
					type = queryNode.getAttr("type");
					if (type == "bracket"){
						//Debug.write("Dealing with a bracket. Skip at the moment");
						continue;
					}
					if (i > 0 && i < numberNodes){
						if (sql != ""){
							sql = sql + condition + " ";
						}
					}
				}
				if (lastQueryNode != null){
					var lastQueryNodeSeq2 = lastQueryNode.getAttr("value2UserInput");
					var lastQueryNodeSeq = lastQueryNode.getAttr("valueUserInput");
					//Debug.write("..............lastQueryNodeSeq: " + lastQueryNodeSeq);
				
					if (lastQueryNodeSeq2 != null && lastQueryNodeSeq2 != 'undefined'){
						userInputSeq = lastQueryNodeSeq2;
					}else if (lastQueryNodeSeq != null && lastQueryNodeSeq != 'undefined'){
						userInputSeq = lastQueryNodeSeq;
					}				
				}
				
				var wholeField = queryNode.getAttr("field");
				var currPos = wholeField.indexOf(".", 0);
   				if (currPos > 0){
   					
   					var displayNum = 0;
   					
					while (sourceTablesArray.length > displayNum ){
						var currSourceTable = sourceTablesArray[displayNum];
						currPos = wholeField.indexOf(currSourceTable+".", 0);
						Debug.write("wholeField", wholeField, "currSourceTable", currSourceTable);
						projectTabs.querybuilder_text_test.setText(currSourceTable);
						if (currPos > -1){
							fromTableName = currSourceTable;
						}else{
							if (currSourceTable.indexOf(" ")>0){
								currPos = wholeField.indexOf("["+currSourceTable+"].", 0);
								if (currPos > -1){
									fromTableName = "["+currSourceTable + "]";
								}
							}
						}
						displayNum++;
					} 					
   					 
   					Debug.write("from table name: " + fromTableName);
   					var included = false;
   					//Debug.write("from table names length: " + fromTableNames.length);  					
   					for (var j = 0; j < fromTableNames.length; j++){
   						var currTable = fromTableNames[j];
   						if (currTable == fromTableName){
   							included = true;
   						}
   					}
   					if (included == false){
   						//Debug.write("ADD from table name: " + fromTableName);
   						fromTableNames[fromTableNames.length] = fromTableName;
   					}
   				}
				
				//Get field type, if it is String, use '', otherwise, do not use
				//var ok = p.selectChild();
				//Debug.write(p);
				var currentField = null;
				var fieldType = "String";
				var currentFieldNode = null;
				var fieldNodeNum = viewNode.childNodes.length;
				for (var j = 0; j < fieldNodeNum; j++){
					currentFieldNode = viewNode.childNodes[j];
					currentField = currentFieldNode.getAttr("name");
					//Debug.write("$$$$$$$$$$$$$$$$$$$$ MEH ", currentField);
					projectTabs.querybuilder_subtext_test.setText(currentField);
					//Debug.write("Current field is: " + currentField);
					//var currentFieldWithTableName = tableName + "." + currentField;
					//Debug.write("wholeField is: " + wholeField);
					if (wholeField == currentField){
						fieldType = currentFieldNode.getAttr("type");
						//Debug.write("Current field '" + currentField+ "' type is: " + fieldType);
					}
					//ok = p.selectNext();
				}
				//ok = p.selectParent();				
				
				//Debug.write("..............userInputSeq: " + userInputSeq);
				var thisRow = getSQLCondition(queryNode, userInputSeq, fieldType);
				lastQueryNode = queryNode;
				
				sql = sql + thisRow + " ";
			}
			// Need to check whether we deal with the 'grouping' value of NONE.
			if (parent._qb_grouping_value == 3 || parent._qb_grouping_value == 4){
				sql = "NOT (" + sql + ")";
			}
			// Add the WHERE clause.
			var selectFromSql = "";
			//Debug.write("from table names: " + fromTableNames);
			//Debug.write("from table names length: " + fromTableNames.length);
			for (var m = 0; m < fromTableNames.length; m++){
   				var currTableName = fromTableNames[m];
   				selectFromSql = selectFromSql + currTableName + ",";
   				//Debug.write("***ADD from table name: " + currTableName);
   			}
			selectFromSql = selectFromSql.substring(0, selectFromSql.length-1);
			//Debug.write("selectFromSql", selectFromSql);
			if (sql.length > 0)
				sql = "SELECT * FROM " + selectFromSql + " WHERE " + sql;
			else
				sql = "SELECT * FROM " + sourceTables;
			return sql;
			]]>
		</method>
		
		<!-- Supposed to be a private method.
			 Displays the SQL 'translation'. This is based on the selected mode. 
			 Currently we support the grouping mode.-->		
		<method name="getSQLCondition" args="queryNode, userInputSeq, fieldType">
			<![CDATA[
				var row = 0;
				var used = false;
				var type = null;
				var number = 0;
				var field = null;
				var compID = 0;
				var comparison = null;
				var value = null;
				var value2 = null;
				var valueUserInputSeq = null;
				var value2UserInputSeq = null;
				
				row = queryNode.getAttr("row");
				number = queryNode.getAttr("number");
				field = queryNode.getAttr("field");
				compID = queryNode.getAttr("compID");
				comparison = queryNode.getAttr("comparison");
				value = queryNode.getAttr("value");
				value2 = queryNode.getAttr("value2");
				valueUserInputSeq = queryNode.getAttr("valueUserInput");
				value2UserInputSeq = queryNode.getAttr("value2UserInput");
				
				if (value == '[UserInput]'){
					userInputSeq++;
					queryNode.setAttr("valueUserInput", userInputSeq);
					//Debug.write("..............queryNode.setAttr: " + queryNode.getAttr("valueUserInput"));
					value = '[UserInput'+ userInputSeq + ']';
				}
				else{
					//reset to undefined
					queryNode.setAttr("valueUserInput", "undefined");
				}
				
				if (value2 == '[UserInput]'){
					userInputSeq++;
					queryNode.setAttr("value2UserInput", userInputSeq);
					value2 = '[UserInput'+ userInputSeq + ']';
				}
				else{
					//reset to undefined
					queryNode.setAttr("value2UserInput", "undefined");
				}
				
				if (value == '_____'){
					value = "";
				}
				// Deal with the pattern cases for the values.
				switch (compID){
					case 10: 	// starts with.
					case 11:  // does not start with.
						value = value + '%';
						break;
					case 12: 	// contains.
					case 13: 	// does not contain.
						value = '%' + value + '%';
				}
				// Deal with the IS NULL case.
				var thisRow = null;
				if (compID == 7){
					thisRow = "( " + field + "  " + this.getComparison(compID) + ")";
				} else {
					// Need to cater for BETWEEN and NOT BETWEEN.
					if (compID == 8 || compID == 9){
						
						var valArray = value.split(",");
						if (fieldType == "String" ||  fieldType == "DateTime"){
							var tempVal = valArray.join("','");
							value = "('" + tempVal + "')";
						}else{
							var tempVal = valArray.join(",");
							value = "(" + tempVal + ")";							
						}
						thisRow = "( " + field + "  " + this.getComparison(compID) + " " + value + ")";
					} else if (compID == 14 || compID == 15){
						if (value2 == '_____'){
							value2 = "";
						}
						if (fieldType == "String" ||  fieldType == "DateTime"){
							thisRow = "( " + field + "  " + this.getComparison(compID) + " '" + value + "' AND '" + value2 + "')";
						}else{
							thisRow = "( " + field + "  " + this.getComparison(compID) + "  " + value + "  AND  " + value2 + " )";
						}
					} else {
						if (fieldType == "String" ||  fieldType == "DateTime"){
							thisRow = "( " + field + "  " + this.getComparison(compID) + " '" + value + "')";
						}else{
							thisRow = "( " + field + "  " + this.getComparison(compID) + "  " + value + " )";
						}
					}
				}
				switch (compID){
					case 9:	 // is not in list.
					case 11: // does not start with.
					case 13: // does not contain.
						thisRow = '(NOT' + thisRow + ')';
						break;
				}			
				
				return thisRow;
					
			]]>
		</method>

		<!-- Displays the SQL 'translation'. This is based on the selected mode. 
					Currently we support the grouping mode.-->
<!-- 		
		<method name="getSQLwithUserInputs" args="userInputs">
			<![CDATA[
			var sql = "";
			//var rootNode = qb_query.getFirstChild();
			var allRootNode = this.qbcontrollerDataset.getFirstChild();
			var rootNode = allRootNode.getElementsByTagName("criteria")[0];			
			var queryNode = null;
			var row = 0;
			var used = false;
			var type = null;
			var number = 0;
			var field = null;
			var compID = 0;
			var comparison = null;
			var value = null;
			
			/*var p = dbView.getPointer();
			p.selectChild(2);
			Debug.write(p);
			//Debug.write('***************dbView: ' + p);
			var nodename = p.getNodeName();
			Debug.write('***************nodename: ' + nodename);
			var viewName = p.p.getAttr('name');
			Debug.write('***************dbView: ' + viewName);
			var sourceTables = p.p.getAttr('sourceTables');
			*/
			var queryRootNode = allRootNode.getElementsByTagName("query")[0];
			var viewNode = queryRootNode.getElementsByTagName("query")[0];
			var viewName = viewNode.getAttr('name');
			var sourceTables = viewNode.getAttr('sourceTables');
			//Debug.write('***************dbView: ' + viewName, "sourceTables", sourceTables);
						
			var condition = "??";
			switch (parent._qb_grouping_value){
				case 1:
					condition = "AND";
					break;
				case 2:
				case 3:
					condition = "OR";
					break;
				case 4:
					condition = "AND";
					break;
			}
		 	var numberNodes = rootNode.childNodes.length;
			var userInputSeq = 0;
			var lastQueryNode = null;
			var fromTableName = null;
			var fromTableNames = [];
			for (var i = 0; i < numberNodes; i++){
				queryNode = rootNode.childNodes[i];
				used = queryNode.getAttr("used"); 
				if (!used){
					continue;
				} else {
					type = queryNode.getAttr("type");
					if (type == "bracket"){
						//Debug.write("Dealing with a bracket. Skip at the moment");
						continue;
					}
					if (i > 0 && i < numberNodes){
						if (sql != ""){
							sql = sql + condition + " ";
						}
					}
				}
				if (lastQueryNode != null){
					var lastQueryNodeSeq2 = lastQueryNode.getAttr("value2UserInput");
					var lastQueryNodeSeq = lastQueryNode.getAttr("valueUserInput");
					//Debug.write("..............lastQueryNodeSeq: " + lastQueryNodeSeq);
				
					if (lastQueryNodeSeq2 != null && lastQueryNodeSeq2 != 'undefined'){
						userInputSeq = lastQueryNodeSeq2;
					}else if (lastQueryNodeSeq != null && lastQueryNodeSeq != 'undefined'){
						userInputSeq = lastQueryNodeSeq;
					}				
				}
				
				var wholeField = queryNode.getAttr("field");
				var currPos = wholeField.indexOf(".", 0);
   				if (currPos > 0){
   					fromTableName = wholeField.substring(0, currPos);
   					//Debug.write("from table name: " + fromTableName);
   					var included = false;
   					//Debug.write("from table names length: " + fromTableNames.length);  					
   					for (var j = 0; j < fromTableNames.length; j++){
   						var currTable = fromTableNames[j];
   						if (currTable == fromTableName){
   							included = true;
   						}
   					}
   					if (included == false){
   						//Debug.write("ADD from table name: " + fromTableName);
   						fromTableNames[fromTableNames.length] = fromTableName;
   					}
   				}
				
				//Get field type, if it is String, use '', otherwise, do not use
				//var ok = p.selectChild();
				//Debug.write(p);
				var currentField = null;
				var fieldType = "String";
				var currentFieldNode = null;
				var fieldNodeNum = viewNode.childNodes.length;
				for (var j = 0; j < fieldNodeNum; j++){
					currentFieldNode = viewNode.childNodes[j];
								
					currentField = currentFieldNode.getAttr('name');
					//Debug.write("Current field is: " + currentField);
					//var currentFieldWithTableName = tableName + "." + currentField;
					//Debug.write("wholeField is: " + wholeField);
					if (wholeField == currentField){
						fieldType = currentFieldNode.getAttr('type');
						//Debug.write("Current field '" + currentField+ "' type is: " + fieldType);
					}
					//ok = p.selectNext();
				}
				//ok = p.selectParent();				
				
				//Debug.write("..............userInputSeq: " + userInputSeq);
				var thisRow = getSQLConditionWithUserInputs(queryNode, userInputSeq, fieldType, userInputs[userInputSeq-1]);
				
				lastQueryNode = queryNode;
				
				sql = sql + thisRow + " ";
			}
			// Need to check whether we deal with the 'grouping' value of NONE.
			if (parent._qb_grouping_value == 3 || parent._qb_grouping_value == 4){
				sql = "NOT (" + sql + ")";
			}
			// Add the WHERE clause.
			var selectFromSql = "";
			//Debug.write("from table names: " + fromTableNames);
			//Debug.write("from table names length: " + fromTableNames.length);
			for (var m = 0; m < fromTableNames.length; m++){
   				var currTableName = fromTableNames[m];
   				selectFromSql = selectFromSql + currTableName + ",";
   				//Debug.write("***ADD from table name: " + currTableName);
   			}
			selectFromSql = selectFromSql.substring(0, selectFromSql.length-1);
			if (sql.length > 0)
				sql = "SELECT * FROM " + selectFromSql + " WHERE " + sql;
			else
				sql = "SELECT * FROM " + sourceTables;
			return sql;
			]]>
		</method>
 -->		
		<!-- Supposed to be a private method.
			 Displays the SQL 'translation'. This is based on the selected mode. 
			 Currently we support the grouping mode.-->		
		<method name="getSQLConditionWithUserInputs" args="queryNode, userInputSeq, fieldType, userInput">
			<![CDATA[
				var row = 0;
				var used = false;
				var type = null;
				var number = 0;
				var field = null;
				var compID = 0;
				var comparison = null;
				var value = null;
				var value2 = null;
				var valueUserInputSeq = null;
				var value2UserInputSeq = null;
				
				row = queryNode.getAttr("row");
				number = queryNode.getAttr("number");
				field = queryNode.getAttr("field");
				compID = queryNode.getAttr("compID");
				comparison = queryNode.getAttr("comparison");
				value = queryNode.getAttr("value");
				value2 = queryNode.getAttr("value2");
				valueUserInputSeq = queryNode.getAttr("valueUserInput");
				value2UserInputSeq = queryNode.getAttr("value2UserInput");
				
				if (value == '[UserInput]'){
					userInputSeq++;
					queryNode.setAttr("valueUserInput", userInputSeq);
					//Debug.write("..............queryNode.setAttr: " + queryNode.getAttr("valueUserInput"));
					//value = '[UserInput'+ userInputSeq + ']';
					value = userInput;
				}
				else{
					//reset to undefined
					queryNode.setAttr("valueUserInput", "undefined");
				}
				
				if (value2 == '[UserInput]'){
					userInputSeq++;
					queryNode.setAttr("value2UserInput", userInputSeq);
					//value2 = '[UserInput'+ userInputSeq + ']';
					value2 = userInput;
				}
				else{
					//reset to undefined
					queryNode.setAttr("value2UserInput", "undefined");
				}
				
				if (value == '_____'){
					value = "";
				}
				// Deal with the pattern cases for the values.
				switch (compID){
					case 10: 	// starts with.
					case 11:  // does not start with.
						value = value + '%';
						break;
					case 12: 	// contains.
					case 13: 	// does not contain.
						value = '%' + value + '%';
				}
				// Deal with the IS NULL case.
				var thisRow = null;
				if (compID == 7){
					thisRow = "( " + field + "  " + this.getComparison(compID) + ")";
				} else {
					// Need to cater for BETWEEN and NOT BETWEEN.
					if (compID == 8 || compID == 9){
						var valArray = value.split(",");
						var tempVal = valArray.join("','");
						value = "('" + tempVal + "')";
						thisRow = "( " + field + "  " + this.getComparison(compID) + " " + value + ")";
					} else if (compID == 14 || compID == 15){
						if (value2 == '_____'){
							value2 = "";
						}
						if (fieldType == "String" ||  fieldType == "DateTime"){
							thisRow = "( " + field + "  " + this.getComparison(compID) + " '" + value + "' AND '" + value2 + "')";
						}else{
							thisRow = "( " + field + "  " + this.getComparison(compID) + "  " + value + "  AND  " + value2 + " )";
						}
					} else {
						if (fieldType == "String" ||  fieldType == "DateTime"){
							thisRow = "( " + field + "  " + this.getComparison(compID) + " '" + value + "')";
						}else{
							thisRow = "( " + field + "  " + this.getComparison(compID) + "  " + value + " )";
						}
					}
				}
				switch (compID){
					case 9:	 // is not in list.
					case 11: // does not start with.
					case 13: // does not contain.
						thisRow = '(NOT' + thisRow + ')';
						break;
				}			
				
				return thisRow;
					
			]]>
		</method>

		<!-- Displays the SQL 'translation'. This is based on the insert mode. 
			 Currently we support the grouping mode.-->
		<method name="getSQLForInsert">
			<![CDATA[
			var sql = "";
			//var rootNode = qb_query.getFirstChild();
			var allRootNode = this.qbcontrollerDataset.getFirstChild();
			var queryRootNode = allRootNode.getElementsByTagName("query")[0];
			var tableNode = queryRootNode.getElementsByTagName("query")[0];
									
			/*var p = dbTable.getPointer();
			p.selectChild(2);
			Debug.write(p);
			//Debug.write('***************dbTable: ' + p);
			var nodename = p.getNodeName();
			Debug.write('***************nodename: ' + nodename);
			var tableName = p.p.getAttr('name');
			Debug.write('***************dbTable: ' + tableName);
			*/
			var tableName = tableNode.getAttr("viewOrTableName");
			
			var queryNode = null;
			var row = 0;
			var used = false;
			var type = null;
			var number = 0;
			var field = null;
			var compID = 0;
			var comparison = null;
			var value = null;
			
			var fields = "(";
			var values = "(";
			
			var rootNode = allRootNode.getElementsByTagName("criteria")[0];
		 	var numberNodes = rootNode.childNodes.length;
			var userInputSeq = 0;
			var lastQueryNode = null;
			for (var i = 0; i < numberNodes; i++){
				queryNode = rootNode.childNodes[i];
				used = queryNode.getAttr("used"); 
				if (!used){
					continue;
				} 

				if (lastQueryNode != null){
					var lastQueryNodeSeq = lastQueryNode.getAttr("valueUserInput");
					//Debug.write("..............lastQueryNodeSeq: " + lastQueryNodeSeq);
				
					if (lastQueryNodeSeq != null && lastQueryNodeSeq != 'undefined'){
						userInputSeq = lastQueryNodeSeq;
					}				
				}
				
				row = queryNode.getAttr("row");
				number = queryNode.getAttr("number");
				field = queryNode.getAttr("field");
				compID = queryNode.getAttr("compID");
				comparison = queryNode.getAttr("comparison");
				value = queryNode.getAttr("value");
				if (value == '_____'){
					value = "";
				}

				if (value == '[UserInput]'){
					var newUserInputSeq = userInputSeq + 1;
					queryNode.setAttr("valueUserInput", newUserInputSeq);
					//Debug.write("..............queryNode.setAttr: " + queryNode.getAttr("valueUserInput"));
					value = '[UserInput'+ newUserInputSeq + ']';
				}
				else{
					//reset to undefined
					queryNode.setAttr("valueUserInput", "undefined");
				}
				
				// Deal with the IS NULL case.
				var thisRow = null;
				
				//var ok = p.selectChild();
				//Debug.write(p);
				var currentField = null;
				var fieldType = "String";
				var currentFieldNode = null;
				var fieldNodeNum = tableNode.childNodes.length;
				for (var j = 0; j < fieldNodeNum; j++){
					currentFieldNode = tableNode.childNodes[j];
								
					currentField = currentFieldNode.getAttr('name');
					//Debug.write("Current field is: " + currentField);
					//var currentFieldWithTableName = tableName + "." + currentField;
					if (field == currentField){
						fieldType = currentFieldNode.getAttr('type');
						//Debug.write("Current field '" + currentField+ "' type is: " + fieldType);
					}
					//ok = p.selectNext();
				}
				//ok = p.selectParent();

				fields = fields + "  " + field + " , ";
				if (fieldType == "String" ||  fieldType == "DateTime"){
					values = values + " '" + value + "', ";
				}else{
					values = values + "  " + value + " , ";
				}
				lastQueryNode = queryNode;
			}
			fields = fields.substring(0, fields.length - 2);
			values = values.substring(0, values.length - 2);
			fields += ") ";
			values += ") ";
			//Debug.write("fields: " + fields);
			//Debug.write("values: " + values);			
			
			//sql = "INSERT INTO [" + tableName + "] " + fields + " VALUES " + values;
			sql = "INSERT INTO " + tableName + " " + fields + " VALUES " + values;
			
			return sql;
			]]>
		</method>

		<!-- Displays the SQL 'translation'. This is based on the update mode. 
					Currently we support the grouping mode.-->
		<method name="getSQLForUpdate">
			<![CDATA[
			var sql = "";
			var sqlValue="";
			var sqlWhere=""
			//var rootNode = qb_query.getFirstChild();
			var allRootNode = this.qbcontrollerDataset.getFirstChild();
			var queryRootNode = allRootNode.getElementsByTagName("query")[0];
			var tableNode = queryRootNode.getElementsByTagName("query")[0];
			
						
			/*var p = dbTable.getPointer();
			p.selectChild(2);
			Debug.write("***************dbView: " + p);
			var nodename = p.getNodeName();
			Debug.write("***************nodename: " + nodename);
			var tableName = p.p.getAttr('name');
			Debug.write("***************tableName: " + tableName);
			*/
			var tableName = tableNode.getAttr("viewOrTableName");
			
			var queryNode = null;
			var row = 0;
			var used = false;
			var type = null;
			var number = 0;
			var field = null;
			var compID = 0;
			var comparison = null;
			var value = null;
			var valueOrCondition = null;
			var condition = "??";
			
			switch (parent._qb_grouping_value){
				case 1:
					condition = "AND";
					break;
				case 2:
				case 3:
					condition = "OR";
					break;
				case 4:
					condition = "AND";
					break;
			}
				
			var rootNode = allRootNode.getElementsByTagName("criteria")[0];		
		 	var numberNodes = rootNode.childNodes.length;
			var userInputSeq = 0;
			var lastQueryNode = null;		 	
			for (var i = 0; i < numberNodes; i++){
				queryNode = rootNode.childNodes[i];
				used = queryNode.getAttr("used"); 
				
				valueOrCondition = queryNode.getAttr("valueOrCondition");
				//Debug.write("valueOrCondition: " + valueOrCondition);
				row = queryNode.getAttr("row");
				number = queryNode.getAttr("number");
				field = queryNode.getAttr("field");
				compID = queryNode.getAttr("compID");
				comparison = queryNode.getAttr("comparison");
				value = queryNode.getAttr("value");
				if (value == '_____'){
					value = "";
				}
				
				if (!used){
					continue;
				} else {
					type = queryNode.getAttr("type");
					if (type == "bracket"){
						//Debug.write("Dealing with a bracket. Skip at the moment");
						continue;
					}
					if (i > 0 && i < numberNodes){
						if (valueOrCondition == "condition"){
							if (sqlWhere != ""){
								sqlWhere = sqlWhere + condition + " ";
							}
						}
					}
				}
				
				// Get user input sequence
				if (lastQueryNode != null){
					var lastQueryNodeSeq2 = lastQueryNode.getAttr("value2UserInput");
					var lastQueryNodeSeq = lastQueryNode.getAttr("valueUserInput");
					//Debug.write("..............lastQueryNodeSeq: " + lastQueryNodeSeq);
				
					if (lastQueryNodeSeq2 != null && lastQueryNodeSeq2 != 'undefined'){
						userInputSeq = lastQueryNodeSeq2;
					}else if (lastQueryNodeSeq != null && lastQueryNodeSeq != 'undefined'){
						userInputSeq = lastQueryNodeSeq;
					}				
				}


				// Deal with the IS NULL case.
				var thisRow = null;
				
				//Get Field Type
				//var ok = p.selectChild();
				//Debug.write(p);
				var currentField = null;
				var fieldType = "String";
				var currentFieldNode = null;
				var fieldNodeNum = tableNode.childNodes.length;
				for (var j = 0; j < fieldNodeNum; j++){
					currentFieldNode = tableNode.childNodes[j];
								
					currentField = currentFieldNode.getAttr('name');
					//Debug.write("Current field is: " + currentField);
					//var currentFieldWithTableName = tableName + "." + currentField;
					if (field == currentField){
						fieldType = currentFieldNode.getAttr('type');
						//Debug.write("Current field '" + currentField+ "' type is: " + fieldType);
					}
					//ok = p.selectNext();
				}
				//ok = p.selectParent();
				
				if (valueOrCondition == "value"){
					if (value == '[UserInput]'){
						var newUserInputSeq = userInputSeq + 1;
						queryNode.setAttr("valueUserInput", newUserInputSeq);
						//Debug.write("..............queryNode.setAttr: " + queryNode.getAttr("valueUserInput"));
						value = '[UserInput'+ newUserInputSeq + ']';
					}
					else{
						//reset to undefined
						queryNode.setAttr("valueUserInput", "undefined");
					}					
					
					if (fieldType == "String" ||  fieldType == "DateTime"){
						thisRow = "  " + field + "  = " + " '" + value + "', ";
					}else{
						thisRow = "  " + field + "  = " + "  " + value + " , ";
					}				
					sqlValue = sqlValue + thisRow ;
				}
				else{
					thisRow = getSQLCondition(queryNode, userInputSeq, fieldType);
					sqlWhere = sqlWhere + thisRow + " ";
				}
				
				lastQueryNode = queryNode;
			}
			// Need to check whether we deal with the 'grouping' value of NONE.
			if (parent._qb_grouping_value == 3 || parent._qb_grouping_value == 4){
				sqlWhere = "NOT (" + sqlWhere + ")";
			}			
			sqlValue = sqlValue.substring(0, sqlValue.length - 2);
			
			//Debug.write("sqlValue: " + sqlValue);
			//Debug.write("sqlWhere: " + sqlWhere);
			
			sql = "UPDATE " + tableName + " SET" + sqlValue;

			if (sqlWhere.length > 0)
				sql = sql + " WHERE " + sqlWhere;
				
			return sql;
			]]>
		</method>
		
		<method name="getComparison" args="compID">
			<![CDATA[
			var comp = "?";
			switch (compID){
				case 1:
					comp = "=";
					break;
				case 2:
					comp = "<>";
					break;
				case 3:
					comp = "<";
					break;
				case 4:
					comp = "<=";
					break;
				case 5:
					comp = ">";
					break;
				case 6:
					comp = ">=";
					break;
				case 7:
					comp = "IS NULL";
					break;
				case 8:   // is in list.
				case 9:   // is not in list.
					comp = "IN";
					break;
				case 10:	// starts with.
				case 11:  // does not start with.
				case 12:  // contains.
				case 13:  // does not contain.
					comp = "LIKE";
					break;
				case 14:	// between.
					comp = "BETWEEN";
					break;
				case 15:	// is not between.
					comp = "NOT BETWEEN";
					break;
			}
			return comp;
			]]>
		</method>
		
	</class>
</library>
