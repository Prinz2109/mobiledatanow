<library>
    <!-- SL:08/31/2006 resources for menuarrow class -->
	<include href="lz/menu.lzx"/>
	
	<class name="querybuilder" extends="list" dataoption="pooling">
		
		<!-- Naming convention: all global attributes start with '_qb_'. -->
		<attribute name="_qb_inputControl" />
		<attribute name="_qb_calendarControl" />
		<attribute name="_qb_booleanControl" />
		
		<attribute name="_qb_mode" type="boolean" value="true" />
		<attribute name="_qb_grouping_value" type="number" value="1" />
		<attribute name="_qb_controller"/>
		<attribute name="_qb_grouping_list"/>
		<attribute name="_qb_actions_list"/>
		<attribute name="_qb_views_list"/>
		<attribute name="_qb_subviews_list"/>
		<attribute name="_qb_comp_list"/>
		<attribute name="_qb_value_list"/>
		
		
		<!-- update or not -->
		<attribute name="update" value="false" type="boolean"/>
		<!-- insert or not -->
		<attribute name="insertQuery" type="boolean" value="false"/>
		
		<attribute name="sqlEditBox"/>
		
		<method event="oninit">
      		this.setAttribute("_qb_controller", this.qb_controller_name);
      		this.setAttribute("_qb_grouping_list", this.qb_grouping_list_name);
      		this.setAttribute("_qb_actions_list", this.qb_actions_list_name);
      		this.setAttribute("_qb_views_list", this.qb_views_list_name);
      		this.setAttribute("_qb_subviews_list", this.qb_subviews_list_name);
      		this.setAttribute("_qb_comp_list", this.qb_comp_list_name);
      		this.setAttribute("_qb_value_list", this.qb_value_list_name);
      		this.setAttribute("insertQuery", false);
      		//Debug.write("qbcontrollerDatapath",this.qbcontrollerDatapath);
      		//Debug.write("conditionDatapath",this.conditionDatapath);
    	</method>
    	
    	<attribute name="qbDatapath"/>
		<method event="onqbDatapath">
    		// datapath="qb_query_builder:/root/criteria" 
    		this.qb_controller_name.setAttribute("datapath", this.qbDatapath + "root/criteria");
    		//datapath="qb_query_builder:/root/criteria/node"
    		this.condition.setAttribute("datapath", this.qbDatapath + "root/criteria/node");
    		//datapath="qb_query_builder:/root/comps/group"
    		//this.qb_grouping_list_name.txtGroup.setAttribute("datapath", this.qbDatapath + "root/comps/group");
    		//this.qb_grouping_list_name.setAttribute("groupingListDatapath", this.qbDatapath);
    		//datapath="qb_query_builder:/root/comps/action"
    		//this.qb_actions_list_name.txtAction.setAttribute("datapath", this.qbDatapath + "root/comps/action");
    		//datapath="qb_query_builder:/root/view"
    		this.qb_views_list_name.setAttribute("datapath", this.qbDatapath + "root/view");
    		//datapath="qb_query_builder:/root/comps/comp/"
    		//this.qb_comp_list_name.txtComp.setAttribute("datapath", this.qbDatapath + "root/comps/comp/");
    		//datapath="qb_query_builder:/root/comps/value/@name"
    		this.qb_value_list_name.txtCompsValue.setAttribute("datapath", this.qbDatapath + "root/comps/value/@name");
    		//setGroupingDatapath
    		this.groupExplain.setAttribute("groupingDatapath", this.qbDatapath);
    	</method>
    	
    	<attribute name="qbDataset"/>
    	<method event="onqbDataset">
    		Debug.write("qbDataset", qbDataset);
    		this.qb_controller_name.setAttribute("qbcontrollerDataset", this.qbDataset);
    	</method>
    	
    	<!-- <attribute name="qbcontrollerDatapath"/>
		<attribute name="conditionDatapath"/> -->
		<!-- 
    	<method event="onqbcontrollerDatapath">
    		Debug.write("onqbcontrollerDatapath: qbcontrollerDatapath",this.qbcontrollerDatapath);
    		this.qb_controller_name.setAttribute("datapath", this.qbcontrollerDatapath);
    	</method>		

    	<method event="onconditionDatapath">
    		Debug.write("onconditionDatapath: conditionDatapath",this.conditionDatapath);
    		this.condition.setAttribute("datapath", this.conditionDatapath);
    	</method>	
		 -->
		 
		<qbcontroller name="qb_controller_name" parentQueryBuilder="${classroot}" ><!-- datapath="qb_query_builder:/root/criteria" -->
			<method event="oninit">
	      		classroot.setAttribute("_qb_controller", this);
	      		//this.setAttribute("datapath", classroot.qbcontrollerDatapath);
	      		/*classroot.setAttribute("_qb_grouping_list", classroot.qb_grouping_list_name);
	      		classroot.setAttribute("_qb_actions_list", classroot.qb_actions_list_name);
	      		classroot.setAttribute("_qb_views_list", classroot.qb_views_list_name);
	      		classroot.setAttribute("_qb_subviews_list", classroot.qb_subviews_list_name);
	      		classroot.setAttribute("_qb_comp_list", classroot.qb_comp_list_name);
	      		classroot.setAttribute("_qb_value_list", classroot.qb_value_list_name);*/
	    	</method>
		</qbcontroller>
		<!-- id="qb_controller" -->
		
		<method event="onclick">
	    	this._qb_controller.listVisibility();
	  	</method>
	  
	  	<method name="addNewRequest">
			//Debug.write("***************addNewRequest********************" );
			var newRequ = new requestnew(this);
			newRequ.setAttribute("value", 50);
		</method>
		
		<simplelayout axis="y" spacing="2"/>
<!--		
<view name="inittime" bgcolor="white" visible="true" >
    <method event="oninit" reference="canvas">
        var d = new LzDelegate( mytext , "tellTime" );
        LzIdle.callOnIdle( d );
        this.bringToFront();
    </method>
    <text id="mytext" resize="true">
        <method name="tellTime" args="t">
            this.setText( "Time taken: " + t );
        </method>
    </text>
</view>		
-->
		<grouping name="groupExplain" value="0"/>
		
		<requestnew value="50" parentQueryBuilder="${classroot}"/>
		
		<condition name="condition"  value="$path{'@row'}" parentQB="${classroot}">
			<method event="oninit"><!-- datapath="qb_query_builder:/root/criteria/node" -->
	      		//this.setAttribute("datapath", classroot.conditionDatapath);
	    	</method>
		    <!-- <datapath xpath="qb_query_builder:/root/criteria/node/@number">
		        <handler name="onclones">
		            var lastClone = clones[clones.length - 1];
		            if (!this['del']) {
		                this.del = new LzDelegate(this,"replicationDone");
		                this.del.register(lastClone, "ondata");
		            }
		        </handler>
		        <method name="replicationDone">
		            Debug.write("********************* CONDITION Replication Done!");
		        </method>
		    </datapath>	 -->	
	    </condition>
		
				
		<!-- Grouping list -->
		<floatinglist name="qb_grouping_list_name" visible="false" width="100" initstage="defer"><!-- id="qb_grouping_list"  -->
			<attribute name="trackgroup" type="string" value="track_qb_grouping_list"/>
			<attribute name="isGlobal" type="boolean"/>
			<attribute name="selectedList"/>
			<attribute name="groupingListDatapath"/>
			<method event="ongroupingListDatapath">
				this.txtGroup.setAttribute("datapath", this.groupingListDatapath + "root/comps/group");
			</method>
			<method event="oninit">
	      		//Debug.write("***************qb_grouping_list oninit********************" );
	      		LzTrack.register(this, this.trackgroup);
	      		classroot.setAttribute("_qb_grouping_list", this);
	      		//this.setAttribute('selectedList', this.lstAll);
	    	</method>
		    <method event="onmousetrackout">
		    	//Debug.write("***************qb_grouping_list onmousetrackout********************" );
		    	this.setAttribute("visible", false);
		    </method>
		    <method event="onvisible">
		    	//Debug.write("***************qb_grouping_list onvisible********************" );
		    	if (this.getAttribute("visible") == true){
		    		LzTrack.activate('track_qb_grouping_list');
		    	} else {
		    		LzTrack.deactivate('track_qb_grouping_list');
		    	}
		    </method>
		     
		    <textlistitem name="lstAll" text="all" value="1" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <state apply="${classroot.insertQuery == undefined ||classroot.insertQuery == false}">
			    <textlistitem name="lstAny" text="any" value="2" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
			    <textlistitem name="lstNone" text="none" value="3" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>		    
			    <textlistitem name="lstNotAll" text="not all" value="4" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
			</state> 
			<!-- <textlistitem name="txtGroup" text="$path{'@name'}" value="$path{'@value'}">
				<method event="oninit">
					//datapath="qb_query_builder:/root/comps/group"
					this.setAttribute("datapath", parent.groupingListDatapath + "root/comps/group");
				</method>
				<method event="onclick">
					if (parent.isGlobal){
						//Debug.write("Dealing with global");
						parent.attachtarget.parent.parent.setAttribute("_qb_grouping_value", this.getValue());
					} else {
						//Debug.write("Dealing with local");
						parent.attachtarget.parent.datapath.setNodeAttribute("grouping", this.getAttribute("text"));
					}
					parent.attachtarget.setText(this.getAttribute("text"));
					classroot._qb_grouping_list.setVisible(false);
					parent.attachtarget.parent.parent._qb_controller.updateSqlEditBox();
				</method>
			</textlistitem> -->
			 
			<method name="listOnclick">
				if (this.isGlobal){
					//Debug.write("Dealing with global");
					this.attachtarget.parent.parent.setAttribute("_qb_grouping_value", this.selectedList.getValue());
				} else {
					//Debug.write("Dealing with local");
					this.attachtarget.parent.datapath.setNodeAttribute("grouping", this.selectedList.getAttribute("text"));
				}
				this.attachtarget.setText(this.selectedList.getAttribute("text"));
				classroot._qb_grouping_list.setVisible(false);
				this.attachtarget.parent.parent._qb_controller.updateSqlEditBox();
			</method> 
			
		</floatinglist>
		
		<!-- Actions floating list. -->
		<floatinglist name="qb_actions_list_name" visible="false" width="200" focusable="true" initstage="defer"><!-- id="qb_actions_list" -->
			<attribute name="trackgroup" type="string" value="track_qb_actions_list"/>
			<attribute name="selectedList"/>
			<method event="oninit">
		    	//Debug.write("***************qb_actions_list oninit********************" );
		    	LzTrack.register(this, this.trackgroup);
		    	classroot.setAttribute("_qb_actions_list", this);
		    	//this.setAttribute('selectedList', this.lstAddCond);
		    </method>
		    <method event="onmousetrackout">
		    	//Debug.write("***************qb_actions_list onmousetrackout********************" );
		    	this.setAttribute("visible", false);
		    </method>
		    <method event="onvisible">
		    	//Debug.write("***************qb_actions_list onvisible********************" );
		    	this.setAttribute("onfocus", true);
		    	if (this.getAttribute("visible") == true){
		    		LzTrack.activate('track_qb_actions_list');
		    	} else {
		    		LzTrack.deactivate('track_qb_actions_list');
		    	}
		    </method>
		    <textlistitem name="lstAddCond" text="Add Condition (after current)" value="1" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <state apply="${classroot.insertQuery == undefined ||classroot.insertQuery ==false}">
		    	<textlistitem name="lstAddBracket" text="Add Bracket (after current)" value="2" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    </state>
		    <textlistitem name="lstDelCond" text="Delete Current Row" value="3" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem name="lstEnDisCond" text="Enable/Disable Row" value="4" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <!--  
			<textlistitem name="txtAction" datapath="qb_query_builder:/root/comps/action" text="$path{'@name'}" value="$path{'@value'}">
				<method event="onclick">
					var val = this.getValue();
					if (val == 1){	// add new condition after this.
						var currQueryNode = parent.attachtarget.parent.datapath;
						//Debug.write("Current dataelement: " + currQueryNode);
						parent.attachtarget.parent.parent._qb_controller.addCondition(currQueryNode);
					} else if (val == 2) {	// add bracket.
						var currQueryNode = parent.attachtarget.parent.datapath;
						//Debug.write("Current dataelement: " + currQueryNode);
						parent.attachtarget.parent.parent._qb_controller.addBracket(currQueryNode);
					} else if (val == 3){	// delete this condition.
						parent.attachtarget.parent.datapath.deleteNode();
						parent.attachtarget.parent.parent._qb_controller.updateNumbering();
					} else if (val == 4){	// enable/disable this condition.
						parent.attachtarget.parent.toggleEnabled();
					}
					classroot._qb_actions_list.setVisible(false);
					parent.attachtarget.parent.parent._qb_controller.updateSqlEditBox();
				</method>
			</textlistitem>-->
			<method name="listOnclick">
				var val = this.getValue();
				if (val == 1){	// add new condition after this.
					var currQueryNode = this.attachtarget.parent.datapath;
					//Debug.write("Current dataelement: " + currQueryNode);
					this.attachtarget.parent.parent._qb_controller.addCondition(currQueryNode);
				} else if (val == 2) {	// add bracket.
					var currQueryNode = this.attachtarget.parent.datapath;
					//Debug.write("Current dataelement: " + currQueryNode);
					this.attachtarget.parent.parent._qb_controller.addBracket(currQueryNode);
				} else if (val == 3){	// delete this condition.
					this.attachtarget.parent.datapath.deleteNode();
					this.attachtarget.parent.parent._qb_controller.updateNumbering();
				} else if (val == 4){	// enable/disable this condition.
					this.attachtarget.parent.toggleEnabled();
				}
				classroot._qb_actions_list.setVisible(false);
				this.attachtarget.parent.parent._qb_controller.updateSqlEditBox();
			</method>
		</floatinglist>
		
		<!-- Views floating list. -->
		<!-- The first view. -->
		<floatinglist name="qb_views_list_name" visible="false" initstage="defer"><!--  id="qb_views_list" -->
			<attribute name="trackgroup" type="string" value="track_qb_views_list"/><!-- datapath="qb_query_builder:/root/view" -->
			<method event="oninit">
	      		//Debug.write("***************qb_views_list oninit********************" );
	      		LzTrack.register(this, this.trackgroup);
	      		classroot.setAttribute("_qb_views_list", this);
	    	</method>
	    	
		    <method event="onmousetrackout">
		    	<![CDATA[
				//Debug.write("***************qb_views_list onmousetrackout********************" );
	      		//classroot._qb_subviews_list.qb_subviews_textlistitem.completeInstantiation();
	      		if (!classroot._qb_subviews_list.getAttribute('visible')){
			      	this.setAttribute("visible", false);
			    } else {
			      	var thisX = this.getMouse('x');
			      	var thisW = this.width;
			      	//Debug.write("subview is visible; x=" + thisX + " width=" + thisW);
			      	if (thisX >= thisW) {
			      		//Debug.write("subview is visible and x exceeded");
			      	} else {
			      		//Debug.write("close subview");
				      	this.setAttribute("visible", false);
			      	}
				}
		      ]]>
		    </method>
		    <method event="onvisible">
		    	//Debug.write("***************qb_views_list onvisible********************" );
	      		if (this.getAttribute("visible") == true){
			    	//Debug.write("active view track from view");
		    		LzTrack.activate('track_qb_views_list');
		    	} else {
		    		//Debug.write("deactive view track from view");
		    		LzTrack.deactivate('track_qb_views_list');
		    	}
		    	this.setAttribute("width", projectTabs.querybuilder_maxwidth);
		    	Debug.write("Is Open");
		    </method>
			<textlistitem datapath="node/@field">
	            <method event="ondata">
	                //Debug.write("***************Data changed NODE FIELD: " + this.datapath.serialize());
	                if (this.datapath.p.hasChildNodes()){              
	                    //SL:08/31/2006
	                    new menuarrow( this, { name:'_menuarrow' } ); 
	                }
	            </method>
				<method event="onclick">
					if (!this.datapath.p.hasChildNodes()){
						parent.attachtarget.parent.datapath.setNodeAttribute("field", this.getValue());
						classroot._qb_views_list.setVisible(false);
						parent.attachtarget.parent.parent._qb_controller.updateSqlEditBox();
					}
				</method>
				<method event="onmouseover">
					// Find out whether there is a subview.
					//classroot._qb_subviews_list.qb_subviews_textlistitem.completeInstantiation();
					if (this.datapath.p.hasChildNodes()){						
			    		classroot._qb_subviews_list.datapath.setPointer(this.datapath.p);
			    		classroot._qb_subviews_list.setAttachTarget(this);
			    		classroot._qb_subviews_list.setAttribute("attach", "right");
			    		classroot._qb_subviews_list.setVisible(true);
			    		classroot._qb_subviews_list.setParent(this.getValue());
		    		} else {
		    			classroot._qb_subviews_list.setAttachTarget(null);
		    			classroot._qb_subviews_list.setTracking(null);
			    		classroot._qb_subviews_list.setVisible(false);
		    		}
				</method>
			</textlistitem>
		</floatinglist>
		<!-- The subview. -->
		<floatinglist name="qb_subviews_list_name" visible="false" datapath="" ><!-- id="qb_subviews_list"  -->
			<attribute name="trackgroup" type="string" value="track_qb_subviews_list"/>
			<attribute name="isTracking" type="boolean" value="false"/>
			<attribute name="parentViewName" type="string" value=""/>
			<method event="oninit">
		    	//Debug.write("***************qb_subviews_list oninit");
	            LzTrack.register(this, this.trackgroup);
	            classroot.setAttribute("_qb_subviews_list", this);
		    </method>
		    <method event="onmousetrackout">
		    	//Debug.write("***************qb_subviews_list onmousetrackout********************" );
	      		this.setAttribute("isTracking", false);
		    	this.setAttribute("visible", false);
		    </method>
		    <method event="onmousetrackover">
			    //Debug.write("***************qb_subviews_list onmousetrackover********************" );
	      		//Debug.write("onmousetrackover for subview");
			    this.setAttribute("isTracking", true);
		    	
		    </method>    
		    <method event="onvisible">
		    	//Debug.write("***************qb_subviews_list onvisible********************" );
	      		if (this.getAttribute("visible") == true){
		    		LzTrack.activate('track_qb_subviews_list');
		    	} else {
		    		LzTrack.deactivate('track_qb_subviews_list');
		    	}
		    	this.setAttribute("width", projectTabs.querybuilder_maxwidth_sub);
		    </method>
			<method name="setParent" args="parentView">
				//Debug.write("***************qb_subviews_list setParent********************" );
	      		this.setAttribute("parentViewName", parentView);
			</method>
	        <textlistitem name="qb_subviews_textlistitem" datapath="subnode/@field" ><!-- initstage="defer" -->
	            <method event="onclick">
	                <![CDATA[
	                //Debug.write("Onclick the floating list qb_subviews_list: " + this);
	                //Debug.write("**************parent: " + parent.parentViewName);
	                var fieldName = this.getValue();
	                if (parent.parentViewName != null && parent.parentViewName != "" && parent.parentViewName != "undefined" ){//&& parent.parentViewName != this.getValue()){
	                	fieldName = parent.parentViewName + "." + this.getValue();
	                }
	                	
	                classroot._qb_views_list.attachtarget.parent.datapath.setNodeAttribute("field", fieldName);
	                classroot._qb_views_list.setVisible(false);
	                classroot._qb_subviews_list.setVisible(false);
	                classroot._qb_views_list.attachtarget.parent.parent._qb_controller.updateSqlEditBox();
	                ]]>
	            </method>
	        </textlistitem>
	        <state apply="${!classroot._qb_views_list.visible}">
	            <attribute name="visible" value="false"/>
	        </state>
    	</floatinglist>
    
    <!-- Comparisons floating list. -->
    <floatinglist name="qb_comp_list_name" visible="false" width="200" focusable="true" initstage="defer"><!-- id="qb_comp_list" -->
        <attribute name="trackgroup" type="string" value="track_qb_comp_list"/>
		<attribute name="selectedList"/>
		<method event="oninit">
			//Debug.write("***************qb_comp_list oninit********************" );
	      	LzTrack.register(this, this.trackgroup);
	    	classroot.setAttribute("_qb_comp_list", this);
	    	//this.setAttribute('selectedList', this.lstDefault);
	    </method>
	    <textlistitem name="lstDefault" text="is equal to" value="1" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
	    <state apply="${classroot.insertQuery == undefined || classroot.insertQuery==false}">
		    <textlistitem text="is not equal to" value="2" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>	    
		    <textlistitem text="is less than" value="3" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="is less than or equal to" value="4" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="is greater than" value="5" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="is greater than or equal to" value="6" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="is null" value="7" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="is in list" value="8" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="is not in list" value="9" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="starts with" value="10" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="does not start with" value="11" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="contains" value="12" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="does not contain" value="13" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="is between" value="14" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		    <textlistitem text="is not between" value="15" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
		</state>
	    <!-- 
        <textlistitem name="txtComp" datapath="qb_query_builder:/root/comps/comp/" text="$path{'@name'}" value="$path{'@value'}">
            <method event="onclick">
                var thisValue = this.getAttribute("value");
                switch (thisValue){
                    case 7:     // is null.
                        //Debug.write("IS NULL: need to disable the value field");
                        //parent.attachtarget.parent.datapath.setNodeAttribute("value", "_____");
                        parent.attachtarget.parent._val.setAttribute("visible", false);
                        parent.attachtarget.parent._betw_op.setAttribute("visible", false);
                        parent.attachtarget.parent._val2.setAttribute("visible", false);
                        parent.attachtarget.parent._conn.setAttribute("visible", false);
                        
                        break;
                    case 14:    // between.
                    case 15:    // is not between.
                        parent.attachtarget.parent._val.setAttribute("visible", true);
                        parent.attachtarget.parent._betw_op.setAttribute("visible", true);
                        parent.attachtarget.parent._val2.setAttribute("visible", true);
                        break;
                    default:  // make the value field visible if not IS NULL.
                        parent.attachtarget.parent._val.setAttribute("visible", true);
                        parent.attachtarget.parent._betw_op.setAttribute("visible", false);
                        parent.attachtarget.parent._val2.setAttribute("visible", false);
                        parent.attachtarget.parent._conn.setAttribute("visible", false);
                }
                parent.attachtarget.parent.datapath.setNodeAttribute("compID", thisValue);
                parent.attachtarget.parent.datapath.setNodeAttribute("comparison", this.getAttribute("text"));
                parent.setVisible(false);
                parent.attachtarget.parent.parent._qb_controller.updateSqlEditBox();
            </method>
        </textlistitem> -->
        
        <method name="listOnclick">
            var thisValue = this.selectedList.getAttribute("value");
            switch (thisValue){
                case 7:     // is null.
                    //Debug.write("IS NULL: need to disable the value field");
                    //parent.attachtarget.parent.datapath.setNodeAttribute("value", "_____");
                    this.attachtarget.parent._val.setAttribute("visible", false);
                    this.attachtarget.parent._betw_op.setAttribute("visible", false);
                    this.attachtarget.parent._val2.setAttribute("visible", false);
                    this.attachtarget.parent._conn.setAttribute("visible", false);
                    
                    break;
                case 14:    // between.
                case 15:    // is not between.
                    this.attachtarget.parent._val.setAttribute("visible", true);
                    this.attachtarget.parent._betw_op.setAttribute("visible", true);
                    this.attachtarget.parent._val2.setAttribute("visible", true);
                    break;
                default:  // make the value field visible if not IS NULL.
                    this.attachtarget.parent._val.setAttribute("visible", true);
                    this.attachtarget.parent._betw_op.setAttribute("visible", false);
                    this.attachtarget.parent._val2.setAttribute("visible", false);
                    this.attachtarget.parent._conn.setAttribute("visible", false);
            }
            this.attachtarget.parent.datapath.setNodeAttribute("compID", thisValue);
            this.attachtarget.parent.datapath.setNodeAttribute("comparison", this.selectedList.getAttribute("text"));
            this.setVisible(false);
            this.attachtarget.parent.parent._qb_controller.updateSqlEditBox();
        </method>
		<method event="onmousetrackout">
			//Debug.write("***************qb_comp_list onmousetrackout********************" );
	      	this.setAttribute("visible", false);
		</method>
		<method event="onvisible">
	        //Debug.write("***************qb_comp_list onvisible********************" );
	      	if (this.getAttribute("visible") == true){
	            LzTrack.activate('track_qb_comp_list');
	        } else {
	            LzTrack.deactivate('track_qb_comp_list');
	        }
		</method>        
        <method event="onblur">
            this.setAttribute("visible", false);
        </method>
    </floatinglist>
    
    <!-- Value floating list. -->
    <floatinglist name="qb_value_list_name" visible="false"><!-- id="qb_value_list" --><!-- initstage="defer" -->
        <attribute name="trackgroup" type="string" value="track_qb_value_list"/>
        <attribute name="selectedList"/>
		<method event="oninit">
			//Debug.write("***************qb_value_list oninit********************" );
	      	LzTrack.register(this, this.trackgroup);
	      	classroot.setAttribute("_qb_value_list", this);
	      	//this.setAttribute('selectedList', this.lstDefault);
		</method>
		<method event="onmousetrackout">
			//Debug.write("***************qb_value_list onmousetrackout********************" );
			this.setAttribute("visible", false);
		</method>
		<method event="onvisible">
			//Debug.write("***************qb_value_list onvisible********************" );
			if (this.getAttribute("visible") == true){
	            LzTrack.activate('track_qb_value_list');
	        } else {
	            LzTrack.deactivate('track_qb_value_list');
	        }
		</method>
		<!--  
		<textlistitem name="lstDefault" text="Value" value="1" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
	    <textlistitem name="lstDynamic" datapath="qb_query_builder:/root/comps/value/@name" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();" />
	    <textlistitem text="User Input" value="3" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
	    <textlistitem text="Calendar" value="4" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
	    <textlistitem text="Boolean" value="5" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
	    -->
	      
        <textlistitem name="txtCompsValue" >
            <method event="oninit">           	
            	//this.setAttribute("datapath", classroot.qbDatapath + "root/comps/value/@name");//datapath="qb_query_builder:/root/comps/value/@name"
            </method>
            <method event="ondata">
            	projectTabs.querybuilder_subtext_testuserinput.setText(this.data);
            	parent.setAttribute("width", projectTabs.querybuilder_maxwidth_userinput);
            </method>
            <method event="onclick">
                var thisValue = this.datapath.getNodeAttribute("value");
                var thisName = this.datapath.getNodeAttribute("name");
                var replaceField = parent.attachtarget;
                var replaceParent = parent.attachtarget.parent;
                if (thisValue == 1) { // input field.
                    replaceField.setAttribute("visible", false);
                    //replaceParent._val.setAttribute("visible", false);
                    //Debug.write(parent.owner);
                    if (!parent.owner._qb_inputControl){
                        var input = new qb_inputtext();
                        parent.owner._qb_inputControl = input;
                    } else {
                        var input = parent.owner._qb_inputControl;
                    }
                    //input.setAttribute("x", replaceParent._val.x + 10);
                    input.setAttribute("x", replaceField.getAttributeRelative("x", input.parent));
                    //Debug.write("replaceField.x: " + replaceField.x);
                    input.setAttribute("y", replaceField.getAttributeRelative("y",input.parent));
                    input.setAttribute("trackReplacement", replaceField);
                    //input.setAttribute("trackReplacement", replaceParent._val);
                    input.setAttribute("visible", true);
                    if (replaceField.text == "_____"){
                    //if (replaceParent._val.text == "_____"){
                        input.setAttribute("text", "");
                    } else if (replaceField.text == "[UserID]"){
                    //} else if (replaceParent._val.text == "[UserInput]"){
                        input.setAttribute("text", "");
                    } else if (replaceField.text == "[UserInput]"){
                    //} else if (replaceParent._val.text == "[UserInput]"){
                        input.setAttribute("text", "");
                    } else {
                        input.setAttribute("text", replaceField.text);
                        //input.setAttribute("text", replaceParent._val.text);
                    }
                    var stringLength = replaceField.text.length;
                    //var stringLength = replaceParent._val.text.length;
                    input.setSelection(stringLength);
                } else if (thisValue == 2) { // user ID.
                    replaceField.setText("[UserID]");
                    if (replaceField.name == '_val'){
                        parent.attachtarget.parent.datapath.setNodeAttribute("value", "[UserID]");
                    } else {
                        parent.attachtarget.parent.datapath.setNodeAttribute("value2", "[UserID]");
                    }
                } else if (thisValue == 3) { // user input.
                    replaceField.setText("[UserInput]");
                    //replaceParent._val.setText("[UserInput]");
                    //parent.attachtarget.parent.datapath.setNodeAttribute("value", "[UserInput]");
                    if (replaceField.name == '_val'){
                        parent.attachtarget.parent.datapath.setNodeAttribute("value", "[UserInput]");
                    } else {
                        parent.attachtarget.parent.datapath.setNodeAttribute("value2", "[UserInput]");
                    }
                } else if (thisValue == 4) { // calendar.
                    if (parent.parent._qb_calendarControl == null){
                        var cal = new qb_calendar();
                        var today = new Date();
						var month = today.getMonth();
						var year = today.getFullYear();
						cal.setMonthToShow(month, year);
                        
                        //cal.setMonthToShow(2, 2007);
                        
                        parent.parent._qb_calendarControl = cal;
                    } else {
                        var cal = parent.parent._qb_calendarControl;
                    }
                    cal.setAttribute("trackReplacement", replaceField);
                    //cal.setAttribute("trackReplacement", replaceParent._val);
                    //cal.setAttribute("x", replaceField.x + 100);
                    //cal.setAttribute("x", replaceParent._val.x + 10);
                    //cal.setAttribute("y", replaceParent.y + 250);
                    
                    
                    var thisX = replaceField.getAttributeRelative('x', canvas);
                    var thisY = replaceField.getAttributeRelative('y', canvas);
                    cal.setAttribute("x", thisX);
                    cal.setAttribute("y", thisY + 13);
                    
                    cal.setAttribute("visible", true);
                } else if (thisValue == 5) { // boolean list.
                    if (parent.parent._qb_booleanControl == null){
                        var bool = new qb_boolean_list();
                        parent.parent._qb_booleanControl = bool;
                    } else {
                        var bool = parent.parent._qb_booleanControl;
                    }
                    //bool.setAttribute("trackReplacement", replaceParent._val);
                    bool.setAttribute("trackReplacement", replaceField);

                    //bool.setAttribute("x", replaceParent._val.x + 11);
                    //bool.setAttribute("x", replaceField.x + 11);
                    //bool.setAttribute("y", replaceParent.y + 27);
                    
                    
                    var thisX = replaceField.getAttributeRelative('x', canvas);
                    var thisY = replaceField.getAttributeRelative('y', canvas);
                    bool.setAttribute("x", thisX);
                    bool.setAttribute("y", thisY + 16);                   
                    
                    bool.setAttribute("visible", true);
                }else if (thisValue == 6) { // current date time.
                    var currentDate = new Date();
                    var dateStr = currentDate.getDay() + "/" + currentDate.getMonth() + "/" + currentDate.getFullYear() + ":" + currentDate.getHours()+':'+currentDate.getMinutes()+':'+currentDate.getSeconds();
                    //replaceField.setText("[TBA]");
                    replaceField.setText("[yyyy-MM-dd hh:mm]");                    
                    if (replaceField.name == '_val'){
                        //parent.attachtarget.parent.datapath.setNodeAttribute("value", "[TBA]");
                        parent.attachtarget.parent.datapath.setNodeAttribute("value", "[yyyy-MM-dd hh:mm]");                        
                    } else {
                        //parent.attachtarget.parent.datapath.setNodeAttribute("value2", "[TBA]");
                        parent.attachtarget.parent.datapath.setNodeAttribute("value2", "[yyyy-MM-dd hh:mm]");
                    }
                }else if (thisValue == "customField"){
                	Debug.write("Custom Field", thisName, replaceField);
					if (thisName.indexOf(" ")>0){
						thisName = "["+thisName+"]";
					}               	
                	replaceField.setText(thisName);
                    if (replaceField.name == '_val'){
                        parent.attachtarget.parent.datapath.setNodeAttribute("value", thisName);
                    } else {
                        parent.attachtarget.parent.datapath.setNodeAttribute("value2", thisName);
                    }
                }
                parent.setVisible(false);
                
                parent.attachtarget.parent.parent._qb_controller.updateSqlEditBox();
            </method>
        </textlistitem> 
        <!--  
        <method name="listOnclick">
        	var thisValue = null;
        	var thisName = null;
        	if (this.selectedList == this.lstDynamic){
	            thisValue = this.selectedList.datapath.getNodeAttribute("value");
	            thisName = this.selectedList.datapath.getNodeAttribute("name");
            }else{
            	thisValue = this.selectedList.getValue();
            }
            var replaceField = this.attachtarget;
            var replaceParent = this.attachtarget.parent;
            if (thisValue == 1) { // input field.
                replaceField.setAttribute("visible", false);
                //replaceParent._val.setAttribute("visible", false);
                //Debug.write(parent.owner);
                if (!this.owner._qb_inputControl){
                    var input = new qb_inputtext();
                    this.owner._qb_inputControl = input;
                } else {
                    var input = this.owner._qb_inputControl;
                }
                //input.setAttribute("x", replaceParent._val.x + 10);
                input.setAttribute("x", replaceField.getAttributeRelative("x", input.parent));
                //Debug.write("replaceField.x: " + replaceField.x);
                input.setAttribute("y", replaceField.getAttributeRelative("y",input.parent));
                input.setAttribute("trackReplacement", replaceField);
                //input.setAttribute("trackReplacement", replaceParent._val);
                input.setAttribute("visible", true);
                if (replaceField.text == "_____"){
                //if (replaceParent._val.text == "_____"){
                    input.setAttribute("text", "");
                } else if (replaceField.text == "[UserID]"){
                //} else if (replaceParent._val.text == "[UserInput]"){
                    input.setAttribute("text", "");
                } else if (replaceField.text == "[UserInput]"){
                //} else if (replaceParent._val.text == "[UserInput]"){
                    input.setAttribute("text", "");
                } else {
                    input.setAttribute("text", replaceField.text);
                    //input.setAttribute("text", replaceParent._val.text);
                }
                var stringLength = replaceField.text.length;
                //var stringLength = replaceParent._val.text.length;
                input.setSelection(stringLength);
            } else if (thisValue == 2) { // user ID.
                replaceField.setText("[UserID]");
                if (replaceField.name == '_val'){
                    this.attachtarget.parent.datapath.setNodeAttribute("value", "[UserID]");
                } else {
                    this.attachtarget.parent.datapath.setNodeAttribute("value2", "[UserID]");
                }
            } else if (thisValue == 3) { // user input.
                replaceField.setText("[UserInput]");
                //replaceParent._val.setText("[UserInput]");
                //parent.attachtarget.parent.datapath.setNodeAttribute("value", "[UserInput]");
                if (replaceField.name == '_val'){
                    this.attachtarget.parent.datapath.setNodeAttribute("value", "[UserInput]");
                } else {
                    this.attachtarget.parent.datapath.setNodeAttribute("value2", "[UserInput]");
                }
            } else if (thisValue == 4) { // calendar.
                if (this.parent._qb_calendarControl == null){
                    var cal = new qb_calendar();
                    var today = new Date();
					var month = today.getMonth();
					var year = today.getFullYear();
					cal.setMonthToShow(month, year);
                    
                    //cal.setMonthToShow(2, 2007);
                    
                    this.parent._qb_calendarControl = cal;
                } else {
                    var cal = this.parent._qb_calendarControl;
                }
                cal.setAttribute("trackReplacement", replaceField);
                //cal.setAttribute("trackReplacement", replaceParent._val);
                //cal.setAttribute("x", replaceField.x + 100);
                //cal.setAttribute("x", replaceParent._val.x + 10);
                //cal.setAttribute("y", replaceParent.y + 250);
                
                
                var thisX = replaceField.getAttributeRelative('x', canvas);
                var thisY = replaceField.getAttributeRelative('y', canvas);
                cal.setAttribute("x", thisX);
                cal.setAttribute("y", thisY + 13);
                
                cal.setAttribute("visible", true);
            } else if (thisValue == 5) { // boolean list.
                if (this.parent._qb_booleanControl == null){
                    var bool = new qb_boolean_list();
                    this.parent._qb_booleanControl = bool;
                } else {
                    var bool = this.parent._qb_booleanControl;
                }
                //bool.setAttribute("trackReplacement", replaceParent._val);
                bool.setAttribute("trackReplacement", replaceField);

                //bool.setAttribute("x", replaceParent._val.x + 11);
                //bool.setAttribute("x", replaceField.x + 11);
                //bool.setAttribute("y", replaceParent.y + 27);
                
                
                var thisX = replaceField.getAttributeRelative('x', canvas);
                var thisY = replaceField.getAttributeRelative('y', canvas);
                bool.setAttribute("x", thisX);
                bool.setAttribute("y", thisY + 16);                   
                
                bool.setAttribute("visible", true);
            }else if (thisValue == "customField"){
            	replaceField.setText(thisName);
                if (replaceField.name == '_val'){
                    this.attachtarget.parent.datapath.setNodeAttribute("value", thisName);
                } else {
                    this.attachtarget.parent.datapath.setNodeAttribute("value2", thisName);
                }
            }
            this.setVisible(false);
            this.attachtarget.parent.parent._qb_controller.updateSqlEditBox();
        </method>-->
    </floatinglist>
  </class>
  
  <!-- The value input field. -->
  <class name="qb_inputtext" extends="inputtext" bgcolor="yellow" width="100">
   <attribute name="trackReplacement"/>
   <method event="onkeydown" args="k">
        var enterKey = 13;
        if (k==13) {
          this.transferValue();
        }
    </method>
    <method event="onblur">
		this.transferValue();
    </method>
    <method name="transferValue">
        var newValue = this.getText();
        if (this.trackReplacement.name == '_val'){
            this.trackReplacement.parent.datapath.setNodeAttribute("value", newValue);
        } else {
            this.trackReplacement.parent.datapath.setNodeAttribute("value2", newValue);
        }
        if (newValue == ""){
            newValue = "_____";
        }
		this.trackReplacement.setText(newValue);
        
		this.setAttribute("visible", false);
		this.trackReplacement.setAttribute("visible", true);
      	this.trackReplacement.parent.parent._qb_controller.updateSqlEditBox();
    </method>
  </class>
  
  <!-- The date picker -->
  <class name="qb_calendar" extends="datepicker"
              earliestdate="new Date(1900, 9, 5)" 
              latestdate="new Date(2010, 1, 5)"
              startAsIcon="false"
              visible="false">
    <attribute name="trackReplacement"/>
	<method event="onselecteddate">
    <![CDATA[
         if( this.selecteddate != null) {
            var day = this.selecteddate.getDate();
            var month = this.selecteddate.getMonth() + 1;
            var year = this.selecteddate.getFullYear();
            var displayDate = year + "-" + month + "-" + day
			//var displayDate = day + "/" + month + "/" + year
           this.setAttribute("visible", false);
           this.trackReplacement.setText(displayDate);
           if (this.trackReplacement.name == '_val'){
                this.trackReplacement.parent.datapath.setNodeAttribute("value", displayDate);
            } else {
                this.trackReplacement.parent.datapath.setNodeAttribute("value2", displayDate);
            }
           //this.trackReplacement.parent.datapath.setNodeAttribute("value", displayDate);
           this.trackReplacement.parent.parent._qb_controller.updateSqlEditBox();
         }
       ]]>
    </method>
  </class>
  
  <!-- The boolean selection. -->
  <class name="qb_boolean_list" extends="combobox" visible="false" editable="false">
	<attribute name="trackgroup" type="string" value="track_qb_boolean_list"/>
	<attribute name="trackReplacement"/>
	<attribute name="selectedList"/>
	<method event="oninit">
		//Debug.write("***************qb_boolean_list oninit********************" );
		LzTrack.register(this, this.trackgroup);
    </method>
    <method event="onmousetrackout">
		//Debug.write("***************qb_boolean_list onmousetrackout********************" );
		this.setAttribute("visible", false);
    </method>
    <method event="onvisible">
        //Debug.write("***************qb_boolean_list onvisible********************" );
		if (this.getAttribute("visible") == true){
          LzTrack.activate('track_qb_boolean_list');
        } else {
            LzTrack.deactivate('track_qb_boolean_list');
        }
    </method>
    <textlistitem text="true" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/>
	<textlistitem text="false" onclick="parent.setAttribute('selectedList', this); parent.listOnclick();"/> 
    
    <!-- 
   	<textlistitem name="txtBoolean" datapath="qb_query_builder:/root/comps/boolean" text="$path{'@name'}" value="$path{'@value'}">
	    <method event="onclick">
	        this.parent.trackReplacement.setText(this.getAttribute("text"));
	        this.parent.setAttribute("visible", false);
	        if (this.parent.trackReplacement.name == '_val'){
	            this.parent.trackReplacement.parent.datapath.setNodeAttribute("value", this.getAttribute("text"));
	        } else {
	            this.parent.trackReplacement.parent.datapath.setNodeAttribute("value2", this.getAttribute("text"));
	        }
	        this.parent.trackReplacement.parent.parent._qb_controller.updateSqlEditBox();
	        //this.parent.trackReplacement.parent.datapath.setNodeAttribute("value", this.getAttribute("text"));
	    </method>
	</textlistitem> --> 
     
    <method name="listOnclick">
        this.trackReplacement.setText(this.selectedList.getAttribute("text"));
        this.setAttribute("visible", false);
        if (this.trackReplacement.name == '_val'){
            this.trackReplacement.parent.datapath.setNodeAttribute("value", this.selectedList.getAttribute("text"));
        } else {
            this.trackReplacement.parent.datapath.setNodeAttribute("value2", this.selectedList.getAttribute("text"));
        }
        this.trackReplacement.parent.parent._qb_controller.updateSqlEditBox();
        //this.parent.trackReplacement.parent.datapath.setNodeAttribute("value", this.getAttribute("text"));
    </method> 
  </class>
</library>
