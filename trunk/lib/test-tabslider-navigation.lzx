<canvas debug="true">
    <class name="testview"
          width="300" height="180">
        <attribute name="top_pad" value="0" type="number" />

        <!-- helper method to print event -->
        <method name="printEvent" args="o,e">
            Debug.write(o.parent.name+'.'+o.name+'.'+e);
        </method>

        <simplelayout axis="y" />
        <!-- spacer to push remaining objects down to achive overlapping -->
        <view name="_top_pad" height="${classroot.top_pad}" />

        <button name="mybutton"
                x="5" y="15"
                text="${this.name}">

            <handler name="onclick">
                classroot.printEvent(this,'onclick');
            </handler>

            <handler name="omouseover">
                classroot.printEvent(this,'onmouseover');
            </handler>
        </button>

        <combobox name="mycombobox"
                  x="5" y="20"
                  width="130" editable="false">

            <handler name="onvalue">
                classroot.printEvent(this,'onvalue');
            </handler>
            <handler name="omouseover">
                classroot.printEvent(this,'onmouseover');
            </handler>

            <textlistitem text="One_1"  value="0x000055"/>
            <textlistitem text="One_2"  value="0x66dddd"/>
            <textlistitem text="One_3" value="0xaaddff"/>
        </combobox>

        <edittext name="myedittext" text="hello"
                  width="200">

            <handler name="onvalue">
                classroot.printEvent(this,'onvalue');
            </handler>

            <handler name="omouseover">
                classroot.printEvent(this,'onmouseover');
            </handler>

        </edittext>
    </class>


    <window name="mywin" title="Test overlapping views (click any tab element and mouseover the blank area of colored view to see the difference)"
            clickable="false" resizable="true">
        <simplelayout axis="x"
                      spacing="10" />
    
        <tabslider name="maintabslider" x="10" y="10"
                   width="150" height="200"
                   spacing="2" slideduration="300">
    
            <method name="togglestate" args="viewprefix">
                Debug.write("togglestate() | viewprefix="+viewprefix);

                parent.afterview.setAttribute("toggledstate",viewprefix);
                parent.beforeview.setAttribute("toggledstate",viewprefix);
            </method>
    
            <tabelement name="onetabelement" text="Tabelement One">
                <handler name="onselected">
                    parent.togglestate('one')
                </handler>
    
                <text>One</text>
            </tabelement>
            
            <tabelement name="twotabelement" text="Tabelement Two">
                <handler name="onselected">
                    parent.togglestate('two')
                </handler>
                <text>Two</text>
            </tabelement>
            
            <tabelement name="threetabelement" text="Tabelement Three" selected="true">
                <handler name="onselected">
                    parent.togglestate('three')
                </handler>
                <text>Three</text>
            </tabelement>
    
        </tabslider>

        <!-- sample screen management with overlapping -->
        <view name="beforeview">
            <attribute name="toggledstate" type="string" />
            <attribute name="statepooling" type="boolean" value="true" />
    
            <handler name="ontoggledstate">
            <![CDATA[
                Debug.write("beforeview.ontoggledstate | toggledstate="+this.toggledstate);
    
                var arrPrefixes = ['one','two','three'];
                var theview = this.toggledstate+'view';
    
                for (var i = 0; i< arrPrefixes.length; i++){
                    var theprefix = arrPrefixes[i];
                    var v = theprefix+'view';
                    this[v].sendToBack();
                    
                    Debug.write("send to back state '"+v+"'");
                }
                this[theview].bringToFront();
                Debug.write("sent to front v '"+theview+"'");
            ]]>
            </handler>
            
            <testview name="oneview" y="${parent.testlabel.height + 10}" bgcolor="red" top_pad="0"/>
            <testview name="twoview" y="${parent.testlabel.height + 10}" bgcolor="yellow" top_pad="50"/>
            <testview name="threeview" y="${parent.testlabel.height + 10}" bgcolor="green" top_pad="100"/>
            
            <text name="testlabel" text="BEFORE" fontstyle="bold" />
        </view>
    
        <!-- workaround screen management with state -->
        <view name="afterview">
            <attribute name="toggledstate" type="string" />
            <attribute name="statepooling" type="boolean" value="true" />
    
            <handler name="ontoggledstate">
            <![CDATA[
                Debug.write("afterview.ontoggledstate | toggledstate="+this.toggledstate);
    
                var arrPrefixes = ['one','two','three'];
                var thestate = this.toggledstate+'state';
    
                for (var i = 0; i< arrPrefixes.length; i++){
                    var theprefix = arrPrefixes[i];
                    var s = theprefix+'state';
                    this[s].remove();
                    
                    Debug.write("removed state '"+s+"'");
                }
                this[thestate].apply();
                Debug.write("applied state '"+thestate+"'");
            ]]>
            </handler> 
    
            <state name="onestate" apply="false" pooling="true">
                <testview y="${parent.testlabel.height + 10}" name="oneview" bgcolor="red" top_pad="0"/>
            </state>
    
            <state name="twostate" apply="false" pooling="true">
                <testview y="${parent.testlabel.height + 10}" name="twoview" bgcolor="yellow" top_pad="50"/>
            </state>
    
            <state name="threestate" apply="false" pooling="true">
                <testview y="${parent.testlabel.height + 10}" name="threeview" bgcolor="green" top_pad="100"/>
            </state>
    
            <text name="testlabel" text="AFTER" fontstyle="bold" />
        </view>
    </window>

</canvas>
