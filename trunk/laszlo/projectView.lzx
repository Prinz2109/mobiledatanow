<library>
	<resource name="slider_arrow">
		<frame src="../images/slider_arrow.gif" />
		<frame src="../images/slider_arrow_over.gif" />
	</resource>
	<resource name="slider_ex">
		<frame src="../images/close_button.gif" />
		<frame src="../images/close_button_over.gif" />
	</resource>
	<!-- Definition of the V tab panel. -->
	<class name="vtabpanel" y="78" clip="true" opacity="0" extends="basewindow">
	
	    <attribute name="openingsize" type="string" value="150" />
	    <attribute name="opened" value="false"/>
	    <attribute name="currProjectID" type="number" value="1"/>
	    <attribute name="currProjectName" type="string" value="" />
	    <attribute name="rubbishView" />
	    <attribute name="hasBeenClicked" value="false" />
	    <attribute name="nOfProjects" type="number" value="0" />
	    <attribute name="uploadFilename" type="string" value="" />
	    
	    <text id="treeProjectCount" datapath="navHome:/root/@projectsCount" visible="false" />

	    <method name="shiftYPosList" args="toRemoveOne, toAddOne">
	    	if(nOfProjects == 0) {
	    		if(isNaN(parseInt(treeProjectCount.getText()))) {
	    			Debug.write("Very First Startup");
	    			setAttribute("nOfProjects", 63);
	    		} else {
		    		Debug.write("Not a Number True");
		    		
		    		var newYAxisFromTree = (parseInt(treeProjectCount.getText()) * 18) + 45;
		    		setAttribute("nOfProjects", newYAxisFromTree);
	    		}
	    	} else {
	    		Debug.write("Not a Number false");
	    		
	    		var newYAxisFromTree = nOfProjects;
	    		if(toRemoveOne == "subtractone") {
					newYAxisFromTree -= 18;
				} else if(toAddOne == "addone") {
					newYAxisFromTree += 18;
				}
				setAttribute("nOfProjects", newYAxisFromTree);
	    	}
	    	body.firstRoundRect.clickableSlide.roundRectIt.removeLayout.previewPanel.setAttribute("y", nOfProjects);
	    	//Count how many are in list
			/*var newYAxisFromTree = (parseInt(treeProjectCount.getText()) * 18) + 45;
			Debug.write("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ data count = " + newYAxisFromTree);
			Debug.write("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ attribute count = " + nOfProjects);
			if(toRemoveOne == "subtractone") {
				newYAxisFromTree -= 18;
			} else if(toAddOne == "addone") {
				newYAxisFromTree += 18;
			}*/
			//Debug.write("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ count = " + treeProjectCount.getText() + "add 6 : " + newYAxisFromTree);
	    	//Set New Y
	    	//body.firstRoundRect.clickableSlide.roundRectIt.removeLayout.previewPanel.setAttribute("y", nOfProjects);
	    </method>
	    
	    <method name="onclick">
		    if (this.opened=="true") {
				this.close();
				this.opened="false";

		    } else {
				this.open();				
				this.opened="true";
		    }
		    shiftYPosList();
	    </method>
	    
	    <method name="createClosed">
			parent.bringToFront();
	    </method>

	    <method name="open">
			Debug.write("open project pallete");
			//shiftYPosList();				
			this.openAnimator.doStart();
			//parent.setVisible(true);
			parent.bringToFront();	
			this.body.tabView.tab.bringToFront();
			controller.updateProjectRecycleBin();				
	    </method>
	
	    <method name="close">
            //parent.setVisible(false);
            Debug.write("close project pallete");
            this.closeAnimator.doStart();
            openprojectbutton.setAttribute("opacity", 0.5);
            //parent.sendToBack();
		</method>
		
		<method name="openProjectTab">
    		<![CDATA[
    		/*
    		 * We have to assign background once again.(in class defintion or instance level)
    		*/
    		Debug.write("projectTabs.newtabpaneIdArray", projectTabs.newtabpaneIdArray);
    		var projectId = this.currProjectID;
			var newTab;
			var count = projectTabs.newtabpaneIdArray.length;
            for (var i=0;i < count;i++) {
   	            if(projectTabs.newtabpaneIdArray[i] == projectId)
       	        {
           	    	newTab = projectTabs.newtabpaneArray[i];
           	    	newTab.tab.setAttribute("selected", true);
           	    	Debug.write("Tab",projectId, newTab.text, "has openned already, select this one.");
		    		//close the panel
		    		this.onclick();
           	    	return;					                
		        }
            }
    		
    		Debug.write("**********************currProjectID in projectView", this.currProjectID);
			newTab=new mainTab(projectTabs,{bgcolor:'0xffffff',text:this.currProjectName,currProjectId:this.currProjectID});
    		newTab.setAttribute("currProjectId", this.currProjectID);
    		
			//newTab.content.setWidth(projectTabs.immediateparent.width);									
			//newTab.content.setHeight(projectTabs.immediateparent.height);
							    		
    		// save this instance to the array
    		projectTabs.newtabpaneArray[projectTabs.newtabpaneArray.length]=newTab;
    		projectTabs.newtabpaneIdArray[projectTabs.newtabpaneIdArray.length]=this.currProjectID;
    		
    		newTab.tab.setAttribute("selected", true);
    		
    		//close the panel
    		this.onclick();
    		]]>			
		</method>
        
        <animator name="closeAnimator" attribute="opacity" to="0" duration="1000" start="false">
            <handler name="onstop">
	            //Go back to the place it used to be
	            /*var selectedNode = projectTabs.currTab.currTree.getAttribute("currselnode");
	            if (selectedNode != undefined ){
		      		Debug.write("A view exists already.", 
	       	    				projectTabs.currTab.currProjectId, 
	                   			selectedNode.datapath.p.getAttr("name"));               
	                
	                projectTabs.currTab.currTree.select(selectedNode);               
	                return;
	            } */
	            
	            //Activate
	            classroot.setAttribute("hasBeenClicked", false);
	            classroot.body.firstRoundRect.clickableSlide.roundRectIt.removeLayout.setAttribute("visible", false);
	            classroot.body.firstRoundRect.clickableSlide.arrowSlide.setResource("slider_ex");
            </handler>
        </animator>
        <animator name="openAnimator" attribute="opacity" to="1" duration="1000" start="false">
            <handler name="onstart">
                //parent.bringToFront();
            </handler>
            <handler name="onstop">
            	classroot.projectNavOpenned();
            </handler>
        </animator>
	    <animator name="nudgeCAnimator" attribute="x" to="0" duration="500" start="false">   
        </animator>
        <animator name="nudgeOAnimator" attribute="x" to="10" duration="500" start="false">
        </animator>
        
        <method name="projectNavOpenned">
            //super.openned();
			controller.navHome();
			
            //controller.displayNewHome();
            
            //controller.displayHome("Sample1", "1");
            //this.currProjectID = 1;
            //projectTabs.setAttribute("projectIDConstants", 1);
        </method>
		<datapointer name="copyFrom_dp" />
	    <datapointer name="copyTo_dp" />
	    
	    
		<fileUpload id="projectFileUpload">
			<method name="onComplete" args="fr">
				<![CDATA[
					Debug.write("project File Upload onComplete--------------");
					projectFileProgressBar.setValue(100);
					projectFileUploadError.setAttribute('text', 'Importing ... Upload finished.');
					
					controller.importProject(getName());
				]]>
			</method>
	
			<method name="onProgress" args="fileRef, bytesLoaded, bytesTotal">
				<![CDATA[
					Debug.write("project File Upload onProgress--------------", bytesLoaded, bytesTotal);
					projectFileProgressBar.setValue(bytesLoaded * 100 / bytesTotal);
				]]>
			</method>
	
			<method name="onSelect" args="fileRef">
				<![CDATA[
					projectFileProgressBar.setVisible(true);
					Debug.write("project File Upload onSelect--------------", getName());
					Debug.write("current file name", classroot.uploadFilename, getName());
					classroot.setAttribute("uploadFilename", getName());
					Debug.write("current file name", classroot.uploadFilename, getName());	
					// Upload the file.
					Debug.write("upload url", projectFileUploadURL.getAttribute('src'));
					this.upload(projectFileUploadURL.getAttribute('src'));
					projectFileUploadError.setAttribute('text', "Uploading file ...");				
				]]>
			</method>
			
			<!-- <method name="onUploadCompleteData" args="fr, data">
				<![CDATA[
					Debug.write("project File Upload onUploadCompleteData");
					projectFileProgressBar.setValue(100);
					projectFileUploadError.setAttribute('text', 'Refreshing project definition list ...');
				]]>
			</method> -->
		</fileUpload>   
			    
	   <!-- Deals with the import result. -->
	   <datapointer xpath="importprojectFile:/root" rerunxpath="true"
	    ondata="processData();" onerror="canvas.showError(this);"
	    ontimeout="canvas.showTimeout();">
	    <method name="processData">
	        Debug.write("received new import data: " + this.serialize());
	        var result = this.getNodeText();
	        Debug.write("inside the data pointer processData... t2", result);
	        var action = this.getNodeAttribute('action');
	        var errorMessage = this.getNodeAttribute('errorMessage');
	        if (result == "ok"){
	        	controller.navHome();
	        	//Add one extra one to make sure the data reload
	        	controller.navHome();
	        	//Shift Open Button etc
				classroot.shiftYPosList(null, "addone");
	        }
	        projectFileUploadError.setAttribute('text', errorMessage);
	        projectFileProgressBar.setValue(0);
	        projectFileProgressBar.setVisible(false);
	    </method>
	   </datapointer>
	   		
		<view name="body" width="335" height="627"><!-- Ryan's Test -215 -->
			<method event="oninit">
				<![CDATA[
					this.tabView.tab.bringToFront();
					
					//Loads Projects
					controller.navHome();
				]]>
			</method>
			<!-- 
			<view width="${parent.width-21}" height="${parent.height}" bgcolor="0x777a7f">
				<view x="${parent.x + 1}" y="${parent.y + 1}" width="${parent.width-2}" height="${parent.height-2}" clip="true" bgcolor="0xadb5c2">
					<view name="content" x="${parent.x + 4}" y="${parent.y + 4}" width="${parent.width-9}" height="${parent.height-8}" clip="true" bgcolor="${canvas.bgcolor}">
				        <view width="${parent.width}" height="${parent.height-10}">
					        <simplelayout axis="y"/>
							<text>Project Pallete</text>
							 -->
							 <roundrect	backgroundStartColor="#3b72b1"
			            		backgroundStopColor="#3b72b1"
			           			borderColor="#2b5686"
			           			borderWidth="1"
			           			width="${parent.width}"
			           			height="${parent.height}"
			           			borderRadius="3" name="firstRoundRect">
			           			<method event="oninit">
									this.content.setAttribute("x", 0);
									this.content.setAttribute("y", 0);
								</method>
							<view name="clickableSlide" width="${parent.width}" height="${parent.height}">
	    
						    <view name="arrowSlide" width="20" height="19" x="312" y="3" resource="slider_ex">
							    <method event="onclick">
								    if(!classroot.hasBeenClicked) {
								    	classroot.setAttribute("hasBeenClicked", true);
								    	roundRectIt.removeLayout.setAttribute("visible", true);
								    	roundRectIt.removeLayout.setAttribute("y", 5);
								    	classroot.onclick();
								    	arrowSlide.setResource("slider_ex");
								    } else {
									    classroot.onclick();
								    }
							    </method>
						    </view>
						    
				            <roundrect	backgroundStartColor="#FFFFFF"
			            		backgroundStopColor="#FFFFFF"
			           			borderColor="#315f94"
			           			borderWidth="1"
			           			borderRadius="3"
			           			width="${parent.width - 14}"
			           			height="${(parent.height - 7) - 24}"
			           			x="${(parent.width / 2) - (this.width / 2)}"
			           			y="24"
			           			name="roundRectIt">
			           			<method event="oninit">
									this.content.setAttribute("x", 0);
									this.content.setAttribute("y", 0);
									this.setAttribute("y", 24);
								</method>
					            <view width="${parent.width - 10}" height="${parent.height - 10}" name="removeLayout" x="5" y="5">
					            <method event="oninit">
									this.setAttribute("y", 5);
									this.setAttribute("visible", false);
								</method>
					            <view width="${parent.width}" height="${parent.height}" clip="true">
					                <dragtree id="treeHome" datapath="navHome:/root"
					                    	nodepath="node" nodeclass="dragfiletreenode"
					                    	width="100%"
					                    	showtreelines="false"
					                    	floaterref="${floater6}" multiselect="false">
					                    	
					                    <attribute name="newRoundRectWidth" value="311" />
					                    	
									    <method event="oninit">
											this.getAttribute('floaterref').setAttribute('_dragtreeref', this);				            
								            Debug.write("************treeSett oninit **********", this.floaterref);
									    </method>
					                    <method event="onselect" args="sel">
					                       Debug.write("CURRENT SELECTION: ", this.getSelection());
					                       Debug.write("sel: ", sel);
					                       var selNode = sel.data;
					                       var projectName = selNode.attributes.name;
					                       var projectId = selNode.attributes.value;
					                       var type = selNode.attributes.type;
					                       Debug.write("node: " + selNode);
					                       Debug.write("node.name: " + projectName);
					                       Debug.write("node.id: " + projectId);
					                       
					                       if (type == 'project'){
						                       controller.getProjectReadOnly(projectId);
						                       classroot.setAttribute("currProjectID", projectId);
						                       classroot.setAttribute("currProjectName", projectName);
						                       projectTabs.setAttribute("projectIDConstants", projectId);
						                       openprojectbutton.setAttribute("opacity", 1);
					                       //canvas.setCaptions('Current Project', selNodeName);
					                       }else if (type == 'add-project'){
												var params = new LzParam();
												params.addValue('action', 'addProject');
												params.addValue('name', 'untitled');
												params.addValue('description', 'untitled');
												dbProject.setQueryString(params);
												dbProject.doRequest();
												//Shift Open Button etc
												classroot.shiftYPosList(null, "addone");              		
					                       }
					                     </method>   
										<method event="ondragdrop" args="resp">
											<![CDATA[
											Debug.write("tree Home Drag Drop start working!!!!!!!!!!!!!!!!!");
											var dragees = resp.draggedNodes;
											var fromNode = resp.from;
											Debug.write("drag method for project tree");
											
											var toNode = resp.to;
											Debug.write("toNode: ", toNode);
					
											/*var selectedNode = classroot.treeDbs.getAttribute("currselnode");
					        	    		Debug.write("DB openned A DB view exists already.", 
					        	    				classroot.maintab.currProjectId, 
					                    			selectedNode.datapath.p.getAttr("name")); 
											*/
											//var fromNode = selectedNode;
											Debug.write("fromNode: ", fromNode);
											
											if (resp.type=="external") {
											      // Dragging a node from a tree to an outside drop target
											   	  
											   	  switch (resp.to) {
											       	case classroot.rubbishView.rubbishBinIcon:
											        	classroot.rubbishView.setAttribute("isFull", true);
												        Debug.write(">>>>>>># Dropping into rubbish bin");
												        Debug.write(">> clearing text");
												        txtProjectIDHere.setAttribute("text", "");
												        txtProjectDescIDHere.setAttribute("text", "");
												        for (var i in dragees) {
												            var isPresent = false;
											    	        classroot.copyFrom_dp.setPointer(dragees[i]);
											        	    var draggedName = classroot.copyFrom_dp.getNodeAttribute("name");
											            	var draggedID = classroot.copyFrom_dp.getNodeAttribute("id");
												            var draggedType = classroot.copyFrom_dp.getNodeAttribute("type");
												            Debug.write("Dragged name is: "+ draggedName + ", id: " + draggedID + ", type: " + draggedType);
											    	        
											    	        if (draggedType == 'project'){
											    	        	var projectID = classroot.copyFrom_dp.getNodeAttribute("value");
											    	       		Debug.write(" Project ID ==>> "+  projectID);
												            	controller.recycleProject(projectID);
																
																var count = projectTabs.newtabpaneIdArray.length;
													            for (var i=0;i < count;i++) {
												    	            if(projectTabs.newtabpaneIdArray[i] == projectID)
												        	        {
												            	    	newTab = projectTabs.newtabpaneArray[i];
												            	    	newTab.destroy();
												            	    	newTab = null;
												            	    	Debug.write("Tab",projectId, newTab.text, "has openned already, CLOSE this one.");					                
															        }
													            }
															}								
												            toNode = recycleData.getFirstChild();
															classroot.copyTo_dp.setPointer(toNode);
												            classroot.copyTo_dp.addNodeFromPointer(classroot.copyFrom_dp);
												            classroot.copyFrom_dp.deleteNode();
											         	}
												        // Update the recycle bin dataset.
												        controller.updateProjectRecycleBin();
												         //Shift Open Button etc
														classroot.shiftYPosList("subtractone");
												         break;
												}
										}
										]]>
									</method>					                                      
					                </dragtree>
					                <smartvscollbar repmanager="nodeinst" /> <!-- SL:09/05/2006 Ticket LZ_SUP #IMU-28097-761 -->
					            </view>
							
							<!-- Description Panel -->
							<view name="previewPanel" width="${parent.width}">
								<view width="${parent.width}">
						            <simplelayout axis="y" spacing="3" />
						            <mdn_button datapath="gui:/gui-labels/btn-open/@label" width="${immediateparent.width - 70}" height="24" align="center" opacity="0.5" id="openprojectbutton">
								    	<method event="onclick">
											classroot.openProjectTab();
								    	</method>	
								    	<hinttip tipid="PROJECTS-open" />	            
						            </mdn_button>						             
								</view>
								<view name="nameView" y="85">
									<simplelayout axis="x" spacing="1" />
									<text datapath="gui:/gui-labels/lbl-name/@label" fontstyle="bold" fgcolor="0x5A5A5A" resize="true" />
									<text name="txtProjectNameEdit" id="txtProjectIDHere" datapath="dbProjectReadOnly:/root/node/@name" enabled="true" fgcolor="0x5A5A5A">
									</text>
									<text name="txtProjectIdEdit" width="0" datapath="dbProjectReadOnly:/root/node/@id" visible="false">
									</text>
									<hinttip tipid="PROJECTS-name" />
								</view>
								<view name="descView" y="105">
									<text width="80" datapath="gui:/gui-labels/lbl-description/@label" fontstyle="bold" fgcolor="0x5A5A5A" />
									<text name="txtProjectDescriptionEdit" id="txtProjectDescIDHere" datapath="dbProjectReadOnly:/root/node/@description" multiline="true" y="15" fgcolor="0x5A5A5A" width="${parent.parent.width}" />
									<hinttip tipid="PROJECTS-description" />
								</view>
							</view>
							<view name="importPanel" width="${parent.width}" y="${(parent.height - parent.rubbishBin.height - this.height) - 85}">
								<simplelayout axis="y" spacing="2"/>
								<mdn_button datapath="gui:/gui-labels/btn-import/@label" width="${immediateparent.width - 70}" height="24" align="center"> 
					            	<method event="onclick">
					            		<![CDATA[	
											Debug.write('browse.onclick');
											projectFileProgressBar.setValue(0);
											projectFileUpload.browse();	
										]]>
					            	</method>
					            	<hinttip tipid="Home-project-import" />
					            </mdn_button>							
								<view id="projectFileProgressBar" width="200" height="24" bgcolor="#666666" visible="false">
									<view x="1" y="1" width="198" height="22" bgcolor="#FFFFFF"/>
									<view name="status" x="1" y="1" height="22" bgcolor="#BBBBFF"/>
									<text name="percent" x="5" y="3" fontstyle="bold" fgcolor="#6666FF"/>
									<method name="setValue" args="value">
										<![CDATA[
											status.setAttribute('width', value * 198 / 100);
											percent.setText(Math.round(value) + '%');
										]]>
									</method>
								</view>
								<text id="projectFileUploadError" text="" fgcolor="red" fontstyle="bold" resize="true"/>							
							</view>					
					        
							<!-- RubbishBin Panel -->
					        <view name="rubbishBin" height="50" width="${parent.width}" datapath="gui:/gui-labels" y="${(parent.height - this.height) - 5}">
					            <simplelayout axis="y" spacing="3" />
					      		<binView align="left" whichTree="${treeHome}" >
						 			<method event="oninit">
							            classroot.setAttribute("rubbishView",this);
															            
							            Debug.write("rubbishView this.whichTree", this.whichTree);
								    </method>      			
					      		</binView>
					        </view>
					        </view>				
						</roundrect>
						</view>
						</roundrect>
					      
					        <!-- <view name="dummyspacer" height="10" valign="bottom"/> -->
				        <!-- 
				        </view>
					</view>
				</view>
			</view>
			 -->	
	    </view>    
	</class>
</library>