<library>
	<script><![CDATA[
		function getTagNum(datapointer, datapath){
			//var tagcount=0;
			datapointer.setAttribute('xpath',datapath);
			var nodecount=datapointer.getNodeCount();
			Debug.write("nodecount", nodecount);
			return nodecount;
		}
		]]>
	</script>	
   <!-- <include href="../lib/mdn_roundrect.lzx" /> -->
   <!-- The Web Service First Page class. -->
   <class name="webServices" width="${projectTabs.currTab._projectView._rightView.width - 1}" 
        height="${projectTabs.currTab._borderView._borderView._projectView._rightView._upperPart.height - projectTabs.currTab._borderView._projectView._rightView._upperPart._header.height - 1}" extends="mdn_roundrect" >
    <attribute name="maintab" />
    <attribute name="wsdl_url" type="text" value="" />
    <method name="clearData">
		backView.addView.addTabs.wsdlUrlTab.setAttribute('selected', true);
    </method>
    <datapointer xpath="dbSampleWebServices:/*" rerunxpath="true"
	        ondata="processData();" onerror="canvas.showError(this);"
	        ontimeout="canvas.showTimeout();">
        <method name="processData">
	        var p = dbSampleWebServices.getPointer();
	        p.selectChild(2);
	        Debug.write("***Web Service data: " + p);   	
        </method>
    </datapointer>
    <view name="backView" width="${immediateparent.width}" height="${immediateparent.height}" x="20">
        <simplelayout axis="y" spacing="10"/>
        <view name="addView" width="${immediateparent.width}" height="${immediateparent.height - 130}">
	    	<tabs name="addTabs" width="${immediateparent.width-30}" height="505" tabspacing="1" bgcolor="0x4386cc">
	    		<attribute name="tabclass" value="tabWhiteTab" type="string" />
	    		<method event="oninit">
					<![CDATA[
               			//Pushes the first tab in
						this.subviews[0].layouts[0].setAttribute("inset", 15);
					]]>
				</method>
	    		<tabpane width="${immediateparent.width}" height="${immediateparent.height}" selected="true">
	    			Web Services URL
	    			<method event="onselect" reference="this.tab">
                    	if (this.tab.selected) {
                    		txtWSDLUrl.setAttribute("text", classroot.wsdl_url);
						}
					</method>
	    			<view name="WSDLView" width="${immediateparent.width}" y="19">
			            <simplelayout axis="x"/>
			            <text datapath="gui:/gui-labels/lbl-add-web-service-enter-WSDL-URL/@label" width="150" fgcolor="0x454545"></text>
			            <edittext id="txtWSDLUrl" width="400" text="" />           
			        </view>
	    		</tabpane>
	    		<tabpane name="wsdlUrlTab">
	    			Sample Web Services
	    			<method event="onselect" reference="this.tab">
                    	if (this.tab.selected) {
                    		classroot.setAttribute("wsdl_url", txtWSDLUrl.getText());
							txtWSDLUrl.setAttribute("text", "");
							//Debug.write("Selected WOOP!", classroot.wsdl_url);					
						}
					</method>
		            <view name="sampleWebServices" width="${immediateparent.width}" height="${immediateparent.height}">  
	    				<ftgrid id="sampleWebServicesGrid"  width="670" height="300" 
	    					datapath="dbSampleWebServices:/root">
	    					<method event="oninit">
	    						this._scrx.setAttribute("visible", false);
	    					</method>
						    <ftgridcolumn width="100" >Provider/Name
								<text datapath="@provider"/>
						    </ftgridcolumn>
						    <ftgridcolumn width="100"> Description
						    	<text datapath="@description"/>
						    </ftgridcolumn>
						    <ftgridcolumn width="474"> URL
						    	<text datapath="@url"/>
						    </ftgridcolumn>
						    <method event="onselect">
								  <![CDATA[
								   var sel = this.getSelection();
								   var dp = sel[0];
								   var url = dp.p.getAttr('url');//attributes.url;
								   if (url != null){
										thirdPartyWebServicesGrid.clearSelection();
								   }
								   ]]>
                			</method>
						</ftgrid>
											
		            </view>
	    		</tabpane>
	    		<!-- <tabpane>
	    			Local File System
	    		</tabpane> -->
	    	</tabs>
    	</view>
    	<view width="${immediateparent.width}" height="30" align="right">
            <simplelayout axis="x" spacing="10"/>
            <mdn_button align="right" datapath="gui:/gui-labels/btn-next/@label" width="80">
                <method event="onclick">
                	<![CDATA[
					var WSDLUrl = txtWSDLUrl.getText();
					var selectedLine = sampleWebServicesGrid.getSelection()[0];
					var url = "";
					if (WSDLUrl != null && WSDLUrl != ''){
						url = WSDLUrl;
					}else if (selectedLine != null){
						var nodename = selectedLine.getNodeName();
						Debug.write('***************nodename: ' + nodename);
						url = selectedLine.p.getAttr('url');
						Debug.write('***************url: ' + url);

    					//var xpathUrl = selectedLine.xpathQuery('/root/node/@url');
    					//Debug.write("=====***selectedLine node: " + xpathUrl);
				
					}else{
						selectedLine = thirdPartyWebServicesGrid.getSelection()[0];
						var nodename = selectedLine.getNodeName();
						Debug.write('***************nodename: ' + nodename);
						url = selectedLine.p.getAttr('url');
						Debug.write('***************url: ' + url);

    					//var xpathUrl = selectedLine.xpathQuery('/root/node/@url');
    					//Debug.write("=====***selectedLine node: " + xpathUrl);
				
					}	
					
					if (url == "" || url == null || url == "undefined"){
						nextWebServiceError.setAttribute('text', "Please either enter or select one URL.");
					}
					else{										
						webServiceUrlConstants = url;						
						Debug.write("Url: " + url);
						controller.getWebServiceDescription(url);
						controller.getWebServiceOperation();
						classroot.maintab.databaseCtrler.displayWebServiceSecondPage();
						webServiceSecondView.clearData();
					}
					mdnIsLoading.letsOpenLoading("Retrieving Web Service Information...");
					]]>
                </method>
            </mdn_button>    
	       	<view name="errorView" width="${immediateparent.width}" height="24">
	           	<simplelayout axis="x"/>
	           	<text id="nextWebServiceError" text="" fgcolor="red" fontstyle="bold" resize="true"></text>
	       	</view>	                      		
    	</view>
    </view>
   </class>
   
   
   <!-- The Web Service Second Page class. -->
   <class name="webServiceSecondPage" width="${projectTabs.currTab._borderView._projectView._rightView.width - 1}" 
        height="${projectTabs.currTab._borderView._projectView._rightView._upperPart.height - projectTabs.currTab._borderView._projectView._rightView._upperPart._header.height - 1}" extends="mdn_roundrect" >
	    
	    <attribute name="maintab"/>
	    
	    <method name="clearData">
	        var point = dbWebServiceDescription.getPointer();
	        point.selectChild(2);
	        point.setNodeAttribute('id', null);
	        point.setNodeAttribute('name', '');
			point.setNodeAttribute('description', '');
	        saveWebServiceOperationError.setAttribute('text', "");
	    </method>        
	    <datapointer xpath="dbWebServiceOperationReq:/*" rerunxpath="true"
		        ondata="processData();" onerror="canvas.showError(this);"
		        ontimeout="canvas.showTimeout();">
	        <method name="processData">
		        //var p = dbWebServiceOperationReq.getPointer();
		        //p.selectChild(2);
		        //Debug.write("***Web Service data: " + p); 
		        var result = this.getNodeText();
		        saveWebServiceOperationError.setAttribute('text', result);  	
		        var projectId = this.getNodeAttribute('projectId');
		        
		        if (result == "OK"){
		        	controller.updateDatabases(projectId);
		        }
	        </method>
	    </datapointer>	   
	   <view name="backView" width="${immediateparent.width}" height="${immediateparent.height}" x="20" y="20">
	       <simplelayout axis="y" spacing="10"/>
	       
	       <view height="100">
	       	    <simplelayout axis="y" spacing="2"/>
	       	    <!-- <text datapath="gui:/gui-labels/lbl-add-web-service/@label" fontstyle="bold" width="200"/> -->
	            <view>
	                <simplelayout axis="x"/>
	                <text datapath="gui:/gui-labels/lbl-web-service-name/@label" width="200" fgcolor="0x454545" />
	                <edittext id="txtWebServiseName" datapath="dbWebServiceOperation:/root" text="$path{'@name'}" width="200"/>
	            </view>
	            <view>
	                <simplelayout axis="x"/>
	                <text datapath="gui:/gui-labels/lbl-description/@label" width="200" fgcolor="0x454545" />
	                <edittext id="txtWebServiseDescription" datapath="dbWebServiceOperation:/root" text="$path{'@description'}" width="400"/>
	            </view>
				<view height="10"/>
		       	<view name="WSDLView" width="${immediateparent.width}" height="24">
		           	<simplelayout axis="x"/>
		           	<text text="Binding Information" width="150" fgcolor="0x454545"></text>
		       	</view>
	       </view>  
	       
	       
	       <view width="688" height="293" bgcolor="0x777a7f" 
	       			visible="${this.height >= 10 ? true:false}">

	        <view width="${immediateparent.width - 2}" x="1" y="1"
	                    height="291" clip="true" bgcolor="white">
	            <checktree id="webServiceTree" datapath="dbWebServiceDescription:/root"
					nodepath="node" nodeclass="checktreenode" selectable="true"
					width="${immediateparent.width}"
					showtreelines="false">
					<attribute name="newRoundRectWidth" value="298" />
					<method event="onselect" args="sel">
						Debug.write("Current selection: " + this.getSelection());						
					</method>
	            </checktree>
	            <smartvscollbar repmanager="nodeinst" />
	        </view>			
		  	</view>
		  	<view width="${immediateparent.width}" height="30" align="right">
				<simplelayout axis="x" spacing="10"/>
				<mdn_button align="right" datapath="gui:/gui-labels/btn-back/@label" width="80">
	                <method event="onclick">
	                	<![CDATA[
				           	controller.getAllSampleWebServices();
                        	controller.getAllThirdPartyWebServices();
                        	classroot.maintab.databaseCtrler.displayAddWebServices();	
						]]>
	                </method>
				</mdn_button> 
				
				<mdn_button align="right" datapath="gui:/gui-labels/btn-save/@label" width="80">
	                <method event="onclick">
	                	<![CDATA[
				           	var allCheckedNodes = webServiceTree.getAllCheckedNodes();
				           	//var operations = new Array();
				            //var count = allCheckedNodes.length;
				            var selectedNode = allCheckedNodes[0];
				            /*for (var i=0;i< count;i++) {
			    	            operations.push(allCheckedNodes[i].getAttr("name"));
				            }*/
				            var port = selectedNode.parentNode.getAttr("name");
				            var service = selectedNode.parentNode.parentNode.getAttr("name");
				            var operation = selectedNode.getAttr("name");
				            Debug.write("service", service, "port", port, "operation: " + operation);
							
							if (operation == null || operation == "undefined"){
								saveWebServiceOperationError.setAttribute('text', "Please select one operation."); 
							}
							else{							
		                		var name = txtWebServiseName.getText();
		                		var description = txtWebServiseDescription.getText();				            
	
			                    var pointer = dbWebServiceOperation.getPointer();
			                    var ok = pointer.selectChild(2);
					       		var id = pointer.getNodeAttribute("id");
	
					            controller.saveWebServiceOperation(id, name, description, webServiceUrlConstants, service, port, operation, classroot.maintab.currProjectId);
							}
						]]>
	                </method>
				</mdn_button> 				
				 
				<mdn_button align="right" datapath="gui:/gui-labels/btn-next/@label" width="80" visible="false">
		              <method event="onclick">
		              	<![CDATA[
							var allCheckedNodes = webServiceTree.getAllCheckedNodes();
							Debug.write("Current selection: " + allCheckedNodes);
							
							var operations = new Array();
							var services = new Array();
							var ports = new Array();
				            var count = allCheckedNodes.length;
				            for (var i=0;i< count;i++) {
			    	            operations.push(allCheckedNodes[i].getAttr("name"));
			    	            services.push(allCheckedNodes[i].getAttr("service"));
			    	            ports.push(allCheckedNodes[i].getAttr("port"));
				            }
				            
				            /*
				            var p = dbWebServiceDescription.getPointer();
				            p.selectChild(2);
				            Debug.write(p);
	                		var nodename = p.getNodeName();
							Debug.write("-------- nodename: " + nodename);				            
            				var url = p.p.getAttr('name');
            				Debug.write("-------- url: " + url);
				            */
				            Debug.write("webServiceUrlConstants: " + webServiceUrlConstants);
				            controller.getWebServiceDetails(webServiceUrlConstants, operations);
				            controller.getQueryCriteriaOfWebServiceDetails(webServiceUrlConstants, operations);
				            controller.getSimpleComps();
							controller.getNewQuery(null, "webservice");
							
							//load web service
							webServiceOperationConstants = operations[0];
							Debug.write("webServiceOperationConstants: " + webServiceOperationConstants);
							/*webServicesSoap.setAttribute("wsdl", webServiceUrlConstants);
							webServicesSoap.setAttribute("service", services[0]);
							webServicesSoap.setAttribute("port", ports[0]);
							webServicesSoap.setAttribute("autoload", false);
							webServicesSoap.remotecallFunc.setAttribute("funcname", webServiceOperationConstants);
							webServicesSoap.init();				            
				            webServicesSoap.remotecallFunc.init();
				            webServicesSoap.load();
				            */
				            
				            classroot.maintab.databaseCtrler.displayWebServiceThirdPage();
				            btnBackToSecondPage.setAttribute("visible", true);
				            txtWebServiseURL.setText(webServiceUrlConstants);
				            txtWebServiseOperation.setText(webServiceOperationConstants);
						]]>
		              </method>
				</mdn_button>  
		       	<view name="errorView" width="${immediateparent.width}" height="24">
		           	<simplelayout axis="x"/>
		           	<text id="saveWebServiceOperationError" text="" fgcolor="red" fontstyle="bold" resize="true"></text>
		       	</view>		           		
		  	</view>
	   </view>
       <datapointer xpath="dbWebServiceDescription:/root" rerunxpath="true"
	        ondata="processData();" onerror="canvas.showError(this);"
	        ontimeout="canvas.showTimeout();">
	        <method name="processData">
	            <![CDATA[
	            Debug.write("received access data: " + this.serialize());
				mdnIsLoading.letsCloseLoading();
	            ]]>
	        </method>
	    </datapointer>	   
   </class>  
   
   <dataset name="Resultset" />
   <dataset name="db_query_result"/>
   <!-- The Web Service Third Page class. -->
   <class name="webServiceThirdPage" width="${projectTabs.currTab._borderView._projectView._rightView.width - 1}" 
        height="${projectTabs.currTab._borderView._projectView._rightView._upperPart.height - projectTabs.currTab._borderView._projectView._rightView._upperPart._header.height - 1}" extends="mdn_roundrect" >
       <attribute name="maintab"/> 
	   <view name="backView" width="${immediateparent.width}" height="${immediateparent.height}" x="40" y="0">
	       <simplelayout axis="y" spacing="10"/>
	        <!-- 
	        	The top panel 
	        	Show the Name/description
	        -->  
	        <view height="120">
	       	    <simplelayout axis="y" spacing="2"/>
	       	    <text datapath="gui:/gui-labels/lbl-add-web-service-query/@label" fontstyle="bold" width="200"/>
	            <view>
	                <simplelayout axis="x"/>
	                <text datapath="gui:/gui-labels/lbl-web-service-query-name/@label" width="200"/>
	                <edittext id="txtWebServiseQueryName" datapath="dbQuery:/root/query" text="$path{'@name'}" width="200"/>
	            </view>
	            <view>
	                <simplelayout axis="x"/>
	                <text datapath="gui:/gui-labels/lbl-description/@label" width="200"/>
	                <edittext id="txtWebServiseQueryDescription" datapath="dbQuery:/root/query" text="$path{'@description'}" width="500"/>
	            </view>
	            <view>
	                <simplelayout axis="x"/>
	                <text datapath="gui:/gui-labels/lbl-web-service-url/@label" width="200"/>
	                <text id="txtWebServiseURL" width="500"/>
	            </view>
	            <view>
	                <simplelayout axis="x"/>
	                <text datapath="gui:/gui-labels/lbl-web-service-operation/@label" width="200"/>
	                <text id="txtWebServiseOperation" width="500"/>
	            </view>
	        </view>  
			<view width="${immediateparent.width-10}" height="${immediateparent.height - 300}" visible="${this.height >= 10 ? true:false}">
				<view width="${immediateparent.width}" x="0" y="0"
				            height="${immediateparent.height}" >
					<querybuilder id="qb_query_builder_select" width="${immediateparent.width}" 
					    height="${immediateparent.height}"  ><!-- queryType="select" -->
					</querybuilder >
				</view>			
		  	</view>
		  	<view width="${immediateparent.width}" height="30" align="right">
				<simplelayout axis="x" spacing="10"/>
				<mdn_button id="btnBackToSecondPage" align="right" datapath="gui:/gui-labels/btn-back/@label" width="80" visible="false">
	                <method event="onclick">
	                	<![CDATA[
							Debug.write("webServiceUrlConstants: " + webServiceUrlConstants);
							controller.getWebServiceDescription(webServiceUrlConstants);
							classroot.maintab.databaseCtrler.displayWebServiceSecondPage();	
						]]>
	                </method>
				</mdn_button> 
				<mdn_button align="right" datapath="gui:/gui-labels/btn-test-web-service/@label" width="180">
		              <method event="onclick">
		              	<![CDATA[
							//webServicesSoap.onload();
							//webServicesSoap.remoteInvoke.setAttribute("funcname", "keywordSearchRequest");
							var loaded = webServicesSoap.getAttribute("isloaded");
							Debug.write("web Service loaded: " + loaded);
							

		                    var pointer = qb_query.getPointer();
		                    var ok = pointer.selectChild(2);
				       		var attribute = pointer.getNodeAttribute('field').split('.');
				       		var type = pointer.getNodeAttribute("valueOrCondition");
				       		
				       		if (type == "SIMPLE"){
								var params = webServicesSoap.getParams();	
			                    webServicesSoap.remotecallFunc.invoke(params);				       			
				       		}
				       		else{
					       		var obj = attribute[0];
			                    webServicesSoap.setAttribute('myobject1', new webServicesSoap.proto[obj]());
			                    Debug.write("webServicesSoap.myobject1 has been set:", webServicesSoap.getAttribute('myobject1'), global[ 'webServicesSoap' ][ 'myobject1']);
			                    
					       		while (ok){	        		
					        		
					        		var field = pointer.getNodeAttribute("field");
					        		var value = pointer.getNodeAttribute("value");		        		
					        		var pos = field.indexOf(".");
					        		var name = field.substring(pos+1);
					        		
			                        attribute = pointer.getNodeAttribute('field').split('.');
			                        
			                        
			                        global[ 'webServicesSoap' ][ 'myobject1'][attribute[1]] = value;
			                        Debug.write("global[ 'webServicesSoap' ][ 'myobject1'][attribute[1]]", global[ 'webServicesSoap' ][ 'myobject1'][attribute[1]]);
			                        ok = pointer.selectNext();
			                    }
			                     Debug.write("webServicesSoap.myobject1 has been set in parameters:", webServicesSoap.getAttribute('myobject1'), global[ 'webServicesSoap' ][ 'myobject1']);
			                     var params = [];
			                     params[0] = webServicesSoap.myobject1;
			                     Debug.write(params);
			                     webServicesSoap.remotecallFunc.invoke(params);							
						 	}	
						]]>
		              </method>
				</mdn_button> 
				
				<mdn_button align="right" datapath="gui:/gui-labels/btn-save/@label" width="80">
		              <method event="onclick">
		              	<![CDATA[
                        var dbQueryP = dbQuery.getPointer();
			            dbQueryP.selectChild(2);
			            Debug.write(dbQueryP);
			            var queryId = dbQueryP.p.getAttr('queryID');
			            Debug.write('SAVE QUERY BUTTON CLICKED ++ queryID: ' + queryId  );
                		
                		var saveState = "0";//DataObject.NEW default
                		if (queryId > 0){
                			saveState = "1";//DataObject.IN_DB
                		}else{
                			saveState = "0";//DataObject.NEW
                		}
                	
                		var queryName = txtWebServiseQueryName.getText();
                		var queryDescription = txtWebServiseQueryDescription.getText();
                        
                		
                		var p = qb_query.getPointer();
                		var ok = p.selectChild(2);
                		Debug.write("qb_query: " + p);
                		
						
		        		var valueOrConditions = [];
		        		var ids = [];
		        		var rows = [];
		        		var types = [];
		        		var useds = [];
		        		var indents = [];
		        		var parents = [];
		        		var numbers = [];
		        		var fields = [];
		        		var compIDs = [];	
		        		var comparisons = [];
		        		var values = [];
		        		var connections = [];
		        		var value2s = [];	// The second value field, 'value2'. It is only used and visible when
											//	dealing with the 'is between' and 'is not between' operators.					
		        		var groupings = [];
		        		var userInputSeqs = [];
		        		var userInputSeqs2 = [];
						
						var tableIndex = 0;
		        		
		        		while (ok){
							var id = p.getNodeAttribute("id");
		        			var row = p.getNodeAttribute("row");
		        			var type = p.getNodeAttribute("type");
		        			var used = p.getNodeAttribute("used");
		        			var indent = p.getNodeAttribute("indent");
			        		var valueOrCondition = p.getNodeAttribute("valueOrCondition");
		        			var number = p.getNodeAttribute("number");	
		        			var parent = p.getNodeAttribute("parent");		        		
			        		var field = p.getNodeAttribute("field");  			        		
			        		var compID = p.getNodeAttribute("compID");
		        			var comparison = p.getNodeAttribute("comparison");			        		
			        		var value = p.getNodeAttribute("value");  			        		
			        		var connection = p.getNodeAttribute("connection");
		        			var value2 = p.getNodeAttribute("value2");			        		
			        		var grouping = p.getNodeAttribute("grouping");
			        		var userInputSeq = p.getNodeAttribute("valueUserInput");
			        		var userInputSeq2 = p.getNodeAttribute("value2UserInput");
			        		
			        		ids[tableIndex] = id;
			        		rows[tableIndex] = row;
			        		types[tableIndex] = type;
							useds[tableIndex] = used;
							indents[tableIndex] = indent;
		        			valueOrConditions[tableIndex] = valueOrCondition;
		        			numbers[tableIndex] = number;
		        			parents[tableIndex] = parent;
		        			fields[tableIndex] = field;
		        			compIDs[tableIndex] = compID;	
			        		comparisons[tableIndex] = comparison;
			        		values[tableIndex] = value;
			        		connections[tableIndex] = connection;
			        		value2s[tableIndex] = value2;
			        		groupings[tableIndex] = grouping;
			        		userInputSeqs[tableIndex] = userInputSeq;
			        		userInputSeqs2[tableIndex] = userInputSeq2;
		        			
		        			tableIndex++;
		        			ok = p.selectNext();
		        		}		
		        						
		        		controller.saveQuery(saveState, null, queryId, queryName, queryDescription, null, "webservice", webServiceUrlConstants, ids, rows, types, useds, indents, valueOrConditions, parents, numbers, fields, compIDs, comparisons, values, connections, value2s, groupings, userInputSeqs, userInputSeqs2, webServiceOperationConstants, null);							
						]]>
		              </method>
				</mdn_button>	            		
		  	</view>
<!-- Query Result -->
			<view width="${immediateparent.width}" height="220">
				<simplelayout axis="y" spacing="10"/>
				<!-- <ftdynamicgrid datapath="qb_query_result:/root"
				               contentdatapath="resultset/row"
				               metadatapath="metadata/column"
				               height="125" rowheight="20">
				</ftdynamicgrid> -->
		        <view id="gridview" layout="axis: y" initstage="defer">
					    <ftdynamicgrid datapath="db_query_result:/"
					                   contentdatapath="resultset/row"
					                   metadatapath="metadata/column"
					                   height="125" rowheight="20"
					                   id="myGrid">
					    </ftdynamicgrid> 
				</view>
		    </view>			  	
	   </view>
   </class>     

			    
    <soap name="webServicesSoap" id="webServicesSoap"><!-- wsdl="http://soap.amazon.com/schemas2/AmazonWebServices.wsdl" -->
        <attribute name="isloaded" value="false" />
        <!-- <attribute name="handlerDel" value="null" type="expression" /> -->
        <attribute name="myobject1" value="null" type="expression" />
        
        <method name="init">
			LzSOAPService.__LZloader.timeout = 60000;
			Debug.write("================ INIT webServiceOperationConstants: " + webServiceOperationConstants);
			Debug.write('================ INIT wsdl at ' + this.wsdl);
			super.init();
		</method>
		
		<method name="getParams">
			<![CDATA[    

       		var params = [];
             // You can find full source for LzSOAP.prototype.invoke in 
            // lps/components/rpc/library/soap.js.
            var save = LzSOAP.prototype.invoke;

            //------------------------------------------------------------------
            // Invoke knows about paramter names and types. See source code at
            // com.laszlosystems.remote.soap.ClientSOAPService.createObjectProgram() 
            // for details. Entry point for all soap calls (including
            // fetching/parsing WSDL) is in 
            // com.laszlosystems.data.SOAPDatasource.
            //------------------------------------------------------------------


            LzSOAP.prototype.invoke = function (delegate, args, header, opts,
                                                secure, secureport) {

                var parts = opts['parts'];
                for (var i=0; i < parts.length; i++) {
                    var p=parts[i]
                    var portType = p[1];
                    Debug.write('  param ' + i + ') name:', p[0], "length: ", p[0].length , 'type:', portType);	 	 			
	 	 			
	 	 			
	 	 			var pointer = qb_query.getPointer();
	 	 			Debug.write("$$$$$$$$$", pointer);
	 	 			
					var ok = pointer.selectChild(2);                  
                    
                    var localPart = portType.getLocalPart();
                    var namespace = portType.getNamespaceURI();
                    
		       		while (ok){	        		
		        		var type = pointer.getNodeAttribute("valueOrCondition");
		        		var field = pointer.getNodeAttribute("field");
		        		var value = pointer.getNodeAttribute("value");		        		
		        		var pos = field.indexOf(".");
		        		var name;
		        		if (pos == -1)
		        			name = field;
		        		else 
		        			name = field.substring(pos+1);

		        		if (type == "SIMPLE"){
			        		if (name == p[0]){
	                        	pointer.setNodeAttribute("row", i+1);
	                        	pointer.setNodeAttribute("number", i+1);
								
	                        	Debug.write('  update param ' + i + ') name:', field);
	                        	
	                        	params[i] = value;                        	
	                        	break;
	                        }
	                    }
	                                           
		       			ok = pointer.selectNext();
		       			
		       		} 		       			       		
		       		                
                }
            }

            for (var k in this.proxy) {
                
                if (k == webServiceOperationConstants){
	                Debug.write('-- function:', k); 
	                this.proxy[k]();                       
                }        
            }  
            
            LzSOAP.prototype.invoke = save;  
            
            return params;    		
            
			]]>
		</method>
        <method event="onload">
            <![CDATA[
            Debug.write("================ LOAD webServiceOperationConstants: " + webServiceOperationConstants);
            
            Debug.write('================ LOAD wsdl at ' + this.wsdl);
            Debug.write('webServicesSoap soap service loaded');
            Debug.write('----------------');
            Debug.write('webServicesSoap proto:');
            
            //Debug.inspect(webServicesSoap.proto)
            var test = webServicesSoap.proto;
            //Debug.inspect(test);
            
            Debug.write("namespace: " + test.namespace);
            
            Debug.write("members: " + test[1]);
                     
            // You can find full source for LzSOAP.prototype.invoke in 
            // lps/components/rpc/library/soap.js.
            var save = LzSOAP.prototype.invoke;

            //------------------------------------------------------------------
            // Invoke knows about paramter names and types. See source code at
            // com.laszlosystems.remote.soap.ClientSOAPService.createObjectProgram() 
            // for details. Entry point for all soap calls (including
            // fetching/parsing WSDL) is in 
            // com.laszlosystems.data.SOAPDatasource.
            //------------------------------------------------------------------


            LzSOAP.prototype.invoke = function (delegate, args, header, opts,
                                                secure, secureport) {

                var parts = opts['parts'];
                for (var i=0; i < parts.length; i++) {
                    var p=parts[i]
                    Debug.write('  param ' + i + ') name:', p[0], 'type:', p[1]);            
                }
            }

            for (var k in this.proxy) {
                Debug.write('-- function:', k); 
	            this.proxy[k]();        
            }  
            
            LzSOAP.prototype.invoke = save;       
            
            /*
            var loadObj = LzSOAP.prototype.loadObject;
            LzSOAP.prototype.loadObject = function(delegate, opts, secure, secureport){
            	var service = opts['service']
    			var port = opts['port']
            	Debug.write('service:', service, ' port:', port);
            }  
            LzSOAP.prototype.loadObject = loadObj;              
            */        
                      
                      
            this.setAttribute('isloaded', true);
            ]]>
        </method>

        <handler name="onerror" args="error">
            Debug.write('error:', error);
        </handler>
        
  		<remotecall name="remotecallFunc" dataobject="Resultset" >

			<method name="init">
				super.init();
			</method>          
            
            <method event="ondata" args="value">
            <![CDATA[    
                Debug.write('one:', value);
                
                
				var element = LzDataNode.stringToLzData(value);				
				Debug.inspect("element", element);
				
				var dsPntr = Resultset.getPointer();
				Debug.write("dsPntr: ", dsPntr);					

				
				var howDeep = 0;
				
				this.n = new LzDataElement('dataset', {name: 'db_query_result'});

				this.metadata = new LzDataElement('metadata');
				
			
				db_query_result.appendChild(this.metadata);

           		var itemcount = getTagNum(dsPntr,"Resultset:/");
           		
           		var j =0;
           		for (var i=0; i<itemcount;i++){
           			j = i+1;
           			this.metadata.appendChild(new LzDataElement('column', {name:"column"+j, display:"  Title" + j + "  ", editable:"false", resizable:"true"}));
           		
           		}            		
           		
           		this.resultset = new LzDataElement('resultset');
          		
				db_query_result.appendChild(this.resultset);
				
				
				var nodename;
				var nodeText;
				var attributes;				

				var ok = true;//dsPntr.selectChild();

				i=1;
				while(ok){

					i--;

					while (ok){
						
						while ( ok ){								
								nodename = dsPntr.getNodeName();
								Debug.write("child " + i + " nodename: ", nodename);
								nodeText = dsPntr.getNodeText();
								Debug.write("child " + i + " nodeText: ", nodeText);

								if (nodename != "«undefined»"  && nodeText != "«undefined»"){
									this.row = new LzDataElement('row');
									this.resultset.appendChild(this.row);
									this.column = new LzDataElement('column'+i, {value: nodename + " : " + nodeText})
									this.row.appendChild(this.column);	
								}								

							ok = dsPntr.selectChild();	
							if (ok){
								i++;
							}														
						}
						ok = dsPntr.selectNext();
					
					}
					ok = dsPntr.selectParent();	
					ok = dsPntr.selectNext();							
				}
						
				gridview.completeInstantiation();
				
				Debug.write(this.n);
				Debug.write(this.metadata);
				Debug.write(this.resultset);
			]]>							                
            </method>
        
        </remotecall>
        
    </soap>			    
		
		
			    
	<class name="WebServiceUrlConstants" />
	<WebServiceUrlConstants id="webServiceUrlConstants" />   

	<class name="WebServiceOperationConstants" />
	<WebServiceOperationConstants id="webServiceOperationConstants" />
</library>