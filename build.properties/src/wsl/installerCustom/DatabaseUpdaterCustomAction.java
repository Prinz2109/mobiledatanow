package wsl.installerCustom;

import com.zerog.ia.api.pub.*;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

/*
 * Custom Action class to upgrade current MDN DB on users local system
 * It would be run on MDN installer's back-end  
 * This class contains some SQL update scripts
 */

public class DatabaseUpdaterCustomAction  extends CustomCodeAction
{
	public final static String CURR_DB_VER = "dbversion";
	public final static String MDN_VER = "MDN-version";
	
	private static boolean isSuccess = true;
	public static String ERROR_KEY = "Error";
	private static String error = "";

	/**
	 *		This is the method that is called at install-time.  The InstallerProxy
	 *  	instance provides methods to access information in the installer,
	 *  	set status, and control flow.
	 */
	public void install( InstallerProxy ip ) throws InstallException
	{
		/*
		 * Note: 
		 * Derby dosn't support RENAME COLUMN SQL statment
		 * Derby dosn't support ADD more than one columns together with one SQL statment
		 */

		/*
		 * Connect to MDN Database on user's install DB dir   
		 */
		String databaseDir = ip.substitute("$USER_INSTALL_DIR$$/$tomcat-5.5.25$/$webapps$/$dashwell.war$/$WEB-INF$/$classes$/$mdn.drby");
		String driver = "org.apache.derby.jdbc.EmbeddedDriver" ;
		String url = "jdbc:derby:" + databaseDir;
		
		/*
		 * 
		 * Some Update DB script templates(syntax).
		 * 
		 */
//		/* -------------- CREATE new TABLE script -------------- */
//		/* String createTblSql = "CREATE TABLE TBL_NAME ( FLD_NAME1 FLD_TYPE1, FLD_NAME2 FLD_TYPE2, ...)"; */
//		
//		/* -------------- MODIFYING COLUMN to an existing TABLE script -------------- */
//		/* String modifyCol = "ALTER TABLE table_name MODIFY column_name column_type"; */
//		/* String modifyCols = "ALTER TABLE table_name MODIFY ( column_1  column_type, column_2  column_type, ... )";*/
//		
//		/* -------------- ADD COLUMN to an existing TABLE script -------------- */
//		/* String addCol = "ALTER TABLE table_name ADD column_name column-definition";*/
//		
//		/* -------------- DROP COLUMN in existing TABLE script -------------- */
//		/* String dropCol = "ALTER TABLE table_name DROP COLUMN column_name"; */
//		
//		/* -------------- INSERT default DATA script -------------- */
//		/* String insertDataSql = "INSERT INTO TBL_NAME VALUES(valueInt, 'valueStr', ... )";*/
//		
//		/* -------------- UPDATE default DATA script -------------- */
//		/* String updateData = "UPDATE table_name  SET column_name1 = value1 [, column_name2 = value2 ...] WHERE FilterCondition1 [AND | OR FilterCondition2 ...]"; */
//		
//		/* -------------- DELETE DATA script -------------- */
//		/* String deleteData = "DELETE FROM table_name WHERE FilterCondition"*/
		
		//SQL update scripts for Version 1 to 2 .......
		/* create new tabel in DB ENT_GROUP_ENTITY_PERMISSION */
		String createGroupTblPermSQL = "CREATE TABLE TBL_GROUP_ENTITY_PERMISSION ( " +
		 	"FLD_ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY  (START WITH 1 ,INCREMENT BY 1), " +
		 	"FLD_GROUPID BIGINT NOT NULL, " +
		 	"FLD_ENTITY_ID BIGINT NOT NULL )";
		String groupTblPermIndexSQL = "CREATE UNIQUE INDEX SQL071026165746491 ON TBL_GROUP_ENTITY_PERMISSION (FLD_ID ASC)";
		String groupTblPermIndexOnPkSQL = "ALTER TABLE TBL_GROUP_ENTITY_PERMISSION ADD CONSTRAINT SQL071026165746491 PRIMARY KEY (FLD_ID)";
		String groupTblPermNextKeySQL = "INSERT INTO TBL_NEXTKEY VALUES ('TBL_GROUP_ENTITY_PERMISSION',1)";
		/* Remove FLD_CANADD, FLD_CANEDIT, FLD_CANDELETE columns */
		String dropCanAddColSQL = "ALTER TABLE TBL_GROUPDATAVIEW DROP COLUMN FLD_CANADD";
		String dropCanEditColSQL = "ALTER TABLE TBL_GROUPDATAVIEW DROP COLUMN FLD_CANEDIT";
		String dropCanDeleteColSQL = "ALTER TABLE TBL_GROUPDATAVIEW DROP COLUMN FLD_CANDELETE";
		/*-------------------------------------------------------*/
		
		/*
		 * All SQL Statements must be execute
		 */
		String currentVersion =null;
		try {
			Class.forName(driver);
			Connection con = DriverManager.getConnection(url, null, null);
			
			String dbConfigFile = ip.substitute("$USER_INSTALL_DIR$$/$tomcat-5.5.25$/$webapps$/$dashwell.war$/$WEB-INF$/$classes$/$wsl$/$config$/$mdn$/$dbInstallerInfo.conf" );
			Properties props = new Properties();

			props.load(new FileInputStream(dbConfigFile));
			currentVersion = props.getProperty(CURR_DB_VER);

			if(currentVersion != null && !currentVersion.equals("")){
				List sqlList = new ArrayList();

				if(currentVersion.equals("1")){
					sqlList.add(createGroupTblPermSQL);
					sqlList.add(groupTblPermIndexSQL);
					sqlList.add(groupTblPermIndexOnPkSQL);
					sqlList.add(groupTblPermNextKeySQL);
					
					sqlList.add(dropCanAddColSQL);
					sqlList.add(dropCanEditColSQL);
					sqlList.add(dropCanDeleteColSQL);
					
					upgradeDb(con, sqlList);
					
					if(isSuccess){
						props.setProperty(DatabaseUpdaterCustomAction.CURR_DB_VER, "2");//set new version after modified the DB
						props.setProperty(DatabaseUpdaterCustomAction.MDN_VER, "2.0.0");//TODO: change to next version
						props.store(new FileOutputStream(dbConfigFile), "Upgrade MDN database from ver 1 to 2 Successfully");
					}else{
						props.setProperty(DatabaseUpdaterCustomAction.MDN_VER, "2.0.0");//TODO: change to next version
						props.store(new FileOutputStream(dbConfigFile), "Note: Some error occured while executing SQL statements; \n" + error);
					}					
					
//					/* sqlList for prevoise versions consists all update SQL scripts ,
//					 * So any new sql update script must be add to all last versions sqlList*/
//					
//					upgradeDb(con, sqlList);
//					
//					props.setProperty(CURR_DB_VER, "3");
//					//props.setProperty("preDbversion", "1");
//					
//					props.store(new FileOutputStream(dbConfigFile), "Upgrade MDN database from ver 1 to 3");
//					
//				}else if(currentVersion.equals("2")){
//					sqlList.add(sql2);
//					sqlList.add(sql3);
//					
//					upgradeDb(con, sqlList);
//					
//					props.setProperty(CURR_DB_VER, "3");
//					//props.setProperty("preDbversion", "2");
//					
//					props.store(new FileOutputStream(dbConfigFile),  "Upgrade MDN database from ver 2 to 3");
				}
			}
		} catch (ClassNotFoundException e1) {
			e1.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void upgradeDb(Connection con, List<String> sqlList){
		for(int i=0; i<sqlList.size(); i++){
			String sql = sqlList.get(i);
			try {
				PreparedStatement stm = con.prepareStatement(sql);
				stm.execute();			
				System.out.println("Done Successfully : " + sql);
			} catch (SQLException e) {
				System.out.println("Faild : " + sql);
				isSuccess = false;
				error += " Faild[" + sql + "] , Because of ["+ e.getMessage() + "] \n";
				e.printStackTrace();
			}		
		}
	}
	
	public void uninstall( UninstallerProxy up ) throws InstallException
	{
	}
	
	public String getInstallStatusMessage()
	{
		return "";	
	}
	
	public String getUninstallStatusMessage()
	{
		return "";	
	}
}