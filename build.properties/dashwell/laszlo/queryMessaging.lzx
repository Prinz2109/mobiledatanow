<library>
   <class name="newMsgView" width="${projectTabs.currTab._borderView._projectView._rightView.width - 1}" 
        height="${projectTabs.currTab._borderView._projectView._rightView._upperPart.height - projctTabs.currTab._borderView._projectView._rightView._upperPart._header.height - 1}">
        
        <attribute name="maintab"/>
        <attribute name="qb_query_builder_message_new"/>
        <attribute name="txt_qb_sql_new"/>
        <attribute name="initialLoadColumns" type="boolean" value="true"/>
        <attribute name="previousView" type="string" value="null"/>
        <attribute name="viewChanged" type="boolean" value="false"/>
        <attribute name="initialLoad" type="boolean" value="true"/>
        
        <attribute name="currentUrl" type="string" value="null"/>
        <attribute name="currentService" type="string" value="null"/>
        <attribute name="currentPort" type="string" value="null"/>
        <attribute name="currentOperation" type="string" value="null"/>
        
        <attribute name="previousUrl" type="string" value="null"/>
        <attribute name="previousOperation" type="string" value="null"/>
        
        <!-- <attribute name="previousQuery" type="string" value="null"/> -->
 		<!-- <method event="oninit">
      		this.setAttribute("qb_query_builder_message_new", newMsg.newMsgTabs.tabqbN.content.qbSliders.criteriaN.qb_query_builder_message_n);
    	</method> -->       
        <method name="clearData">       	
			newMsg.newMsgTabs.newMsgTabp.setAttribute('selected', true);
			if (this.initialLoad == false){
				newMsg.newMsgTabs.newMsgTabp.name.nameTxt.setText('');
	          	newMsg.newMsgTabs.newMsgTabp.description.txtDesc.setText('');
	          	newMsg.newMsgTabs.newMsgTabp.addDBN.cbxDbN.clearSelection();
	          	//cbxWebServ.clearSelection();
	          	newMsg.newMsgTabs.newMsgTabp.addVTN.cbxQueryN.clearSelection();
				newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.setAttribute("visible", false);
		        newMsg.newMsgTabs.newMsgTabp.timeout.timeoutTxtN.setText('');
				newMsg.newMsgTabs.newMsgTabp.addQTN.qTypeN.selectItem("1");//clearSelection();
	          	
	          	newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.cbxEmailAddressN.clearSelection();
	          	newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.txtEmailKeyN.setText('');
	          	newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtSmsKeyN.setText('');
	          	newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImKeyN.setText('');
	          	newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.txtEmailDisplayResultN.setText('');
		        newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.cbxMobileNumberN.clearSelection();
	        	newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtMobileDisplayResultN.setText('');
		        newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.cbxImNameN.clearSelection();
		        newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImDisplayResultN.setText('');
		        
				newMsg.newMsgTabs.newMsgTabp.datasource.dsStatusN.selectItem("1");
				newMsg.newMsgTabs.newMsgTabp.addQTN.setVisible(true);
				newMsg.newMsgTabs.newMsgTabp.addDBN.setVisible(true);
				newMsg.newMsgTabs.newMsgTabp.addVTN.setVisible(true);
				newMsg.newMsgTabs.newMsgTabp.addWS.setVisible(false);				
				
				
				newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.responseView.newResponseFormatTxtAreaN.setText('');
				newMsg.newMsgTabs.msgResultTab.msgHolderView.newEnterFormatMessageView.newEnterFormatMessageTxtN.setText('');
				newMsg.newMsgTabs.msgTestTab.msgHolderView.userInputView.userInputTxtN.setText('');
				
				newMsg.newMsgTabs.qResultTab1.resultGridN.setVisible(false);
				newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.wsResultFormat.setVisible(false);
				newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.wsResultFormat2.setVisible(false);														
				newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.dbBtnView.setVisible(true);
				
	          	newMsg.errorView.txtErrorMsgQN.setText('');
	          	this.txt_qb_sql_new.setText('');
	          	newMsg.newMsgTabs.qResultTab1.qResultView.wholeUserInputView.txtUserInput.setText(''); 
	         }
	         this.setAttribute("initialLoad", false);
        </method>
	    <view name="newMsg" width="638" height="${immediateparent.height - 80}" x="1" y="1" >
           <tabs name="newMsgTabs" width="${immediateparent.width}" height="505" tabspacing="1" bgcolor="0x4386cc">
                <attribute name="tabclass" value="tabWhiteTab" type="string" />
                <method event="oninit">
					<![CDATA[
               			//Pushes the first tab in
						this.subviews[0].layouts[0].setAttribute("inset", 15);
					]]>
				</method>
                <tabpane datapath="gui:/gui-labels/tab-properties/@label" name="newMsgTabp">
                <hinttip tipid="ENDUSERACCESS-msgquery-Properties" />
                    <method event="onselect" reference="this.tab">
                    	if (this.tab.selected)
                    	{
							//Debug.write("###################Selected Properies Tab in ADD page");						
						}
					</method>
                
	                <simplelayout axis="y" spacing="10"/>
			        <view name="name" >
			            <simplelayout axis="x" spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-name/@label" width="150" fgcolor="0x454545"></text>
			            <edittext name="nameTxt" width="300" text="" />
			            <hinttip tipid="ENDUSERACCESS-msgquery-name" />
			        </view>
			        <view name="description">
			            <simplelayout axis="x" spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-description/@label" width="150" fgcolor="0x454545"></text>
			            <edittext name="txtDesc" width="300" text=""/>
			            <hinttip tipid="ENDUSERACCESS-msgquery-description" />
			        </view>

				    <view name="datasource">
			         	<simplelayout axis="x" spacing="2"/>
            				<text datapath="gui:/gui-labels/lbl-select-datasource/@label" width="150" fgcolor="0x454545"></text>
            				<hinttip tipid="ENDUSERACCESS-msgquery-select_datasource" />
				        	<radiogroup layout="axis: x; spacing:7" name="dsStatusN" >
								<radiobutton datapath="gui:/gui-labels/lbl-db/@label" width="115" value="1" >
									<method event="onclick">
										parent.parent.parent.addQTN.setVisible(true);
										parent.parent.parent.addDBN.setVisible(true);
										parent.parent.parent.addVTN.setVisible(true);
										parent.parent.parent.addWS.setVisible(false);
										//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(true);
										classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.setVisible(false);
										classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.treeManual.setVisible(true);
										classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.setAttribute("manualIsOpen", true);
										
										classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.wsResultFormat.setVisible(false);
										classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.wsResultFormat2.setVisible(false);
										classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.dbBtnView.setVisible(true);										
										
									</method>
								</radiobutton>
								<radiobutton datapath="gui:/gui-labels/lbl-ws/@label" width="110" value="2" >
									<method event="onclick">
										parent.parent.parent.addQTN.setVisible(false);
										parent.parent.parent.addDBN.setVisible(false);
										parent.parent.parent.addVTN.setVisible(false);
										parent.parent.parent.addWS.setVisible(true);
										Debug.write("!!!!!!!!!!!!!!!!!! Get Web Service operations now", classroot.maintab.currProjectId);
										controller.getAllWebServiceOperations(classroot.maintab.currProjectId);
										classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(false);
										classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.setVisible(false);
										classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.setAttribute("manualIsOpen", false);
										classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.treeManual.setVisible(false);
										//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.setVisible(true);
										
										classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.wsResultFormat.setVisible(true);
										classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.wsResultFormat2.setVisible(true);
										classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.dbBtnView.setVisible(false);
									</method>								
								</radiobutton>
							</radiogroup>
					</view>

					<view name="addQTN" visible="true" >
						<simplelayout axis="x" spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-query-type/@label" width="150" fgcolor="0x454545" />
			            <hinttip tipid="ENDUSERACCESS-msgquery-query_type" />
						<radiogroup layout="axis: x; spacing:7"  name="qTypeN">
							<radiobutton datapath="gui:/gui-labels/option-select-query/@label" width="110" value="1" />
							<hinttip tipid="ENDUSERACCESS-msgquery-select_query" />
							<radiobutton datapath="gui:/gui-labels/option-update-query/@label" width="110" value="2" />
							<hinttip tipid="ENDUSERACCESS-msgquery-update_query" />
							<radiobutton datapath="gui:/gui-labels/option-insert-query/@label" width="110" value="3" />
							<hinttip tipid="ENDUSERACCESS-msgquery-insert_query" />
						</radiogroup>
						<method event="onselect" reference="qTypeN">
							//Clear previous selection
				    		
				    		classroot.newMsg.newMsgTabs.newMsgTabp.addDBN.cbxDbN.clearSelection();
			 	    		classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.cbxQueryN.clearSelection();
							classroot.newMsg.errorView.txtErrorMsgQN.setText("");
			            	var qtype = classroot.newMsg.newMsgTabs.newMsgTabp.addQTN.qTypeN.getValue();
							
							if (classroot.qb_query_builder_message_new == undefined ){
								return;
							}
							
			           		if(qtype == '1') {
								   classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.vtLableN.setText("Select View");								

								
				               	  //Clear "Define Insert Criteria" Tab
				                   //TODO
				                   classroot.qb_query_builder_message_new.setVisible(false);
				                   classroot.qb_query_builder_message_new.setAttribute("update", false);
				                   classroot.qb_query_builder_message_new.setAttribute("insertQuery", false);
				                   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.setVisible(false);  
				           		   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(true);
				           		   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.setVisible(false);
				           		   //classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.directSglBtnN.setVisible(false);  
								   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortAlertTxtN.setVisible(true);               		                         		
								   
								   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.setVisible(true);			
								   
								   
		                        	classroot.newMsg.newMsgTabs.qResultTab1.faildTxtN.setAttribute("visible", false);
		                        	classroot.newMsg.newMsgTabs.qResultTab1.resultGridN.setAttribute("visible", true); 	
		                        	classroot.newMsg.newMsgTabs.qResultTab1.qResultView.setAttribute("visible", true); 										   
			    			}else if(qtype == '2'){
								   classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.vtLableN.setText("Select Table");
			
				               	  //Clear "Define Insert Criteria" Tab
				                   classroot.qb_query_builder_message_new.setVisible(false);
				                   classroot.qb_query_builder_message_new.setAttribute("update", true);
				                   classroot.qb_query_builder_message_new.setAttribute("insertQuery", false);
								   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.setVisible(false);
				   		           classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.setVisible(false);  
				           		   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(true);   
				           		   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.setVisible(false);                     		
				           		   //classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.directSglBtnN.setVisible(false);
				           		   
								   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.setVisible(false);			
								   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.setAttribute("visible", false);
								   
		                        	classroot.newMsg.newMsgTabs.qResultTab1.faildTxtN.setAttribute("visible", true);
		                        	classroot.newMsg.newMsgTabs.qResultTab1.resultGridN.setAttribute("visible", false); 		
		                        	classroot.newMsg.newMsgTabs.qResultTab1.qResultView.setAttribute("visible", false);								   
			 	    		  }else if(qtype == '3'){
								   classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.vtLableN.setText("Select Table");
			
				               	  //Clear "Define Insert Criteria" Tab
				                   classroot.qb_query_builder_message_new.setVisible(false);
				                   classroot.qb_query_builder_message_new.setAttribute("update", false);
				                   classroot.qb_query_builder_message_new.setAttribute("insertQuery", true);
			       		           classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.setVisible(false);  
								   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.setVisible(false);  			       		           
			               		   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(true); 
			               		   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.setVisible(false);                       		
			               		   //classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.directSglBtnN.setVisible(false);
								   
								   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.setVisible(false);
								   classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.setAttribute("visible", false);								   
								   
		                        	classroot.newMsg.newMsgTabs.qResultTab1.faildTxtN.setAttribute("visible", true);
		                        	classroot.newMsg.newMsgTabs.qResultTab1.resultGridN.setAttribute("visible", false); 		
		                        	classroot.newMsg.newMsgTabs.qResultTab1.qResultView.setAttribute("visible", false);								   								   
			 	    		  }
						</method>
					</view>

				    <view name="addWS" visible="true" >
		            	<simplelayout axis="x" spacing="2"/>
          				<text datapath="gui:/gui-labels/lbl-select-ws/@label" width="150" fgcolor="0x454545" />
		            	<combobox name="cbxWebServ" width="250" editable="false" shownitems="8">
               				<textlistitem datapath="dbWebServiceOperations:/root/ws" text="$path{'@name'}"  value="$path{'@id'}" >
		            			<method event="onselect">
		            				classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.wsResultFormat.setVisible(true);
									classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.wsResultFormat2.setVisible(true);
		            			
						            var url = this.datapath.data.getAttr("url");
						            var service = this.datapath.data.getAttr("service");
						            var port = this.datapath.data.getAttr("port");
						            var operation = this.datapath.data.getAttr("operation");
						            
						            Debug.write("web Service Url: " + url, "operation" , operation);
						            classroot.setAttribute("currentUrl", url);
           							classroot.setAttribute("currentService", service);
           							classroot.setAttribute("currentPort", port);
           							classroot.setAttribute("currentOperation", operation);
           							
									var params = new LzParam(); 
									params.addValue('action', 'loadSelectedWsDetails', true);
									params.addValue('url', url, true);
									params.addValue('service', service, true);								
									params.addValue('port', port, true);
									params.addValue('operation', operation, true);
						
									wsLoad.setQueryString(params);
									wsLoad.doRequest();		
		            			</method>
               				</textlistitem>
            			</combobox>
						<method event="onselect" reference="cbxWebServ">
						</method>
            		</view> 

				    <view name="addDBN" visible="true" >
		            	<simplelayout axis="x" spacing="1"/>
           				  <text datapath="gui:/gui-labels/lbl-select-db/@label" width="150" fgcolor="0x454545" />
           				  <hinttip tipid="ENDUSERACCESS-msgquery-select_database" />
			              <combobox name="cbxDbN" width="300" editable="false" shownitems="8">
	               				<textlistitem datapath="dbMsg:/root/db" text="$path{'@name'}"  value="$path{'@id'}"/>
    	        		  </combobox>
		                  <method event="onselect" reference="cbxDbN">
				                classroot.newMsg.errorView.txtErrorMsgQN.setText("");
				                classroot.txt_qb_sql_new.setText("");
				                var queryName = classroot.newMsg.newMsgTabs.newMsgTabp.name.nameTxt.getText();
		        		        var queryDescription = classroot.newMsg.newMsgTabs.newMsgTabp.description.txtDesc.getText();
		        		        
		                		var sorts = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.sortTxtAreaView.txtSort2N.getText();
		                		var groupFieldName = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.groupFieldView.comGroupField2N.getText();
		                		var groupFieldId = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.groupFieldView.comGroupField2N.getValue();
		                		var timeout = classroot.newMsg.newMsgTabs.newMsgTabp.timeout.timeoutTxtN.getText();
		        		        
		        		        var emailId = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.cbxEmailAddressN.getValue();
				                var emailKeyword = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.txtEmailKeyN.getText();
		        		        var smsKeyword = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtSmsKeyN.getText();
		                		var imKeyword = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImKeyN.getText();
				                var emailDisplayResult = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.txtEmailDisplayResultN.getText();
		        		        var mobileStatus = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.cbxMobileNumberN.getValue();
		                		var mobileDisplayResult = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtMobileDisplayResultN.getText();
				                var imStatus = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.cbxImNameN.getValue();
		        		        var imDisplayResult = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImDisplayResultN.getText();
		        		        var queryType = classroot.newMsg.newMsgTabs.newMsgTabp.addQTN.qTypeN.getValue();
		        		        var ds = classroot.newMsg.newMsgTabs.newMsgTabp.datasource.dsStatusN.getValue();
					            var dbSelected = classroot.newMsg.newMsgTabs.newMsgTabp.addDBN.cbxDbN.getValue();
			        	    	
			        	    	Debug.write("###################Database selected", queryName, ds);
			        	    	
				    	        var params = new LzParam();
			    	    	    params.addValue('action', 'changedDataBaseItem', true);
			        	    	params.addValue('selected-db-id', dbSelected);
			        	    	params.addValue('selected-q-type', queryType);
			    	    	    params.addValue('msgId', '-1', true);        	    
								params.addValue('connID', dbSelected, true);
			    	    	    params.addValue('projectId', classroot.maintab.currProjectId, true);        

				    	        dbMsg.setQueryString(params);
			    	    	    dbMsg.doRequest();
			    	    	    classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.cbxQueryN.clearSelection();
				 		  </method>
				   </view>
			       <view name="addVTN" visible="true" >
			            <simplelayout axis="x" spacing="1"/>
			            <text name="vtLableN" width="150" datapath="dbMsg:/root/@vtLable" fgcolor="0x454545" />
			            <hinttip tipid="ENDUSERACCESS-msgquery-select_view" />
			            <combobox name="cbxQueryN" width="300" editable="false" shownitems="8">
               				 <textlistitem datapath="dbMsg:/root/query" text="$path{'@name'}"  value="$path{'@id'}"/> 
			            </combobox>
              			<method event="onselect" reference="cbxQueryN">
                        	
                        	classroot.txt_qb_sql_new.setText("");
                        	var tableID = classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.cbxQueryN.getValue();
                        	var dbSelected = classroot.newMsg.newMsgTabs.newMsgTabp.addDBN.cbxDbN.getValue();
                        	
                        	Debug.write("###################view or table is selected", tableID, dbSelected);
                        	
                        	classroot.newMsg.errorView.txtErrorMsgQN.setText("");
				           	if(dbSelected != '')//First must be select Database!
				           	{
                        		classroot.qb_query_builder_message_new.setVisible(true);
           		        		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(false); 
           		        		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.setVisible(false);                       		
           		        		//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.directSglBtnN.setVisible(true);
								classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortAlertTxtN.setVisible(false);
	                        	var queryType = classroot.newMsg.newMsgTabs.newMsgTabp.addQTN.qTypeN.getValue();
					           	if(queryType == 1) {
					           		Debug.write("Set sort tab visible to be true");
					           		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.setVisible(true);
					           		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.setVisible(true);  
		                        	var viewID = tableID;

   		                	    	controller.getNewSelectQueryBuilderForQueryMessage(viewID);
									classroot.qb_query_builder_message_new.setAttribute("update", false);
									classroot.qb_query_builder_message_new.setAttribute("insertQuery", false);
									
				           		}else if(queryType == 2){
   		        	            	controller.getNewUpdateQueryBuilderForQueryMessage(tableID);
   		        	            	classroot.qb_query_builder_message_new.setAttribute("update", true);
   		        	            	classroot.qb_query_builder_message_new.setAttribute("insertQuery", false);
   		        	            	
				    	       	}else if(queryType == 3){
    	                	    	Debug.write("========getNewInsertQueryBuilderForQueryMessage================");
    	                	    	controller.getNewInsertQueryBuilderForQueryMessage(tableID);
    	                	    	classroot.qb_query_builder_message_new.setAttribute("update", false);
    	                	    	classroot.qb_query_builder_message_new.setAttribute("insertQuery", true);
    	                	    	
    	                	    	Debug.write("========getSQLForInsert================");
    	                	    	//var sql = classroot.qb_query_builder_message_new.qb_controller_name.getSQLForInsert();
    	                	    	//classroot.txt_qb_sql_new.setText(sql);
					           	}
				               Debug.write("Try to refresh the column name again");
								controller.getEmptySelectQueryResultNew();					 	               
								classroot.newMsg.newMsgTabs.qResultTab1.resultGridN.refresh();
				               
				               
				               var previousViewId = classroot.getAttribute("previousView");
				               if (previousViewId != null ){
				               		if (previousViewId != 'null'){
					               		if (tableID != previousViewId){
					               			Debug.write("set viewChanged to be true", previousViewId, tableID);
					               			classroot.setAttribute("viewChanged", true);
					               		}
				               		}
				               }
				               classroot.setAttribute("previousView", tableID);
				               					           	
				               
				               
								var dbId = classroot.newMsg.newMsgTabs.newMsgTabp.addDBN.cbxDbN.getValue();
								var viewID = classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.cbxQueryN.getValue();
								var queryType = classroot.newMsg.newMsgTabs.newMsgTabp.addQTN.qTypeN.getValue();
								var ds = classroot.newMsg.newMsgTabs.newMsgTabp.datasource.dsStatusN.getValue();
								var sql = classroot.qb_query_builder_message_new._qb_controller.getSQL();
								controller.getDefaultTextMsgForResponse(queryType, ds, dbId, sql, viewID);				               
//							classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.responseView.newResponseFormatTxtAreaN.setAttribute('text', "");				            
				               
				           	} else {
                        		classroot.qb_query_builder_message_new.setVisible(false);
           		        		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(true);  
           		        		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.setVisible(false);                      		
           		        		//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.directSglBtnN.setVisible(false);
           		        		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortAlertTxtN.setVisible(true);                        		
                      		}
                      		//classroot.newMsg.errorView.txtErrorMsgQN.setText('');
              		   </method>
		         </view>
		         
	             <view name="timeout">
					<simplelayout axis="x" spacing="2"/>
					<text datapath="gui:/gui-labels/lbl-timeout/@label" width="150" fgcolor="0x454545" />
	             	<edittext  name="timeoutTxtN" width="50"/>
	             	<hinttip tipid="ENDUSERACCESS-msgquery-timeout" />
	             </view>
                </tabpane>               
                
                
                <tabpane datapath="gui:/gui-labels/tab-query-builder/@label" name="tabqbN">
                    <method event="onselect" reference="this.tab"><![CDATA[	                	
                    	if (this.tab.selected)
                    	{
	                    	Debug.write("Query builder tab is selected now");
	                    	var tableID = classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.cbxQueryN.getValue();
	                    	//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.selected(true);
	    	                var dbSelected = classroot.newMsg.newMsgTabs.newMsgTabp.addDBN.cbxDbN.getValue();
	                      	var ds = classroot.newMsg.newMsgTabs.newMsgTabp.datasource.dsStatusN.getValue();
		                    if(ds == 1){
								classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.setAttribute("manualIsOpen", true);
								classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.treeManual.setVisible(true);
		        				classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.bordertheedittext.scrollBorderOpenAnimatorHeight.doStart();
		        				classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.bordertheedittext.scrollBorderOpenAnimator.doStart();
		        				classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.qb_query_builder_message_n.queryOpenAnimatorNotSetVisible.doStart();
		        				classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.treeManual.treeManualOpenAnimator.doStart();
		                      	if(tableID ==''){
		                      		classroot.qb_query_builder_message_new.setVisible(false);
		                      		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.treeWizard.setVisible(false);
		                      		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(true);                        		
		                      		//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.directSglBtnN.setVisible(false);
		                      		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortAlertTxtN.setVisible(true);                        		
		                      	} else {
		                      		classroot.qb_query_builder_message_new.setVisible(true);
		                      		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.treeWizard.setVisible(true);
		                      		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(false);                        		
		                      		//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.directSglBtnN.setVisible(true);
		                      		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortAlertTxtN.setVisible(false);                        		
		                      	}

	                      	}else{
							    Debug.write("currentUrl", classroot.currentUrl, 
							    			"currentService", classroot.currentService, 
							    			"currentPort", classroot.currentPort, 
							    			"currentOperation", classroot.currentOperation);
								classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.setAttribute("manualIsOpen", false);
								classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.treeManual.setVisible(false);								
					        	classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.treeManual.treeManualCloseAnimatorWizard.doStart();
					        	classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.qb_query_builder_message_n.manualCloseAnimatorNotSetVisible.doStart();
					        	classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.bordertheedittext.collapseHeight.doStart();
					        	classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.bordertheedittext.collapseHeightY.doStart();	                      		
	                      		if ( classroot.currentUrl != null && classroot.currentService != null && 
	                      			classroot.currentPort != null && classroot.currentOperation != null &&
	                      			classroot.currentUrl != 'null' && classroot.currentService != 'null' && 
	                      			classroot.currentPort != 'null' && classroot.currentOperation != 'null'){
	                      		 	
	                      		 	if (classroot.previousUrl != null && classroot.previousUrl != 'null' && classroot.previousUrl == classroot.currentUrl &&
	                      		 		classroot.previousOperation != null && classroot.previousOperation != 'null' && classroot.previousOperation == classroot.currentOperation){
	                      		 		//Do nothing, do not need to load again
	                      		 	}else{
		                      			mdnIsLoading.letsOpenLoading();
		                      		
									    /*Debug.write("currentUrl", classroot.currentUrl, 
									    			"currentService", classroot.currentService, 
									    			"currentPort", classroot.currentPort, 
									    			"currentOperation", classroot.currentOperation);
									    */
									    classroot.setAttribute("previousUrl", classroot.currentUrl);
									    classroot.setAttribute("previousOperation", classroot.currentOperation);		
									    			        
								        //controller.getWebServiceDetails(url, operation);
							            controller.getNewQueryCriteriaOfWebServiceDetails(classroot.currentUrl, classroot.currentService, classroot.currentPort, classroot.currentOperation);
							            //controller.getSimpleComps();
										//controller.getNewQuery(null, "webservice");
	 								}
								}else{
					           		Debug.write("No Web Service selected, display error message");
					           		classroot.qb_query_builder_message_new.setVisible(false);
					           		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(false);
					           		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.setVisible(true);                        		
					           		//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.directSglBtnN.setVisible(true);
					           		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortAlertTxtN.setVisible(false);								
								}

	                      	}
                      	}
                    ]]></method>
          			<tabslider sliderRH="true" name="qbSliders" width="620" height="434">
		                <tabelement bgcolor="null" name="criteriaN" datapath="gui:/gui-labels/slider-criteria/@label" 
		                                        width="${immediateparent.width}" align="center" selected="true">
	                    	<hinttip tipid="ENDUSERACCESS-msgquery-query_builder_tab" />
	                  		<attribute name="wizardIsOpen" value="true" type="boolean" />
	                        <attribute name="manualIsOpen" value="true" type="boolean" />
	                        <tree name="treeWizard" open="true" text="Wizard" expander="lztree_plusminus_rsc" icon="lztree_wizard_rsc" style="null" styleable="false">
					        	<method event="oninit">
					        		//Set White
					        		this.treeitem.subviews[0].setAttribute("fgcolor", 0xFFFFFF);
					        		this.treeitem.subviews[2].setAttribute("fgcolor", 0xFFFFFF);
					        	</method>
					        	<method event="onopen">
					        		if(this.open) {
					        			//Switch
					        			parent.setAttribute("wizardIsOpen", true);
					        			//Open Wizard
					        			if(parent.manualIsOpen) {
					        				parent.bordertheedittext.scrollBorderOpenAnimatorHeight.doStart();
					        				parent.bordertheedittext.scrollBorderOpenAnimator.doStart();
					        				parent.qb_query_builder_message_n.queryOpenAnimator.doStart();
					        				parent.treeManual.treeManualOpenAnimator.doStart();
					        			} else {
					        				parent.treeManual.treeManualCloseAnimatorWizard.doStart();
					        				parent.qb_query_builder_message_n.manualCloseAnimator.doStart();
					        				parent.bordertheedittext.collapseHeight.doStart();
					        				parent.bordertheedittext.collapseHeightY.doStart();
					        			}
					        		} else {
					        			//Switch
					        			parent.setAttribute("wizardIsOpen", false);
					        			//Close Wizard
				        				parent.treeManual.setAttribute("open", true);
					        		}
					        	</method>
					        </tree>
	                        <querybuilder name="qb_query_builder_message_n" width="602" 
	                            height="110" bgcolor="white" insertQuery="false" y="20">
				            	<method event="oninit">
				            		classroot.setAttribute("qb_query_builder_message_new", this);
				            		this.setAttribute("insertQuery", false);
				            		this.setAttribute("sqlEditBox", parent.bordertheedittext.qb_sql_text_n);//classroot.txt_qb_sql_new);//
				            		this.setAttribute("qbDatapath", "qb_query_builder_query_msg_new:/");
				            		this.setAttribute("qbDataset", qb_query_builder_query_msg_new);
				            	</method>
				            	<animator name="queryCloseAnimator" attribute="height" to="0" duration="250" start="false">
						            <handler name="onstop">
						            	parent.setAttribute("visible", false);
						            </handler>
					       		</animator>
					       		<animator name="queryOpenAnimator" attribute="height" to="110" duration="250" start="false">
					       			<handler name="onstart">
						                parent.setAttribute("visible", true);
						            </handler>
					       		</animator>
					       		<animator name="queryOpenAnimatorNotSetVisible" attribute="height" to="110" duration="250" start="false">
					       			<handler name="onstart">
						            </handler>
					       		</animator>
					       		<animator name="manualCloseAnimator" attribute="height" to="307" duration="250" start="false">
					       			<handler name="onstart">
						                parent.setAttribute("visible", true);
						            </handler>
					       		</animator>		                            
					       		<animator name="manualCloseAnimatorNotSetVisible" attribute="height" to="307" duration="250" start="false">
					       			<handler name="onstart">
						            </handler>
					       		</animator>	
	                        </querybuilder >
							<tree name="treeManual" open="true" text="Manual" expander="lztree_plusminus_rsc" icon="lztree_manual_rsc" style="null" styleable="false" y="138" visible="true">
					        	<method event="oninit">
					        		//Set White
					        		this.treeitem.subviews[0].setAttribute("fgcolor", 0xFFFFFF);
					        		this.treeitem.subviews[2].setAttribute("fgcolor", 0xFFFFFF);
					        	</method>
					        	<method event="onopen">
					        		if(this.open) {
					        			//Switch
					        			parent.setAttribute("manualIsOpen", true);
					        			//Open Manual
					        			if(parent.wizardIsOpen) {
					        				parent.bordertheedittext.expandHeightY.doStart();
					        				parent.bordertheedittext.scrollBorderOpenAnimatorHeight.doStart();
					        				this.treeManualOpenAnimator.doStart();
					        				parent.qb_query_builder_message_n.queryOpenAnimator.doStart();
					        			} else {
					        				parent.treeManual.treeManualCloseAnimator.doStart();
					        				parent.bordertheedittext.scrollBorderCloseAnimator.doStart();
					        				parent.bordertheedittext.scrollBorderCloseAnimatorHeight.doStart();
					        				parent.qb_query_builder_message_n.queryCloseAnimator.doStart();
					        			}
					        		} else {
					        			//Switch
					        			parent.setAttribute("manualIsOpen", false);
					        			//Close Wizard
				        				parent.treeWizard.setAttribute("open", true);
					        		}
					        	</method>
					        	<animator name="treeManualCloseAnimator" attribute="y" to="20" duration="250" start="false">
					       		</animator>
					       		<animator name="treeManualOpenAnimator" attribute="y" to="138" duration="250" start="false">
					       		</animator>
					       		
					       		<animator name="treeManualCloseAnimatorWizard" attribute="y" to="335" duration="250" start="false">
					       		</animator>
					        </tree>
	                        <view name="bordertheedittext" bgcolor="0x9c9c9c" width="602" height="197" y="157">
		                        <animator name="scrollBorderCloseAnimator" attribute="y" to="39" duration="250" start="false">
					       		</animator>
					       		<animator name="scrollBorderOpenAnimator" attribute="y" to="157" duration="250" start="false">
					       		</animator>
					       		<animator name="scrollBorderCloseAnimatorHeight" attribute="height" to="315" duration="250" start="false">
					       			<handler name="onstart">
						                parent.setAttribute("visible", true);
						            </handler>
					       		</animator>
					       		<animator name="scrollBorderOpenAnimatorHeight" attribute="height" to="197" duration="250" start="false">
					       			<handler name="onstart">
						                parent.setAttribute("visible", true);
						            </handler>
					       		</animator>
					       		
					       		<animator name="collapseHeight" attribute="height" to="0" duration="250" start="false">
					       			<handler name="onstop">
						            	parent.setAttribute("visible", false);
						            </handler>
					       		</animator>
					       		<animator name="collapseHeightY" attribute="y" to="355" duration="250" start="false">
					       		</animator>
					       		<animator name="expandHeightY" attribute="y" to="157" duration="250" start="false">
					       		</animator>
		                    	<scrolledittext name="qb_sql_text_n" multiline="true" resizable="true" width="${parent.width - 1}" height="${parent.height - 2}" x="1" y="1">
						            <method event="oninit">
					            		classroot.setAttribute("txt_qb_sql_new", this);
					            	</method>                		
		                    	</scrolledittext>
		                    </view>
							
	                        <view id = "alertTxt" name="alertTxtN" y="0" visible="true">
	                        	<simplelayout axis="y" />
	                            <text datapath="gui:/gui-labels/txt-new-query-msg-condition-1/@label" width="500" fontstyle="bold" fgcolor="0xffffff" />
	                            <text datapath="gui:/gui-labels/txt-new-query-msg-condition-2/@label" width="500" fontstyle="bold" fgcolor="0xffffff" />
	                        </view>
	                        <view id = "alertTxtWebService" name="alertTxtWebServiceN" y="20" visible="false">
	                        	<simplelayout axis="y" />
	                            <text name="text1" datapath="gui:/gui-labels/txt-new-query-msg-condition-web-service/@label" width="500" fontstyle="bold" multiline="true" fgcolor="0xffffff" />
	                            <text name="text2" datapath="gui:/gui-labels/txt-new-query-msg-condition-2/@label" width="500" fontstyle="bold" fgcolor="0xffffff" />
	                        </view>	                        
	                        
		                </tabelement>
		                <tabelement name="sortOrderN" datapath="gui:/gui-labels/slider-sort-group-result/@label" align="center" >						
		                    <view name="sortLayoutN" visible="false">
								<simplelayout axis="y" spacing="2"/>
		                        <view height="10"/>
		                        <view name="sortFieldView">
		                            <simplelayout axis="x" />
		                            <text datapath="gui:/gui-labels/lbl-field/@label" width="100" fgcolor="0xFFFFFF" />
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_field" />
					                <datacombobox name="lstSortField2N" width="250" editable="false" bgcolor="${canvas.bgcolor}" shownitems="8"
										itemdatapath="qb_query_builder_query_msg_new:/root/query/query/field" textdatapath='@name' valuedatapath='@name' selectfirst="false">
					                </datacombobox>			                		                            
		                        </view>
		                        <view name="sortOrderView">
		                            <simplelayout axis="x" />
		                            <text datapath="gui:/gui-labels/lbl-sort-order/@label" width="100" fgcolor="0xFFFFFF" />
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_order" />
		                            <combobox width="250" editable="false" name="comSortOrder2N" shownitems="8">
		                                <textlistitem text="Ascending" selected="true"/><!-- Default -->
		                                <textlistitem text="Descending"/>
		                            </combobox>
		                        </view>
		                        <view name="sortTxtAreaView">
		                            <simplelayout axis="x"/>
		                            <text datapath="gui:/gui-labels/lbl-sorts/@label" width="100" fgcolor="0xFFFFFF" />
		                            <edittext name="txtSort2N" datapath="qb_query_builder_query_msg_new:/root/query/query" text="$path{'@sort'}" width="250" height="50" multiline="true"/>
		                        	<hinttip tipid="ENDUSERACCESS-msgquery-sort_sort" />
		                        </view>
		                        <view>
		                            <simplelayout axis="x" spacing="2"/>
									<text text="" width="100"/>                            
		                            <!-- add sort field -->
		                            <mdn_button datapath="gui:/gui-labels/btn-add/@label">
					                	<method event="onclick">
					                	<![CDATA[	
					                		var sortField = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.sortFieldView.lstSortField2N.getValue();
					                		var sortOrder = (classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.sortOrderView.comSortOrder2N.getText() == "Ascending" ? "ASC" : "DESC");
					                		var sortStr = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.sortTxtAreaView.txtSort2N.getText();
					                		if (sortField == null || sortField == "" || sortField == undefined){
					                			classroot.newMsg.errorView.txtErrorMsgQN.setText('Please select sort field.');
					                			return;
					                		}
					                		var wholeSortStr = "";
											if (sortStr == null || sortStr == ""){
					                			wholeSortStr = sortField + " " + sortOrder;
					                			classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.sortTxtAreaView.txtSort2N.setText(wholeSortStr);
					                		}
					                		else{
					                			wholeSortStr = sortStr + ", " + sortField + " " + sortOrder;
					                			classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.sortTxtAreaView.txtSort2N.setText(wholeSortStr);
					                		}
					                		var sqlText = classroot.txt_qb_sql_new.getText();
					                		if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_message_new._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("ORDER BY");
						                		if (firstIndex > 0){
						                			var lastIndex = sqlText.lastIndexOf("ASC");
						                			var lastIndex2 = sqlText.lastIndexOf("DESC");
						                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
						                			var firstPart="";
						          					var secondPart="";
						                			if (lastIndex > lastIndex2){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 4);
						                			}else if (lastIndex2 > lastIndex){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 5);
						                			}
						                			sqlText = firstPart + secondPart;
						                		}
					                		}
					                		if (wholeSortStr.length > 1){
					                			sqlText += " ORDER BY " + wholeSortStr;
					                		}		
					                		classroot.txt_qb_sql_new.setText(sqlText);			                		
					                	]]>
					                	</method> 
					                	<hinttip tipid="ENDUSERACCESS-msgquery-sort_add" />                           
		                            </mdn_button>
		                            <mdn_button datapath="gui:/gui-labels/btn-remove/@label">
					                	<method event="onclick">
					                		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.sortTxtAreaView.txtSort2N.setText("");
					                		var sqlText = classroot.txt_qb_sql_new.getText();
					                		if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_message_new._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("ORDER BY");
						                		if (firstIndex > 0){
						                			var lastIndex = sqlText.lastIndexOf("ASC");
						                			var lastIndex2 = sqlText.lastIndexOf("DESC");
						                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
						                			var firstPart="";
						          					var secondPart="";
						                			if (lastIndex > lastIndex2){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 4);
						                			}else if (lastIndex2 > lastIndex){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 5);
						                			}
						                			sqlText = firstPart + secondPart;
						                		}
					                		}
					                		classroot.txt_qb_sql_new.setText(sqlText);
					                	</method>                            
		                            </mdn_button>
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_remove" />
		                        </view>
								<view height="10"/>
								<view name="groupFieldView">
									<simplelayout axis="x"/>
			                        <text datapath="gui:/gui-labels/lbl-group-on/@label" width="100" fgcolor="0xFFFFFF" />
			                        <hinttip tipid="ENDUSERACCESS-msgquery-sort_group" />
			                        
						            <datacombobox name="comGroupField2N" width="250" editable="false" shownitems="8" bgcolor="${canvas.bgcolor}"
						            	itemdatapath="qb_query_builder_query_msg_new:/root/query/query/field" textdatapath='@name' valuedatapath='@id' selectfirst="false">      
										 <method event="onselect">
											var dp = new LzDatapointer(this);
											var nodes = dp.xpathQuery(this.itemdatapath);
											if (! (nodes instanceof Array)) nodes = [nodes];
											var index = this.getItemIndex(this.getValue());
											dp.setPointer(nodes[index]);
											var groupFieldName = dp.xpathQuery("@name");
											
					                		var sqlText = classroot.txt_qb_sql_new.getText();
					                		var secondPart = "";
						                	if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_message_new._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("GROUP BY");
						                		var firstPart = "";
						                		if (firstIndex > 0){
						                			Debug.write("firstIndex of GROUP BY", firstIndex);
							                		var secondIndex= sqlText.indexOf(".", firstIndex);
						          					var thirdIndex= sqlText.indexOf(" ", secondIndex);
						          					Debug.write("firstIndex", firstIndex, "secondIndex", secondIndex, "thirdIndex", thirdIndex);
					                				firstPart = sqlText.substring(0, firstIndex-1);
					                				if (thirdIndex == -1)
					                					secondPart = "";
					                				else
					                					secondPart = sqlText.substring(thirdIndex);
						                			
						                			sqlText = firstPart;
						                		}else{
							                		firstIndex = sqlText.indexOf("ORDER BY");
							                		Debug.write("firstIndex of ORDER BY", firstIndex);
							                		if (firstIndex > 0){
							                			var lastIndex = sqlText.lastIndexOf("ASC");
							                			var lastIndex2 = sqlText.lastIndexOf("DESC");
							                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
							                			if (lastIndex > lastIndex2){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}else if (lastIndex2 > lastIndex){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}
							                			sqlText = firstPart;
							                		}					                		
						                		}
					                		}
					                		if (groupFieldName.length > 0){
					                			sqlText += " GROUP BY " + groupFieldName;
					                		}		
					                		Debug.write("secondPart", secondPart);	           
					                		if (secondPart.length > 0){
					                			sqlText += secondPart;
					                		}              
					                		classroot.txt_qb_sql_new.setText(sqlText);       											
										</method>		
									</datacombobox>
		                            <!-- <combobox name="comGroupField2N" datapath="qb_query_builder_query_msg_new:/root/query/query/@groupFieldName" width="250" editable="false" shownitems="8">
		                                <textlistitem datapath="qb_query_builder_query_msg_new:/root/query/query/field" text="$path{'@name'}" value="$path{'@id'}" >
		                                </textlistitem>
		                                <method event="onselect">
					                		Debug.write(this.getText(), getValue());
					                		var groupFieldName = this.getText();
					                		var sqlText = classroot.txt_qb_sql_new.getText();
					                		var secondPart = "";
						                	if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_message_new._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("GROUP BY");
						                		var firstPart = "";
						                		if (firstIndex > 0){
						                			Debug.write("firstIndex of GROUP BY", firstIndex);
							                		var secondIndex= sqlText.indexOf(".", firstIndex);
						          					var thirdIndex= sqlText.indexOf(" ", secondIndex);
						          					Debug.write("firstIndex", firstIndex, "secondIndex", secondIndex, "thirdIndex", thirdIndex);
					                				firstPart = sqlText.substring(0, firstIndex-1);
					                				if (thirdIndex == -1)
					                					secondPart = "";
					                				else
					                					secondPart = sqlText.substring(thirdIndex);
						                			
						                			sqlText = firstPart;
						                		}else{
							                		firstIndex = sqlText.indexOf("ORDER BY");
							                		Debug.write("firstIndex of ORDER BY", firstIndex);
							                		if (firstIndex > 0){
							                			var lastIndex = sqlText.lastIndexOf("ASC");
							                			var lastIndex2 = sqlText.lastIndexOf("DESC");
							                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
							                			if (lastIndex > lastIndex2){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}else if (lastIndex2 > lastIndex){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}
							                			sqlText = firstPart;
							                		}					                		
						                		}
					                		}
					                		if (groupFieldName.length > 0){
					                			sqlText += " GROUP BY " + groupFieldName;
					                		}		
					                		Debug.write("secondPart", secondPart);	           
					                		if (secondPart.length > 0){
					                			sqlText += secondPart;
					                		}              
					                		classroot.txt_qb_sql_new.setText(sqlText);       
		                                </method>		                                
		                            </combobox> -->
		                        </view>
		                        </view>
		                        <view align="center" name="sortAlertTxtN">
		                        	<simplelayout axis="y"/>
               		                <text datapath="gui:/gui-labels/txt-new-query-msg-condition-1/@label" width="500" fontstyle="bold" fgcolor="0xffffff" />
		                            <text datapath="gui:/gui-labels/txt-new-query-msg-condition-2/@label" width="500" fontstyle="bold" fgcolor="0xffffff" />
		                        </view>
						</tabelement>
					</tabslider>                
                </tabpane>
                <tabpane datapath="gui:/gui-labels/tab-query-result/@label" name="qResultTab1">
                    <view width="620" height="51" name="qResultView" id="qResultViewAnimate" y="160" bgcolor="0x4386cc">
		                <animator attribute="y" name="startQuery" to="0" duration="1000" start="false"></animator>
		                <view name="wholeUserInputView" width="${parent.width}" x="5" y="5">
					        <text datapath="gui:/gui-labels/lbl-user-input/@label" name="labeltext" width="150" fgcolor="0xFFFFFF" y="3"></text>
					        <edittext name="txtUserInput" width="200" enabled="true" x="150"/>	                	
							<text name="userInputTxtN" datapath="gui:/gui-labels/lbl-query-result-userinput/@label" resize="true" x="0" y="25" fgcolor="0xFFFFFF" />							
		                </view>
		                <!-- Test SQL Button -->
		                <view x="470" y="5">
			                <mdn_button datapath="gui:/gui-labels/btn-test-direct-sql/@label">
			                	<method event="onclick">
			                	<![CDATA[
									var ds = classroot.newMsg.newMsgTabs.newMsgTabp.datasource.dsStatusN.getValue();
									var userInputTestValues = classroot.newMsg.newMsgTabs.qResultTab1.qResultView.wholeUserInputView.txtUserInput.getText();
									
		                    		if(ds == 1){			                		
				                		Debug.write("Direct SQL button clicked!");
				                		var dbId = classroot.newMsg.newMsgTabs.newMsgTabp.addDBN.cbxDbN.getValue();
										var tableID = classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.cbxQueryN.getValue();
										var queryType = classroot.newMsg.newMsgTabs.newMsgTabp.addQTN.qTypeN.getValue();
										var ds = classroot.newMsg.newMsgTabs.newMsgTabp.datasource.dsStatusN.getValue();
						                var viewID = tableID;
						                
						                sqlText = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.bordertheedittext.qb_sql_text_n.getText();
						                Debug.write("#### QUERY TEXT: ", sqlText);
						               
						               /*var viewChanged = classroot.getAttribute("viewChanged");
						               var queryTextChanged = false;
						               if (viewChanged == false){						               
							               var previousQuery = classroot.getAttribute("previousQuery");
							               if (previousQuery != null ){
							               		if (previousQuery != 'null'){
								               		if (sqlText != previousQuery){
								               			Debug.write("set viewChanged to be true", previousQuery, sqlText);
								               			classroot.setAttribute("viewChanged", true);
								               			queryTextChanged = true;
								               		}
							               		}
							               }
						               }
						               viewChanged = classroot.getAttribute("viewChanged");
						               if (queryTextChanged == true){
						               		Debug.write("Try to refresh the column name again because of query text changed");
						               		controller.getEmptySelectQueryResultNew();
						               		classroot.newMsg.newMsgTabs.qResultTab1.resultGridN.refresh();			               		
						               }
						               
						               classroot.setAttribute("previousQuery", sqlText);
						               	*/				                        
							            
							            //var userInputTestValues = classroot.newMsg.newMsgTabs.qResultTab1.qResultView.wholeUserInputView.txtUserInput.getText();
							            Debug.write("#### QUERY TEST VALUES: ", userInputTestValues);
				                        if(queryType == '1') {
				                        	controller.getSelectQueryResultNew(classroot.maintab.currProjectId, dbId , viewID, sqlText, null, userInputTestValues);
				                        }else if(queryType == '2'){//TODO: test button must be worked Only for select queries
				                        	//controller.getUpdateQueryResultNew(classroot.maintab.currProjectId, dbId, sqlText, userInputTestValues);
				                        }else if(queryType == '3'){//TODO: test button must be worked Only for select queries
											//controller.getInsertQueryResultNew(classroot.maintab.currProjectId, dbId, sqlText, userInputTestValues);                
										}
			                        }else if(ds == 2){
				                        if ( classroot.currentUrl != null && classroot.currentService != null && 
				                      			classroot.currentPort != null && classroot.currentOperation != null &&
				                      			classroot.currentUrl != 'null' && classroot.currentService != 'null' && 
				                      			classroot.currentPort != 'null' && classroot.currentOperation != 'null'){
							        		var valueOrConditions = [];
							        		var ids = [];
							        		var rows = [];
							        		var types = [];
							        		var useds = [];
							        		var indents = [];
							        		var parents = [];
							        		var numbers = [];
							        		var fields = [];
							        		var compIDs = [];	
							        		var comparisons = [];
							        		var values = [];
							        		var connections = [];
							        		var value2s = [];	// The second value field, 'value2'. It is only used and visible when
																//	dealing with the 'is between' and 'is not between' operators.					
							        		var groupings = [];
							        		var userInputSeqs = [];
							        		var userInputSeqs2 = [];
											
											var tableIndex = 0;
							        		
							        		//while (ok){
					                		var allNodes = qb_query_builder_query_msg_new.getFirstChild();
											var rootNode = allNodes.getElementsByTagName("criteria")[0];
							        		var numberNodes = rootNode.childNodes.length;
					                		for (var i = 0; i < numberNodes; i++){
												queryNode = rootNode.childNodes[i];
												var id = queryNode.getAttr("id");
							        			var row = queryNode.getAttr("row");
							        			var type = queryNode.getAttr("type");
							        			var used = queryNode.getAttr("used");
							        			var indent = queryNode.getAttr("indent");
								        		var valueOrCondition = queryNode.getAttr("valueOrCondition");
							        			var number = queryNode.getAttr("number");	
							        			var parent = queryNode.getAttr("parent");		        		
								        		var field = queryNode.getAttr("field");  			        		
								        		var compID = queryNode.getAttr("compID");
							        			var comparison = queryNode.getAttr("comparison");			        		
								        		var value = queryNode.getAttr("value");  			        		
								        		var connection = queryNode.getAttr("connection");
							        			var value2 = queryNode.getAttr("value2");			        		
								        		var grouping = queryNode.getAttr("grouping");
								        		var userInputSeq = queryNode.getAttr("valueUserInput");
								        		var userInputSeq2 = queryNode.getAttr("value2UserInput");
								        		
								        		ids[tableIndex] = id;
								        		rows[tableIndex] = row;
								        		types[tableIndex] = type;
												useds[tableIndex] = used;
												indents[tableIndex] = indent;
							        			valueOrConditions[tableIndex] = valueOrCondition;
							        			numbers[tableIndex] = number;
							        			parents[tableIndex] = parent;
							        			fields[tableIndex] = field;
							        			compIDs[tableIndex] = compID;	
								        		comparisons[tableIndex] = comparison;
								        		values[tableIndex] = value;
								        		connections[tableIndex] = connection;
								        		value2s[tableIndex] = value2;
								        		groupings[tableIndex] = grouping;
								        		userInputSeqs[tableIndex] = userInputSeq;
								        		userInputSeqs2[tableIndex] = userInputSeq2;
							        			
							        			tableIndex++;
							        		}	
									        var params = new LzParam();
									        params.addValue('action', 'testWebServiceQuery', true);
									        params.addValue('queryId', -1, true);
											params.addValue('WSDLUrl', classroot.currentUrl, true);
											params.addValue('service', classroot.currentService, true);
											params.addValue('port', classroot.currentPort, true);
											params.addValue('operation', classroot.currentOperation, true);
											params.addValue('ids', ids, true);
											params.addValue('rows', rows, true);
											params.addValue('types', types, true);
											params.addValue('useds', useds, true);
											params.addValue('indents', indents, true);
											params.addValue('valueOrConditions', valueOrConditions, true);
											params.addValue('parents', parents, true);
											params.addValue('numbers', numbers, true);
											params.addValue('fields', fields, true);
											params.addValue('compIDs', compIDs, true);			
											params.addValue('comparisons', comparisons, true);
											params.addValue('values', values, true);
											params.addValue('connections', connections, true);
											params.addValue('value2s', value2s, true);
											params.addValue('groupings', groupings, true);
											params.addValue('sorts', sorts, true);
											params.addValue('groupFieldId', groupFieldId, true);
											params.addValue('userInputSeqs', userInputSeqs, true);
											params.addValue('userInputSeqs2', userInputSeqs2, true);
											params.addValue('userInputTestValues', userInputTestValues, true);
	
											//dbWebServiceQueryReq.setQueryString(params);
											//dbWebServiceQueryReq.doRequest();
											
											qb_query_result_new.setQueryString(params);
											qb_query_result_new.doRequest();
										}					        						                        
			                        }
			                        ]]>
			                	</method>                
			                </mdn_button>
		                </view>                    	
                	</view>
                	<ftdynamicgrid name="resultGridN" datapath="qb_query_result_new:/root"
				                   contentdatapath="resultset/row"
				                   metadatapath="metadata/column"
				                   width="620" height="385" 
				                   visible="true" rowheight="20" 
				                   y="55" id="resultGridNAnimate" opacity="0" > <!-- visible="true" -->
				                   <animator attribute="opacity" name="startQueryOpacity" to="1" duration="1000" start="false"></animator>
				    </ftdynamicgrid>
				    <text name="faildTxtN" datapath="gui:/gui-labels/no-select-query/@label" fontstyle="bold" 
				    	visible="false" fgcolor="red" align="center" width="500" multiline="true"/>
                </tabpane>
                <tabpane name="tabmbN" datapath="gui:/gui-labels/tab-message-builder/@label">
                	<method event="onselect" reference="this.tab">
                		Debug.write("New Message Buildet Tab");
	                	//classroot.newMsg.newQueryResultTabN.setVisible(false);
	                	//classroot.newMsg.newMessageResultTabsN.setVisible(true);
						classroot.newMsg.errorView.txtErrorMsgQN.setText("");
						classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.cbxEmailAddressN.selectItemAt(1);
						//classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.responseView.newResponseFormatTxtAreaN.setAttribute('text', "");
						classroot.newMsg.newMsgTabs.msgResultTab.msgHolderView.newEnterFormatMessageView.newEnterFormatMessageTxtN.setAttribute('text', "");						

						var dbId = classroot.newMsg.newMsgTabs.newMsgTabp.addDBN.cbxDbN.getValue();
						var viewID = classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.cbxQueryN.getValue();
						var queryType = classroot.newMsg.newMsgTabs.newMsgTabp.addQTN.qTypeN.getValue();
						var ds = classroot.newMsg.newMsgTabs.newMsgTabp.datasource.dsStatusN.getValue();
						var sql = classroot.qb_query_builder_message_new._qb_controller.getSQL();
						//controller.getDefaultTextMsgForResponse(queryType, ds, dbId, sql, viewID);
                	</method>
          			<tabslider sliderRH="true" width="620" height="434" name="msgInfoSliders">
		                <tabelement name="msgDetailesN" datapath="gui:/gui-labels/slider-messaging-details/@label" align="center" selected="true">
			                <simplelayout axis="y" spacing="2"/>
					        <view name="msgTitle" spacing="2">
		            			<simplelayout axis="x"/>
				            	<text text="" width="150"  fontstyle="bold"></text>
		        		    	<text width="250" text=""/>
				            	<text datapath="gui:/gui-labels/lbl-keyword/@label" width="80" fontstyle="bold" fgcolor="0xffffff"></text>
				            	<text datapath="gui:/gui-labels/lbl-display-result/@label" width="50" fontstyle="bold" fgcolor="0xffffff" />            
		        			</view>
		
					        <view name="email">
		            			<simplelayout axis="x" spacing="2"/>
					            <text datapath="gui:/gui-labels/lbl-email-address/@label" width="150" fontstyle="bold" fgcolor="0xffffff"></text>
					            <datacombobox name="cbxEmailAddressN" width="250" editable="false" shownitems="8" bgcolor="${canvas.bgcolor}"
					            	itemdatapath="dbMsg:/root/emailAddress" textdatapath='@name' valuedatapath='@id' selectfirst="false">      
					            </datacombobox>
			                    <method event="onselect" reference="cbxEmailAddressN">
		    	                	var v = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.cbxEmailAddressN.getValue();
			    	                if(v == 0) {
										settingBox.setAttribute("goToSpecialView", true);
										settingBox.open();
										controller.addMdnEmail();
									}
		            	    	</method>
		            			<edittext name="txtEmailKeyN" width="80" text=""/>
		            			<edittext name="txtEmailDisplayResultN" width="40" text="" maxlength="2"/>
					        </view>
		
					        <view name="mobile">
		            			<simplelayout axis="x" spacing="2"/>
					            <text datapath="gui:/gui-labels/lbl-mobile-number/@label" width="150" fontstyle="bold" fgcolor="0xffffff"></text>
					            <datacombobox name="cbxMobileNumberN" width="250" editable="false" shownitems="8" bgcolor="${canvas.bgcolor}"
					            	itemdatapath="dbMsg:/root/smpp" textdatapath='@number' valuedatapath='@id' selectfirst="false">      
					            </datacombobox>					            
				                <method event="onselect" reference="cbxMobileNumberN">
		    	                	var v = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.cbxMobileNumberN.getValue();
			    	                if(v == 0) {
										classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtSmsKeyN.setAttribute('enabled', true);			 
										classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtMobileDisplayResultN.setAttribute('enabled', true);   	                
										settingBox.setAttribute("goToSpecialView", true);
										settingBox.open();
										//controller.displaySmsSett();
										controller.displayAddSmpp();
				                    }else if (v == -1){
				                    	classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtSmsKeyN.setAttribute('enabled', false);
				                    	classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtMobileDisplayResultN.setAttribute('enabled', false);
				                    }else{
				                    	classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtSmsKeyN.setAttribute('enabled', true);
				                    	classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtMobileDisplayResultN.setAttribute('enabled', true);
				                    }
						 		</method>
						 		<hinttip tipid="ENDUSERACCESS-msgquery-msgdetails_sms"/>
		            			<edittext name="txtSmsKeyN" width="80" text="" />
		            			<edittext name="txtMobileDisplayResultN" width="40" text="" maxlength="2"/>
					        </view>
		        
					        <view name="im">
		            			<simplelayout axis="x" spacing="2"/>
					            <text datapath="gui:/gui-labels/lbl-im-details-name/@label" width="150" fontstyle="bold" fgcolor="0xffffff"></text>
		            			<combobox name="cbxImNameN" width="250" editable="false" shownitems="8">
					                <textlistitem datapath="gui:/gui-labels/lbl-add-new-item/@label" value="0" />
		            			    <textlistitem datapath="gui:/gui-labels/lbl-all-im/@label" value="1" />
		            			    <textlistitem datapath="gui:/gui-labels/lbl-no-im/@label" value="-1" />            			    
					            </combobox>
			                    <method event="onselect" reference="cbxImNameN">
		    	                	var v = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.cbxImNameN.getValue();
			    	                if(v == 0) {
				                    	classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImKeyN.setAttribute('enabled', true);
				                    	classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImDisplayResultN.setAttribute('enabled', true);
										settingBox.setAttribute("goToSpecialView", true);
										settingBox.open();
										controller.displayEmptyIMConnection();
				                    }else if (v == -1){
				                    	classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImKeyN.setAttribute('enabled', false);
				                    	classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImDisplayResultN.setAttribute('enabled', false);
				                    }else{
				                    	classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImKeyN.setAttribute('enabled', true);
				                    	classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImDisplayResultN.setAttribute('enabled', true);
				                    }
		            	    	</method>
		            	    	<hinttip tipid="ENDUSERACCESS-msgquery-msgdetails_im" />
		            			<edittext name="txtImKeyN" width="80" text=""/>
		            			<edittext name="txtImDisplayResultN" width="40" text="" maxlength="2"/>
					        </view>
						    <view height="20"/>
						</tabelement>
		                <tabelement name="msgDetailesResN" datapath="gui:/gui-labels/slider-response-format/@label" align="center">
						  <simplelayout axis="y"/>
						  <view name="wsResultFormat" visible="false">
						  	<simplelayout axis="x" spacing="2"/>
					        <text datapath="gui:/gui-labels/lbl-user-input/@label" name="labeltext" width="150" fgcolor="0xFFFFFF" />
					        <edittext name="txtUserInput" width="200" enabled="true" x="150"/>	                	
							<mdn_button datapath="gui:/gui-labels/btn-show-result-format/@label">	
								<method event="onclick">
								<![CDATA[
									var uiStr = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.wsResultFormat.txtUserInput.getText();
									
					        		var valueOrConditions = [];
					        		var ids = [];
					        		var rows = [];
					        		var types = [];
					        		var useds = [];
					        		var indents = [];
					        		var parents = [];
					        		var numbers = [];
					        		var fields = [];
					        		var compIDs = [];	
					        		var comparisons = [];
					        		var values = [];
					        		var connections = [];
					        		var value2s = [];	// The second value field, 'value2'. It is only used and visible when
														//	dealing with the 'is between' and 'is not between' operators.					
					        		var groupings = [];
					        		var userInputSeqs = [];
					        		var userInputSeqs2 = [];
									
									var tableIndex = 0;
					        		
			                		var allNodes = qb_query_builder_query_msg_new.getFirstChild();
									var rootNode = allNodes.getElementsByTagName("criteria")[0];
					        		var numberNodes = rootNode.childNodes.length;
			                		for (var i = 0; i < numberNodes; i++){
										queryNode = rootNode.childNodes[i];
										var id = queryNode.getAttr("id");
					        			var row = queryNode.getAttr("row");
					        			var type = queryNode.getAttr("type");
					        			var used = queryNode.getAttr("used");
					        			var indent = queryNode.getAttr("indent");
						        		var valueOrCondition = queryNode.getAttr("valueOrCondition");
					        			var number = queryNode.getAttr("number");	
					        			var parent = queryNode.getAttr("parent");		        		
						        		var field = queryNode.getAttr("field");  			        		
						        		var compID = queryNode.getAttr("compID");
					        			var comparison = queryNode.getAttr("comparison");			        		
						        		var value = queryNode.getAttr("value");  			        		
						        		var connection = queryNode.getAttr("connection");
					        			var value2 = queryNode.getAttr("value2");			        		
						        		var grouping = queryNode.getAttr("grouping");
						        		var userInputSeq = queryNode.getAttr("valueUserInput");
						        		var userInputSeq2 = queryNode.getAttr("value2UserInput");
						        		
						        		ids[tableIndex] = id;
						        		rows[tableIndex] = row;
						        		types[tableIndex] = type;
										useds[tableIndex] = used;
										indents[tableIndex] = indent;
					        			valueOrConditions[tableIndex] = valueOrCondition;
					        			numbers[tableIndex] = number;
					        			parents[tableIndex] = parent;
					        			fields[tableIndex] = field;
					        			compIDs[tableIndex] = compID;	
						        		comparisons[tableIndex] = comparison;
						        		values[tableIndex] = value;
						        		connections[tableIndex] = connection;
						        		value2s[tableIndex] = value2;
						        		groupings[tableIndex] = grouping;
						        		userInputSeqs[tableIndex] = userInputSeq;
						        		userInputSeqs2[tableIndex] = userInputSeq2;
					        			
					        			tableIndex++;
					        		}										
									
									var params = new LzParam();
									params.addValue('action', 'getResponeseFormat');									
									params.addValue('WSDLUrl', classroot.currentUrl, true);
									params.addValue('service', classroot.currentService, true);
									params.addValue('port', classroot.currentPort, true);
									params.addValue('operation', classroot.currentOperation, true);
									params.addValue('ids', ids, true);
									params.addValue('rows', rows, true);
									params.addValue('types', types, true);
									params.addValue('useds', useds, true);
									params.addValue('indents', indents, true);
									params.addValue('valueOrConditions', valueOrConditions, true);
									params.addValue('parents', parents, true);
									params.addValue('numbers', numbers, true);
									params.addValue('fields', fields, true);
									params.addValue('compIDs', compIDs, true);			
									params.addValue('comparisons', comparisons, true);
									params.addValue('values', values, true);
									params.addValue('connections', connections, true);
									params.addValue('value2s', value2s, true);
									params.addValue('groupings', groupings, true);
									params.addValue('sorts', sorts, true);
									params.addValue('groupFieldId', groupFieldId, true);
									params.addValue('userInputSeqs', userInputSeqs, true);
									params.addValue('userInputSeqs2', userInputSeqs2, true);
									params.addValue('uiStr', uiStr, true);
	
									//qb_query_result_new.setQueryString(params);
									//qb_query_result_new.doRequest();
											
									dbQueryReq.setQueryString(params);
									dbQueryReq.doRequest();		
           							//controller.getDefaultTextMsgForResponseWS(url, service, port, operation);//adele				               								
								]]>
								</method>		  	
							</mdn_button>					        
						  </view>						  
						  <view name="wsResultFormat2" visible="false">
							  <text name="userInputTxtN" datapath="gui:/gui-labels/lbl-query-result-format/@label" resize="true" fgcolor="0xFFFFFF" />							
						  </view>
						  <view name="responseView">
						  	<simpleboundslayout axis="y"/>
	               			<scrolledittext name="newResponseFormatTxtAreaN" datapath="dbQueryReq:/root/@responseFormat" width="602" height="300"
					            defaultfontname="Arial"
					            defaultfontcolor="black"
					            bgcolor="white"
					            border="1" >
	               			</scrolledittext> <!--  330-->
						  </view>
	               			<view name="dbBtnView">
							  	<mdn_button datapath="gui:/gui-labels/btn-default/@label">
							  		<method event="onclick">
										var dbId = classroot.newMsg.newMsgTabs.newMsgTabp.addDBN.cbxDbN.getValue();
										var viewID = classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.cbxQueryN.getValue();
										var queryType = classroot.newMsg.newMsgTabs.newMsgTabp.addQTN.qTypeN.getValue();
										var ds = classroot.newMsg.newMsgTabs.newMsgTabp.datasource.dsStatusN.getValue();
										var sql = classroot.qb_query_builder_message_new._qb_controller.getSQL();
										
							  			controller.getDefaultTextMsgForResponse(queryType, ds, dbId, sql, viewID);				               
										//classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.responseView.newResponseFormatTxtAreaN.setAttribute('text', "");				           
							  		</method>
							  	</mdn_button>	
						  	</view>               									  
						</tabelement>
					</tabslider>                
                </tabpane>
                <tabpane name="msgResultTab" datapath="gui:/gui-labels/tab-message-result/@label"> 
			               <view name="msgHolderView" id="msgHolderViewAnimation" width="621" height="69" bgcolor="0x4386cc" y="160">
				               <animator attribute="y" name="startMessageTest" to="0" duration="1000" start="false"></animator>
				               <view name="msgTypeView" x="5" y="5">
									<radiogroup name="newMessagingTypeRadioN" layout="axis: x; spacing:7"  height="20">
										<radiobutton name="radio1" datapath="gui:/gui-labels/lbl-email2/@label" width="110" value="1">
											<hinttip tipid="ENDUSERACCESS-msgquery-msgtest-email" />
											<method event="oninit">
												this._title.setAttribute("fgcolor", 0xFFFFFF);
											</method>
										</radiobutton>
										<radiobutton name="radio2" datapath="gui:/gui-labels/lbl-sms/@label" width="110" value="2" >
											<hinttip tipid="ENDUSERACCESS-msgquery-msgtest-sms" />
											<method event="oninit">
												this._title.setAttribute("fgcolor", 0xFFFFFF);
											</method>
										</radiobutton>
										<radiobutton name="radio3" datapath="gui:/gui-labels/lbl-im/@label" width="110" value="3" >
											<hinttip tipid="ENDUSERACCESS-msgquery-msgtest-im" />
											<method event="oninit">
												this._title.setAttribute("fgcolor", 0xFFFFFF);
											</method>
										</radiobutton>
									</radiogroup>
								</view>
								<view name="userInputView" x="5" y="25">
								   	<text id="userInputTxt" name="userInputTxtN" datapath="gui:/gui-labels/lbl-msg-result-userinput/@label" width="620" fgcolor="0xFFFFFF" />
								</view>	
								<view name="newEnterFormatMessageView" x="5" y="42">
									<simplelayout axis="x"  spacing="5"/>
					               	<edittext name="newEnterFormatMessageTxtN" text="" width="300"/>
					                <mdn_button datapath="gui:/gui-labels/btn-test-message/@label">
					                	<method event="onclick">
					                		<![CDATA[
					                		var messagingType = classroot.newMsg.newMsgTabs.msgResultTab.msgHolderView.msgTypeView.newMessagingTypeRadioN.getValue();
					                		var enterFormatMessage = classroot.newMsg.newMsgTabs.msgResultTab.msgHolderView.newEnterFormatMessageView.newEnterFormatMessageTxtN.getText();
					                		
					                		var sorts = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.sortTxtAreaView.txtSort2N.getText();
					                		var groupFieldName = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.groupFieldView.comGroupField2N.getText();
					                		var groupFieldId = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.groupFieldView.comGroupField2N.getValue();
	
							                var emailKeyword = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.txtEmailKeyN.getText();
					        		        var smsKeyword = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtSmsKeyN.getText();
					                		var imKeyword = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImKeyN.getText();
				
							                var emailDisplayResult = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.txtEmailDisplayResultN.getText();
					                		var mobileDisplayResult = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtMobileDisplayResultN.getText();
					        		        var imDisplayResult = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImDisplayResultN.getText();
					        		        var mobileStatus = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.cbxMobileNumberN.getValue();
				
								          	var response = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.responseView.newResponseFormatTxtAreaN.getText();
				    	            		var viewID = classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.cbxQueryN.getValue();
					                		var queryType = classroot.newMsg.newMsgTabs.newMsgTabp.addQTN.qTypeN.getValue();
					                		var ds = classroot.newMsg.newMsgTabs.newMsgTabp.datasource.dsStatusN.getValue();
					                		
											var sql;
											var sqlTextFromQueryBuilder = null;
											
											if(queryType == '1') {
				                		        sqlTextFromQueryBuilder = classroot.qb_query_builder_message_new._qb_controller.getSQL();
						                		if (groupFieldName.length > 0){
						                			sqlTextFromQueryBuilder += " GROUP BY " + groupFieldName;
						                		}
						                		if (sorts.length > 1){
						                			sqlTextFromQueryBuilder += " ORDER BY " + sorts;
						                		}	
				                        	}else if(queryType == '2'){
		
												queryType = "update";
												sqlTextFromQueryBuilder = classroot.qb_query_builder_message_new._qb_controller.getSQLForUpdate();
				
											}else if(queryType == '3'){
				
												queryType = "insert";
												sqlTextFromQueryBuilder = classroot.qb_query_builder_message_new._qb_controller.getSQLForInsert();
											}
											
											var sqlText = classroot.txt_qb_sql_new.getText();
											if (sqlText == null || sqlText == "" || sqlText == undefined){
												sql = sqlTextFromQueryBuilder;
											}else{
												sql = sqlText;
											}
											var params = new LzParam();
											params.addValue('action', 'testMessaginResultXML', true);
											params.addValue('msgId', -1, true);
											
											params.addValue('groupings', groupings, true);
											params.addValue('sorts', sorts, true);
											params.addValue('groupFieldId', groupFieldId, true);
											
								            params.addValue('emailKeyword',emailKeyword);	    
								            params.addValue('smsKeyword',smsKeyword);
								            params.addValue('imKeyword',imKeyword);	                	
								            	
								            params.addValue('emailDisplayResult',emailDisplayResult);
								            params.addValue('mobileDisplayResult',mobileDisplayResult);
								            params.addValue('imDisplayResult',imDisplayResult);
								            params.addValue('mobileStatus',mobileStatus);							            
								            
								            params.addValue('responseFormat',response, true);   
	
								            params.addValue('messagingType',messagingType);            
								            params.addValue('enterFormatMessage',enterFormatMessage);            
	
								            params.addValue('queryType',queryType);  
								            params.addValue('dsStatus',ds);            
								            params.addValue('viewID',viewID);            
								            params.addValue('sql',sql);
								            params.addValue('projectId',classroot.maintab.currProjectId);
								            
											params.addValue('WSDLUrl', classroot.currentUrl, true);
											params.addValue('operation', classroot.currentOperation, true);		
											params.addValue('service', classroot.currentService, true);
											params.addValue('port', classroot.currentPort, true);																					                										            
	
							        		var valueOrConditions = [];
							        		var ids = [];
							        		var rows = [];
							        		var types = [];
							        		var useds = [];
							        		var indents = [];
							        		var parents = [];
							        		var numbers = [];
							        		var fields = [];
							        		var compIDs = [];	
							        		var comparisons = [];
							        		var values = [];
							        		var connections = [];
							        		var value2s = [];	// The second value field, 'value2'. It is only used and visible when
																//	dealing with the 'is between' and 'is not between' operators.					
							        		var groupings = [];
							        		var userInputSeqs = [];
							        		var userInputSeqs2 = [];
											
											var tableIndex = 0;
											
						               		var allNodes = qb_query_builder_query_msg_new.getFirstChild();
											var rootNode = allNodes.getElementsByTagName("criteria")[0];											
							        		var numberNodes = rootNode.childNodes.length;
					                		for (var i = 0; i < numberNodes; i++){
												queryNode = rootNode.childNodes[i];
												var id = queryNode.getAttr("id");
							        			var row = queryNode.getAttr("row");
							        			var type = queryNode.getAttr("type");
							        			var used = queryNode.getAttr("used");
							        			var indent = queryNode.getAttr("indent");
								        		var valueOrCondition = queryNode.getAttr("valueOrCondition");
							        			var number = queryNode.getAttr("number");	
							        			var parent = queryNode.getAttr("parent");		        		
								        		var field = queryNode.getAttr("field");  			        		
								        		var compID = queryNode.getAttr("compID");
							        			var comparison = queryNode.getAttr("comparison");			        		
								        		var value = queryNode.getAttr("value");  			        		
								        		var connection = queryNode.getAttr("connection");
							        			var value2 = queryNode.getAttr("value2");			        		
								        		var grouping = queryNode.getAttr("grouping");
								        		var userInputSeq = queryNode.getAttr("valueUserInput");
								        		var userInputSeq2 = queryNode.getAttr("value2UserInput");
								        		
								        		ids[tableIndex] = id;
								        		rows[tableIndex] = row;
								        		types[tableIndex] = type;
												useds[tableIndex] = used;
												indents[tableIndex] = indent;
							        			valueOrConditions[tableIndex] = valueOrCondition;
							        			numbers[tableIndex] = number;
							        			parents[tableIndex] = parent;
							        			fields[tableIndex] = field;
							        			compIDs[tableIndex] = compID;	
								        		comparisons[tableIndex] = comparison;
								        		values[tableIndex] = value;
								        		connections[tableIndex] = connection;
								        		value2s[tableIndex] = value2;
								        		groupings[tableIndex] = grouping;
								        		userInputSeqs[tableIndex] = userInputSeq;
								        		userInputSeqs2[tableIndex] = userInputSeq2;
							        			
							        			tableIndex++;
							        		}										
											//========= End UI Base MSG Text
									         var connID = classroot.newMsg.newMsgTabs.newMsgTabp.addDBN.cbxDbN.getValue();
											params.addValue('connID', connID, true);
											params.addValue('queryId', -1, true);
											params.addValue('tableID', viewID, true);
											params.addValue('sqlText', sql, true);
											params.addValue('ids', ids, true);
											params.addValue('rows', rows, true);
											params.addValue('types', types, true);
											params.addValue('useds', useds, true);
											params.addValue('indents', indents, true);
											params.addValue('valueOrConditions', valueOrConditions, true);
											params.addValue('parents', parents, true);
											params.addValue('numbers', numbers, true);
											params.addValue('fields', fields, true);
											params.addValue('compIDs', compIDs, true);			
											params.addValue('comparisons', comparisons, true);
											params.addValue('values', values, true);
											params.addValue('connections', connections, true);
											params.addValue('value2s', value2s, true);
											params.addValue('groupings', groupings, true);
											params.addValue('sorts', sorts, true);
											params.addValue('groupFieldId', groupFieldId, true);
											params.addValue('userInputSeqs', userInputSeqs, true);
											params.addValue('userInputSeqs2', userInputSeqs2, true);
	
											dbMsgTest.setQueryString(params);
											dbMsgTest.doRequest();
											
											//Animate
											msgHolderViewAnimation.startMessageTest.doStart();
											msgResultNAnimation.startMessageTest.doStart();
											msgHolderViewAnimation.setAttribute("bgcolor", 0xebf3fc);
											msgHolderViewAnimation.msgTypeView.newMessagingTypeRadioN.radio1._title.setAttribute("fgcolor", 0x454545);
											msgHolderViewAnimation.msgTypeView.newMessagingTypeRadioN.radio2._title.setAttribute("fgcolor", 0x454545);
											msgHolderViewAnimation.msgTypeView.newMessagingTypeRadioN.radio3._title.setAttribute("fgcolor", 0x454545);
											userInputTxt.setAttribute("fgcolor", 0x454545);
										]]>
					                	</method>
					                </mdn_button>
								</view>	
							</view>
	               			<scrolledittext name="msgResultN" id="msgResultNAnimation" datapath="dbMsgTest:/root/@replyMessaing" width="621" height="359"
					            defaultfontname="Arial" 
					            defaultfontcolor="black"
					            border="1" y="73" opacity="0">
					            <animator attribute="opacity" name="startMessageTest" to="1" duration="1000" start="false"></animator>
	               			</scrolledittext>
	               </tabpane>
                
                
            </tabs> 
	        <mdn_button datapath="gui:/gui-labels/btn-save/@label" width="50" x="580" y="473">
	            <method event="onclick">
	                	<![CDATA[
	                	
			                var queryName = classroot.newMsg.newMsgTabs.newMsgTabp.name.nameTxt.getText();
			                var queryDescription = classroot.newMsg.newMsgTabs.newMsgTabp.description.txtDesc.getText();
	                		var timeout = classroot.newMsg.newMsgTabs.newMsgTabp.timeout.timeoutTxtN.getText();

	                		var sorts = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.sortTxtAreaView.txtSort2N.getText();
	                		var groupFieldName = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.groupFieldView.comGroupField2N.getText();
	                		var groupFieldId = classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortLayoutN.groupFieldView.comGroupField2N.getValue();
	                		
	                		var dbId = classroot.newMsg.newMsgTabs.newMsgTabp.addDBN.cbxDbN.getValue();
	                		
	        				//Messaging Info 
	        		        var emailId = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.cbxEmailAddressN.getValue();
			                var emailKeyword = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.txtEmailKeyN.getText();
			                var emailDisplayResult = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.email.txtEmailDisplayResultN.getText();

	        		        var smsKeyword = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtSmsKeyN.getText();
	                		var imKeyword = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImKeyN.getText();
	        		        var mobileStatus = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.cbxMobileNumberN.getValue();
	                		var mobileDisplayResult = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.mobile.txtMobileDisplayResultN.getText();
			                var imStatus = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.cbxImNameN.getValue();
	        		        var imDisplayResult = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesN.im.txtImDisplayResultN.getText();
	        		        var responseFormat = classroot.newMsg.newMsgTabs.tabmbN.msgInfoSliders.msgDetailesResN.responseView.newResponseFormatTxtAreaN.getText();
	        		        
	        		        var wsId = classroot.newMsg.newMsgTabs.newMsgTabp.addWS.cbxWebServ.getValue();
	        		        
	                		var tableID = classroot.newMsg.newMsgTabs.newMsgTabp.addVTN.cbxQueryN.getValue();
	                        var queryId = "0";
	                		var saveState = "0";

	                		var ds = classroot.newMsg.newMsgTabs.newMsgTabp.datasource.dsStatusN.getValue();
	                		
	                		Debug.write(":::::::::::::::::::::::::>> wsId = " + wsId + ", ds->>>" + ds );
	                		
	                		
							var sqlText = classroot.txt_qb_sql_new.getText();
			                var queryType = classroot.newMsg.newMsgTabs.newMsgTabp.addQTN.qTypeN.getValue();
			                
			                var sqlTextFromQueryBuilder = null;
			                if(tableID != null && tableID != ''){
								if(queryType == '1') {
	
									queryType = "select";
			                        sqlTextFromQueryBuilder = classroot.qb_query_builder_message_new._qb_controller.getSQL();
			                		if (groupFieldName.length > 0){
			                			sqlTextFromQueryBuilder += " GROUP BY " + groupFieldName;
			                		}
			                		if (sorts.length > 1){
			                			sqlTextFromQueryBuilder += " ORDER BY " + sorts;
			                		}	
								}else if(queryType == '2'){
	
									queryType = "update";
									sqlTextFromQueryBuilder = classroot.qb_query_builder_message_new._qb_controller.getSQLForUpdate();
	
								}else if(queryType == '3'){
	
									queryType = "insert";
									sqlTextFromQueryBuilder = classroot.qb_query_builder_message_new._qb_controller.getSQLForInsert();
								}
							}
							if (sqlText == null || sqlText == "" || sqlText == undefined){
								sqlText = sqlTextFromQueryBuilder;
							}
	                		
			        		var valueOrConditions = [];
			        		var ids = [];
			        		var rows = [];
			        		var types = [];
			        		var useds = [];
			        		var indents = [];
			        		var parents = [];
			        		var numbers = [];
			        		var fields = [];
			        		var compIDs = [];	
			        		var comparisons = [];
			        		var values = [];
			        		var connections = [];
			        		var value2s = [];	// The second value field, 'value2'. It is only used and visible when
												//	dealing with the 'is between' and 'is not between' operators.					
			        		var groupings = [];
			        		var userInputSeqs = [];
			        		var userInputSeqs2 = [];
							
							var tableIndex = 0;
			        		
			        		//while (ok){
	                		var allNodes = qb_query_builder_query_msg_new.getFirstChild();
							var rootNode = allNodes.getElementsByTagName("criteria")[0];
			        		var numberNodes = rootNode.childNodes.length;
	                		for (var i = 0; i < numberNodes; i++){
								queryNode = rootNode.childNodes[i];
								var id = queryNode.getAttr("id");
			        			var row = queryNode.getAttr("row");
			        			var type = queryNode.getAttr("type");
			        			var used = queryNode.getAttr("used");
			        			var indent = queryNode.getAttr("indent");
				        		var valueOrCondition = queryNode.getAttr("valueOrCondition");
			        			var number = queryNode.getAttr("number");	
			        			var parent = queryNode.getAttr("parent");		        		
				        		var field = queryNode.getAttr("field");  			        		
				        		var compID = queryNode.getAttr("compID");
			        			var comparison = queryNode.getAttr("comparison");			        		
				        		var value = queryNode.getAttr("value");  			        		
				        		var connection = queryNode.getAttr("connection");
			        			var value2 = queryNode.getAttr("value2");			        		
				        		var grouping = queryNode.getAttr("grouping");
				        		var userInputSeq = queryNode.getAttr("valueUserInput");
				        		var userInputSeq2 = queryNode.getAttr("value2UserInput");
				        		
				        		ids[tableIndex] = id;
				        		rows[tableIndex] = row;
				        		types[tableIndex] = type;
								useds[tableIndex] = used;
								indents[tableIndex] = indent;
			        			valueOrConditions[tableIndex] = valueOrCondition;
			        			numbers[tableIndex] = number;
			        			parents[tableIndex] = parent;
			        			fields[tableIndex] = field;
			        			compIDs[tableIndex] = compID;	
				        		comparisons[tableIndex] = comparison;
				        		values[tableIndex] = value;
				        		connections[tableIndex] = connection;
				        		value2s[tableIndex] = value2;
				        		groupings[tableIndex] = grouping;
				        		userInputSeqs[tableIndex] = userInputSeq;
				        		userInputSeqs2[tableIndex] = userInputSeq2;
			        			
			        			tableIndex++;
			        		}		
		        			controller.saveQueryAndMsgInfo(saveState, classroot.maintab.currProjectId, queryId, queryName, queryDescription, 
		        			tableID, queryType, sqlText, ids, rows, types, useds, indents, valueOrConditions, parents, numbers, fields,
		        			 compIDs, comparisons, values, connections, value2s, groupings, userInputSeqs, userInputSeqs2, sorts, groupFieldId,
		        			 "1",dbId, emailId, emailKeyword, smsKeyword, imKeyword, mobileStatus, imStatus, emailDisplayResult,
		        			  mobileDisplayResult, imDisplayResult, responseFormat, ds, timeout, wsId);						
	                	]]>
	            </method>
	            <hinttip tipid="ENDUSERACCESS-msgquery-save-button" />
	        </mdn_button>
            
            <view name="errorView" y="473">
	            <text name="txtErrorMsgQN" text="" fgcolor="red" fontstyle="bold" resize="true" width="600" height="60" multiline="true" />
    	    </view>
		</view>    
	    <!-- Deals with the query result. -->
	   	<datapointer xpath="qb_query_result_new:/root" rerunxpath="true"
		    ondata="processData();" onerror="canvas.showError(this);"
		    ontimeout="canvas.showTimeout();">
		    <method name="processData">
		        Debug.write("received qb_query_result_new return data ");
		        var result = this.getNodeText();
		        var action = this.getNodeAttribute('action');
		        var errorMessage = this.getNodeAttribute('errorMessage');
		        var updateData = false;
		        if (action == 'getUpdateQueryResult'){
		            classroot.newMsg.newMsgTabs.qResultTab1.resultGridN.setVisible(false);
		            //classroot.newMsg.newMsgTabs.qResultTab1.faildTxtN.setVisible(false);
		            if (result == 'OK'){
		                classroot.newMsg.errorView.txtErrorMsgQN.setText('Update Query Successful: ' + errorMessage);
		            } else {
		                classroot.newMsg.errorView.txtErrorMsgQN.setText('Update Query Failed: ' + errorMessage);
		            }
				}else if(action == 'getInsertQueryResult'){
		            classroot.newMsg.newMsgTabs.qResultTab1.resultGridN.setVisible(false);
		            //classroot.newMsg.newMsgTabs.qResultTab1.faildTxtN.setVisible(false);
		            if (result == 'OK'){
		                classroot.newMsg.errorView.txtErrorMsgQN.setText('Insert Query Successful: ' + errorMessage);
		            } else {
		                classroot.newMsg.errorView.txtErrorMsgQN.setText('Insert Query Failed: ' + errorMessage);	
		            }
		        }else if (action == 'getEmptySelectQueryResult'){
		        	classroot.newMsg.errorView.txtErrorMsgQN.setText('');
		        }else {//if(action == 'getSelectQueryResult'){
		        		Debug.write("+++++++++++ heaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaarrr result = " + result);
		               if (result == 'NoData'){
		               		classroot.newMsg.errorView.txtErrorMsgQN.setText('Select Query Result: No Data');
		               		classroot.newMsg.newMsgTabs.qResultTab1.resultGridN.setVisible(false);
		               }else if (result == 'Failed'){
		               		classroot.newMsg.errorView.txtErrorMsgQN.setText('Select Query Failed: ' + errorMessage);
		               		classroot.newMsg.newMsgTabs.qResultTab1.resultGridN.setVisible(false);
		               }else{
			                //Animate
							qResultViewAnimate.startQuery.doStart();
							resultGridNAnimate.startQueryOpacity.doStart();
							qResultViewAnimate.setAttribute("bgcolor", 0xebf3fc);
							qResultViewAnimate.wholeUserInputView.labeltext.setAttribute("fgcolor", 0x454545);
							qResultViewAnimate.wholeUserInputView.userInputTxtN.setAttribute("fgcolor", 0x454545);
			               	//Animate End
			               classroot.newMsg.errorView.txtErrorMsgQN.setText('Select Query Successful');
			               classroot.newMsg.newMsgTabs.qResultTab1.resultGridN.setVisible(true);
			               //classroot.newMsg.newMsgTabs.qResultTab1.faildTxtN.setVisible(false);
			               
			               var initialLoad = classroot.getAttribute("initialLoadColumns");
			               if (initialLoad == true){
					       		classroot.setAttribute("initialLoadColumns", false);
					       }else{
				               //Try to set the column name again
				               var viewChanged = classroot.getAttribute("viewChanged");
				               if (viewChanged == true){			               		
					               Debug.write("Try to set the column name again");
					               classroot.newMsg.newMsgTabs.qResultTab1.resultGridN.inferColumns();
					               classroot.setAttribute("viewChanged", false);
				               }else{
									Debug.write("View is same, do not need to set the column name again");
				               }				       		
					       }
			           }
		        }		        
		    </method>
	   </datapointer>		
       <datapointer xpath="qb_query_builder_query_msg_new:/root" rerunxpath="true"
	        ondata="processData();" 
	        onerror="canvas.showError(this);processData();"
	        ontimeout="canvas.showTimeout();processData();">
	        <method name="processData">
	            <![CDATA[
	            Debug.write("received access data: " + this.serialize());
				mdnIsLoading.letsCloseLoading();
				
				var result = this.getNodeText();
				Debug.write("qb_query_builder_query_msg_new: [", result, "]");
				if (result != null && result != ""){
					Debug.write("qb_query_builder_query_msg_new get error, show error message");
					dataError();
					classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.text1.setText(result);
					classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.text2.setText("");
				}else{
					dataOk();
					classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.text1.setText("You first need to select a Web Service");
					classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.text2.setText("before you can use the Query Builder.");
				}
				
	            ]]>
	        </method>
	        <method name="dataOk">
           		classroot.qb_query_builder_message_new.setVisible(true);
           		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(false);
           		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.setVisible(false);                        		
           		//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.directSglBtnN.setVisible(true);
           		//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortAlertTxtN.setVisible(false);	
           		//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.setVisible(false);        
	        </method>
	        <method name="dataError">
           		classroot.qb_query_builder_message_new.setVisible(false);
           		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtN.setVisible(false);
           		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.alertTxtWebServiceN.setVisible(true);                        		
           		//classroot.newMsg.newMsgTabs.tabqbN.qbSliders.criteriaN.directSglBtnN.setVisible(true);
           		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.sortAlertTxtN.setVisible(false);	
           		classroot.newMsg.newMsgTabs.tabqbN.qbSliders.sortOrderN.setVisible(false);        
	        </method>
	    </datapointer>			
	</class>
	<class name="msgInfoView" width="${projectTabs.currTab._borderView._projectView._rightView.width - 1}" 
	        height="${projectTabs.currTab._borderView._projectView._rightView._upperPart.height - projectTabs.currTab._borderView._projectView._rightView._upperPart._header.height - 1}">
        
        <attribute name="maintab"/>
        <attribute name="previousMsgId"/>
        <attribute name="viewChanged" type="boolean" value="false"/>
		<attribute name="currMsgId"/>        
		<attribute name="initialLoad" type="boolean" value="true"/>
		<attribute name="initialLoadSqlBox" type="boolean" value="true"/>
		<attribute name="initialLoadColumns" type="boolean" value="true"/>
		<attribute name="qb_query_builder_messageEdit"/>
		<attribute name="txt_qb_sql_textEdit"/>
        
        <method name="clearData">
        	//msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.setAttribute('selected', true);
	        errorView.txtErrorMsgQEditN.setText("");
	        msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.wholeUserInputView.txtUserInput.setText("");

            msgInfoViewTabs.msgInfoViewUpperTabs.msgTest_1.msgHolderView.view2.enterFormatMessageTxtN.setText("");
            msgInfoViewTabs.msgInfoViewUpperTabs.msgTest_1.msgHolderView.view3.msgResultEditN.setText("");
            
			//classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgTest_1.view2.enterFormatMessageTxtN
			//classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgTest_1.view3.msgResultEditN   
			
    	</method>
    	<view name="msgInfoViewTabs" width="638" height="${immediateparent.height - 80}" x="1" y="1" >
           <tabs name="msgInfoViewUpperTabs" width="${immediateparent.width}" height="505" tabspacing="1" bgcolor="0x4386cc">
                <attribute name="tabclass" value="tabWhiteTab" type="string" />
                <method event="oninit">
					<![CDATA[
               			//Pushes the first tab in
						this.subviews[0].layouts[0].setAttribute("inset", 15);
					]]>
				</method>
                <tabpane name="msgInfoViewPropsTab" datapath="gui:/gui-labels/tab-properties/@label" selected="true">
                     <method event="onselect" reference="this.tab">
                    	if (this.tab.selected) {
							Debug.write("Selected Query Properties Edit Tab");
							classroot.msgInfoViewTabs.messageResultTabsN.setVisible(false); 
							classroot.errorView.txtErrorMsgQEditN.setText("");
							
/*
				            var p = dbMsg.getPointer();
				            p.selectChild(1);
				            var msgId = p.p.getAttr('msgId');

							var ds = p.p.getAttr('queryDSId');
							if(ds == 1){
								editWS.setVisible(false);
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editQTN.setVisible(true);								
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editDBN.setVisible(true);
								editVT.setVisible(true);
							}else{
								editWS.setVisible(true);
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editQTN.setVisible(false);								
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editDBN.setVisible(false);
								editVT.setVisible(false);
							} */
																		
							//controller.displayMsgInfo(msgId);	
							//params.addValue('action', 'displayQueryBuilderXML', true); 		
						}
						
						
					</method>  
		            <simplelayout axis="y" spacing="10"/>
			        <view name="name" width="550">
			            <simplelayout axis="x" spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-name/@label" width="150" fgcolor="0x454545"></text>
			            <edittext name="txtNameEditN" width="250" datapath="dbMsg:/root/@name" >						    
						    <handler name="ondata">
						        <![CDATA[
						        //Manage DS Status//
								//editWS editQTN editDBN editVTN
					            var p = dbMsg.getPointer();
					            p.selectChild(1);
					            //var msgId = p.p.getAttr('msgId');
	
								var ds = p.p.getAttr('queryDSId');
								if(ds == 1){
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editWS.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editQTN.setVisible(true);								
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editDBN.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editVTN.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.bordertheedittext.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.treeManual.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.treeWizard.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.thisismyquerybuilder.setHeight(110);
									
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.wsResultFormat.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.wsResultFormat2.setVisible(false);									
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.defaultBtnName.setVisible(true);									
								}else{
									//Query Builder Components>>
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editWS.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editQTN.setVisible(false);	
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editDBN.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editVTN.setVisible(false);
									Debug.write("heaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaarrr!!");
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.bordertheedittext.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.treeManual.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.treeWizard.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.thisismyquerybuilder.setHeight(300);
									//<<
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.wsResultFormat.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.wsResultFormat2.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.defaultBtnName.setVisible(false);
								}						        
						        ////////////////////
						        
						        var oldId = classroot.getAttribute("previousMsgId");
						        var newId = classroot.getAttribute("currMsgId").getText();
						        var initialLoad = classroot.getAttribute("initialLoad");
						        
						        Debug.write("oldId", oldId, "newId", newId, "initialLoad", initialLoad);
						        if (newId != null && newId != undefined && newId != "" && newId != -1){
							        if (initialLoad == true){
							        	Debug.write("=======================INITIAL LOAD");
							        	classroot.setAttribute("previousMsgId", newId);
							        	controller.loadQueryBuilder();
							        	classroot.setAttribute("initialLoad", false);
							        	classroot.setAttribute("txt_qb_sql_textEdit", classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.bordertheedittext.qb_sql_textEdit_n);

				           				classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.completeInstantiation();
				           				Debug.write("current sql edit box for existing query builder", classroot.txt_qb_sql_textEdit);
				           				classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.thisismyquerybuilder.setAttribute("sqlEditBox", classroot.txt_qb_sql_textEdit);
							        	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.thisismyquerybuilder.qb_controller_name.updateSqlEditBox();
							        }
							        else if (oldId != newId){
							        	Debug.write("========================RELOAD BECAUSE MESSAGE ID CHANGED");
							        	controller.loadQueryBuilder();
							        	classroot.setAttribute("previousMsgId", newId);
						               	
						               	Debug.write("Try to refresh the column name again");
						               	controller.getEmptySelectQueryResultEdit();
						               	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.refresh();
							           	classroot.setAttribute("viewChanged", true);
							        }else{
							        	Debug.write("========================NO RELOAD BECAUSE MESSAGE ID NOT CHANGED================");
							        }
						        }
						        ]]>
						    </handler>
						    <!--  
						    <datapath xpath="dbMsg:/root/@name">
						        <handler name="onclones">
						            var lastClone = clones[clones.length - 1];
						            if (!this['del']) {
						                this.del = new LzDelegate(this,"replicationDone");
						                this.del.register(lastClone, "ontext");
						            }
						        </handler>
						        <method name="replicationDone">
						            Debug.write("********************* MESSAGE NAME Replication Done!");		            
						        </method>
						    </datapath>	-->			            
			            </edittext>
			            <text name="txtMsgIdN" width="250" datapath="dbMsg:/root/@msgId" visible="false" >		            	
			            	<method event="oninit">
			            		classroot.setAttribute("currMsgId", this);
			            	</method>
			            </text>          
			            <text name="dbIdInDBN" width="250" datapath="dbMsg:/root/@dbId" visible="false" />
			            <text name="isUpdatedN" width="250" text="No" visible="false" />    
			            <text name="isChangedDbComboN" width="250" text="No" visible="false" />  
			            <text name="viewIDVar" width="250" datapath="dbMsg:/root/@viewOrTableId" visible="false" />
			            <hinttip tipid="ENDUSERACCESS-msgquery-name" />              
			        </view>
			        <view name="description" width="550">
			            <simplelayout axis="x" spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-description/@label" width="150" fgcolor="0x454545"></text>
			            <edittext name="txtDescriptionEditN" width="250" datapath="dbMsg:/root/@description" />
			            <hinttip tipid="ENDUSERACCESS-msgquery-description" />
			        </view>
				    <view name="datasource" width="550">
		         	   <simplelayout axis="x" spacing="2"/>
        				<text datapath="gui:/gui-labels/lbl-select-datasource/@label" width="150" fgcolor="0x454545"></text>
			            <text name="queryDSNameN" width="250" datapath="dbMsg:/root/@queryDSName" /> <!-- datapath="dbMsg:/root/@queryDSName" --> 
			            <text name="queryDSIdN" width="250" datapath="dbMsg:/root/@queryDSId" visible="false" />
					</view>
				   <view name="editWS" width="550">
		         	   <simplelayout axis="x" spacing="2"/>
        				<text datapath="gui:/gui-labels/lbl-select-ws/@label" width="150" fgcolor="0x454545" />
			            <text name="wsName" width="250" datapath="dbMsg:/root/@wsOperationName"/>
					</view>
					<view name="editQTN" width="550">
						<simplelayout axis="x" spacing="2"/>
			            <text datapath="gui:/gui-labels/lbl-query-type/@label" width="150" fgcolor="0x454545" />
			            <text name="qTypeEditN" width="250" datapath="dbMsg:/root/@queryTypeName" />
			            <text name="qTypeEditValueN" width="250" datapath="dbMsg:/root/@queryTypeValue" visible="false" />
					</view>
					 <view name="editDBN" width="550">
			            	<simplelayout axis="x" spacing="2"/>
           					<text datapath="gui:/gui-labels/lbl-select-db/@label" width="150" fgcolor="0x454545" />
           					<text width="250" datapath="dbMsg:/root/@dbName" />
				   </view>
			       <view name="editVTN" width="550">
			            <simplelayout axis="x" spacing="2"/>
			            <text name="vtLableEditN" width="150" datapath="dbMsg:/root/@vtLable" fgcolor="0x454545" />
			            <text width="250" datapath="dbMsg:/root/@viewOrTableName" />
               		</view>
		             <view name="timeout">
						<simplelayout axis="x" spacing="2"/>
						<text datapath="gui:/gui-labels/lbl-timeout/@label" width="150" fgcolor="0x454545" />
		             	<edittext name="timeoutTxtEditN" datapath="dbMsg:/root/@timeout" width="50"/>
		             	<hinttip tipid="ENDUSERACCESS-msgquery-timeout" />
		             </view>
	                <view width="620">
				      <mdn_button datapath="gui:/gui-labels/btn-save/@label" width="50" x="570" y="29">
				          <method event="onclick">
				            var p = dbMsg.getPointer();
				            p.selectChild(1);
				            var viewOrTableIdInDB = p.p.getAttr('tableId');
				            
				            var p = dbMsg.getPointer();
				            p.selectChild(1);
				            var msgId = p.p.getAttr('msgId');
				            var viewID2 = p.p.getAttr('viewOrTableId');
				            var connIDConstants = p.p.getAttr('dbId');
				          
			                var queryName = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.name.txtNameEditN.getText();
	        		        var queryDescription = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.description.txtDescriptionEditN.getText();
	                		var dbId = cbxDbEdit.getValue();
	                		var tableID = cbxQueryEdit.getValue();
	                		
	                        var queryId = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.name.txtMsgIdN.getText();
	                		var saveState = "1";
			                var queryType = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editQTN.qTypeEditN.getText();//name

			                var queryDSName = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.datasource.queryDSNameN.getText();//name
			                var queryDSId = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.datasource.queryDSIdN.getText();//Id
			                
			                var timeout = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.timeout.timeoutTxtEditN.getText();
			        		controller.saveQueryMsgProps(saveState, classroot.maintab.currProjectId, queryId, queryName, queryDescription, tableID, queryType ,"1",dbId, viewOrTableIdInDB, timeout, queryDSName, queryDSId);
				          </method>
				          <hinttip tipid="ENDUSERACCESS-msgquery-save-button" />
				      </mdn_button>
			        </view> 
                </tabpane>
                
                <tabpane name="tabqbN" datapath="gui:/gui-labels/tab-query-builder/@label">
                	<method event="onselect" reference="this.tab">
						<![CDATA[						
                    	if (this.tab.selected) {
							Debug.write("Selected Query builder tab");
							
						        //Manage DS Status//
								//editWS editQTN editDBN editVTN
					            var p2 = dbMsg.getPointer();
					            p2.selectChild(1);
					            //var msgId = p.p.getAttr('msgId');
	
								var ds = p2.p.getAttr('queryDSId');
								Debug.write("onSelect QBN tab #####################!!" + ds);								
								if(ds == 1){
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editWS.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editQTN.setVisible(true);								
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editDBN.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editVTN.setVisible(true);
									
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.bordertheedittext.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.treeManual.setVisible(true);
									
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.treeWizard.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.thisismyquerybuilder.setHeight(110);
								}else{
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editWS.setVisible(true);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editQTN.setVisible(false);	
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editDBN.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgInfoViewPropsTab.editVTN.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.bordertheedittext.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.treeManual.setVisible(false);
									
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.treeWizard.setVisible(false);
									classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.thisismyquerybuilder.setHeight(300);
								}						        
							//////////////////////////////////////////////////////////////////////
							
							//classroot.msgInfoViewTabs.queryResultTabsN.setVisible(true);
							//classroot.msgInfoViewTabs.messageResultTabsN.setVisible(false);
							classroot.errorView.txtErrorMsgQEditN.setText("");
							
				            var p = dbMsg.getPointer();
				            p.selectChild(1);
				            var msgId = p.p.getAttr('msgId');
				            
				            var queryType = p.p.getAttr('queryTypeName');
					            
							if( queryType == 'select'){
				               	classroot.qb_query_builder_messageEdit.setAttribute("update", false);
				               	classroot.qb_query_builder_messageEdit.setAttribute("insertQuery", false);
				               	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.setAttribute("visible", true);
				       		}else if(queryType == 'update'){//update
				               	classroot.qb_query_builder_messageEdit.setAttribute("update", true);
				               	classroot.qb_query_builder_messageEdit.setAttribute("insertQuery", false);
				               	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.setAttribute("visible", false);
				   	       	}else if(queryType == 'insert'){//Insert
				               	classroot.qb_query_builder_messageEdit.setAttribute("update", false);
				               	classroot.qb_query_builder_messageEdit.setAttribute("insertQuery", true);
				               	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.setAttribute("visible", false);
				           	}		
				           	tabQbSlider.completeInstantiation();
				           	classroot.setAttribute("txt_qb_sql_textEdit", tabQbSlider.criteriaEditN.bordertheedittext.qb_sql_textEdit_n);
				           	Debug.write("current sql edit box for existing query builder", classroot.txt_qb_sql_textEdit);
				           	tabQbSlider.criteriaEditN.thisismyquerybuilder.setAttribute("sqlEditBox", classroot.txt_qb_sql_textEdit);
				           	var initialLoadSqlBox = classroot.getAttribute("initialLoadSqlBox");
				           	if (initialLoadSqlBox == true){
							    Debug.write("=======================INITIAL LOAD");
							    classroot.setAttribute("initialLoadSqlBox", false);
				           		//tabQbSlider.criteriaEditN.thisismyquerybuilder.qb_controller_name.updateSqlEditBox();
				           	}
						}
						]]>
					</method>  
                    <simplelayout axis="y" spacing="2"/>
          			<tabslider name="tabQbSlider" sliderRH="true" width="620" height="434"> 

		                <tabelement name="criteriaEditN" datapath="gui:/gui-labels/slider-criteria/@label" 
		                                        width="${immediateparent.width}" align="center" selected="true">
		                    <attribute name="wizardIsOpen" value="true" type="boolean" />
	                        <attribute name="manualIsOpen" value="true" type="boolean" />
	                        <tree name="treeWizard" open="true" text="Wizard" expander="lztree_plusminus_rsc" icon="lztree_wizard_rsc" style="null" styleable="false">
					        	<method event="oninit">
					        		//Set White
					        		this.treeitem.subviews[0].setAttribute("fgcolor", 0xFFFFFF);
					        		this.treeitem.subviews[2].setAttribute("fgcolor", 0xFFFFFF);
					        	</method>
					        	<method event="onopen">
					        		if(this.open) {
					        			//Switch
					        			parent.setAttribute("wizardIsOpen", true);
					        			//Open Wizard
					        			if(parent.manualIsOpen) {
					        				parent.bordertheedittext.scrollBorderOpenAnimatorHeight.doStart();
					        				parent.bordertheedittext.scrollBorderOpenAnimator.doStart();
					        				parent.thisismyquerybuilder.queryOpenAnimator.doStart();
					        				parent.treeManual.treeManualOpenAnimator.doStart();
					        			} else {
					        				parent.treeManual.treeManualCloseAnimatorWizard.doStart();
					        				parent.thisismyquerybuilder.manualCloseAnimator.doStart();
					        				parent.bordertheedittext.collapseHeight.doStart();
					        				parent.bordertheedittext.collapseHeightY.doStart();
					        			}
					        		} else {
					        			//Switch
					        			parent.setAttribute("wizardIsOpen", false);
					        			//Close Wizard
				        				parent.treeManual.setAttribute("open", true);
					        		}
					        	</method>
					        </tree>
	                        <querybuilder name="thisismyquerybuilder" bgcolor="white" width="602" height="110" y="20"> 
				            	<method event="oninit">
				            		classroot.setAttribute("qb_query_builder_messageEdit", this);
				            		this.setAttribute("insertQuery", false);
				            		Debug.write("current sql edit box for existing query builder", classroot.txt_qb_sql_textEdit);
				            		//this.setAttribute("sqlEditBox", classroot.txt_qb_sql_textEdit);
				            		this.setAttribute("sqlEditBox", classroot.txt_qb_sql_textEdit);//parent.bordertheedittext.qb_sql_textEdit_n);
				            		this.setAttribute("qbDatapath", "qb_query_builder_query_msg:/");
				            		this.setAttribute("qbDataset", qb_query_builder_query_msg);
				            		//this.setAttribute("qbcontrollerDatapath", "qb_query_builder_query_msg:/root/criteria");
				            		//this.setAttribute("conditionDatapath", "qb_query_builder_query_msg:/root/criteria/node");
				            	</method>
				            	<animator name="queryCloseAnimator" attribute="height" to="0" duration="250" start="false">
						            <handler name="onstop">
						            	parent.setAttribute("visible", false);
						            </handler>
					       		</animator>
					       		<animator name="queryOpenAnimator" attribute="height" to="110" duration="250" start="false">
					       			<handler name="onstart">
						                parent.setAttribute("visible", true);
						            </handler>
					       		</animator>
					       		<animator name="manualCloseAnimator" attribute="height" to="307" duration="250" start="false">
					       			<handler name="onstart">
						                parent.setAttribute("visible", true);
						            </handler>
					       		</animator>		                            
	                        </querybuilder >
	                        <tree name="treeManual" open="true" text="Manual" expander="lztree_plusminus_rsc" icon="lztree_manual_rsc" style="null" styleable="false" y="138">
					        	<method event="oninit">
					        		//Set White
					        		this.treeitem.subviews[0].setAttribute("fgcolor", 0xFFFFFF);
					        		this.treeitem.subviews[2].setAttribute("fgcolor", 0xFFFFFF);
					        	</method>
					        	<method event="onopen">
					        		if(this.open) {
					        			//Switch
					        			parent.setAttribute("manualIsOpen", true);
					        			//Open Manual
					        			if(parent.wizardIsOpen) {
					        				parent.bordertheedittext.expandHeightY.doStart();
					        				parent.bordertheedittext.scrollBorderOpenAnimatorHeight.doStart();
					        				this.treeManualOpenAnimator.doStart();
					        				parent.thisismyquerybuilder.queryOpenAnimator.doStart();
					        			} else {
					        				parent.treeManual.treeManualCloseAnimator.doStart();
					        				parent.bordertheedittext.scrollBorderCloseAnimator.doStart();
					        				parent.bordertheedittext.scrollBorderCloseAnimatorHeight.doStart();
					        				parent.thisismyquerybuilder.queryCloseAnimator.doStart();
					        			}
					        		} else {
					        			//Switch
					        			parent.setAttribute("manualIsOpen", false);
					        			//Close Wizard
				        				parent.treeWizard.setAttribute("open", true);
					        		}
					        	</method>
					        	<animator name="treeManualCloseAnimator" attribute="y" to="20" duration="250" start="false">
					       		</animator>
					       		<animator name="treeManualOpenAnimator" attribute="y" to="138" duration="250" start="false">
					       		</animator>
					       		
					       		<animator name="treeManualCloseAnimatorWizard" attribute="y" to="335" duration="250" start="false">
					       		</animator>
					         </tree>
					       	 <view name="bordertheedittext" bgcolor="0x9c9c9c" width="602" height="197" y="157">
		                        <animator name="scrollBorderCloseAnimator" attribute="y" to="39" duration="250" start="false">
					       		</animator>
					       		<animator name="scrollBorderOpenAnimator" attribute="y" to="157" duration="250" start="false">
					       		</animator>
					       		<animator name="scrollBorderCloseAnimatorHeight" attribute="height" to="315" duration="250" start="false">
					       			<handler name="onstart">
						                parent.setAttribute("visible", true);
						            </handler>
					       		</animator>
					       		<animator name="scrollBorderOpenAnimatorHeight" attribute="height" to="197" duration="250" start="false">
					       			<handler name="onstart">
						                parent.setAttribute("visible", true);
						            </handler>
					       		</animator>
					       		
					       		<animator name="collapseHeight" attribute="height" to="0" duration="250" start="false">
					       			<handler name="onstop">
						            	parent.setAttribute("visible", false);
						            </handler>
					       		</animator>
					       		<animator name="collapseHeightY" attribute="y" to="355" duration="250" start="false">
					       		</animator>
					       		<animator name="expandHeightY" attribute="y" to="157" duration="250" start="false">
					       		</animator>
		                    	<scrolledittext name="qb_sql_textEdit_n" multiline="true" resizable="true" 
		                    		datapath="qb_query_builder_query_msg:/root/query/query" text="$path{'@sql'}"
		                    		width="${parent.width - 1}" height="${parent.height - 2}" x="1" y="1">
					            	<method event="oninit">
					            		classroot.setAttribute("txt_qb_sql_textEdit", this);
					            	</method>
		                    	</scrolledittext>
	                    	</view>	                       
		                </tabelement>
 		                <tabelement name="sortTabEditN" datapath="gui:/gui-labels/slider-sort-group-result/@label" align="center" > 
								<simplelayout axis="y" spacing="2"/>
		                        <view height="10"/>
		                        <view name="sortFieldView">
		                            <simplelayout axis="x" />
		                            <text datapath="gui:/gui-labels/lbl-field/@label" width="100" fgcolor="0xFFFFFF" />
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_field" />
					                <datacombobox name="lstSortFieldEditN" width="250" editable="false" bgcolor="${canvas.bgcolor}" shownitems="8"
										itemdatapath="qb_query_builder_query_msg:/root/query/query/field" textdatapath='@name' valuedatapath='@name' selectfirst="false">
					                </datacombobox>			                		                            		                            
		                        </view>
		                        <view name="sortOrderView">
		                            <simplelayout axis="x" />
		                            <text datapath="gui:/gui-labels/lbl-sort-order/@label" width="100" fgcolor="0xFFFFFF" />
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_order" />
		                            <combobox name="comSortOrderEditN" width="250" editable="false" shownitems="8">
		                                <textlistitem text="Ascending" selected="true"/>
		                                <textlistitem text="Descending"/>
		                            </combobox>
		                        </view>
		                        <view name="sortTextView" >
		                            <simplelayout axis="x"/>
		                            <text datapath="gui:/gui-labels/lbl-sorts/@label"  width="100" fgcolor="0xFFFFFF" />
		                            <hinttip tipid="ENDUSERACCESS-msgquery-sort_sort" />
		                            <edittext name="txtSortEditN" datapath="qb_query_builder_query_msg:/root/query/query" text="$path{'@sort'}" width="250" height="50" multiline="true"/>
		                        </view>
		                        <view>
		                            <simplelayout axis="x" spacing="2"/>
									<text text="" width="100"/>                            
		                            <mdn_button datapath="gui:/gui-labels/btn-add/@label">
					                	<method event="onclick">
					                	<![CDATA[	
					                		var sortField = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.sortFieldView.lstSortFieldEditN.getValue();
					                		var sortOrder = (classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.sortOrderView.comSortOrderEditN.getText() == "Ascending" ? "ASC" : "DESC");
					                		var sortStr = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.sortTextView.txtSortEditN.getText();

					                		if (sortField == null || sortField == "" || sortField == undefined){
					                			classroot.errorView.txtErrorMsgQEditN.setText('Please select sort field.');
					                			return;
					                		}
					                		
					                		var wholeSortStr = "";
					                		if (sortStr == null || sortStr == ""){
					                			wholeSortStr = sortField + " " + sortOrder;
					                			classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.sortTextView.txtSortEditN.setText(wholeSortStr);
					                		}
					                		else{
					                			wholeSortStr = sortStr + ", " + sortField + " " + sortOrder;
					                			classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.sortTextView.txtSortEditN.setText(wholeSortStr);
					                		}
					                		var sqlText = classroot.txt_qb_sql_textEdit.getText();
					                		if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_messageEdit._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("ORDER BY");
						                		if (firstIndex > 0){
						                			var lastIndex = sqlText.lastIndexOf("ASC");
						                			var lastIndex2 = sqlText.lastIndexOf("DESC");
						                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
						                			var firstPart="";
						          					var secondPart="";
						                			if (lastIndex > lastIndex2){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 4);
						                			}else if (lastIndex2 > lastIndex){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 5);
						                			}
						                			sqlText = firstPart + secondPart;
						                		}
						                	}
					                		if (wholeSortStr.length > 1){
					                			sqlText += " ORDER BY " + wholeSortStr;
					                		}		
					                		classroot.txt_qb_sql_textEdit.setText(sqlText);					                		
					                	]]>
					                	</method> 
					                	<hinttip tipid="ENDUSERACCESS-msgquery-sort_add" />                           
		                            </mdn_button>
		                            <mdn_button datapath="gui:/gui-labels/btn-remove/@label">
					                	<method event="onclick">
					                			classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.sortTextView.txtSortEditN.setText("");
					                		var sqlText = classroot.txt_qb_sql_textEdit.getText();
					                		if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_messageEdit._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("ORDER BY");
						                		if (firstIndex > 0){
						                			var lastIndex = sqlText.lastIndexOf("ASC");
						                			var lastIndex2 = sqlText.lastIndexOf("DESC");
						                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
						                			var firstPart="";
						          					var secondPart="";
						                			if (lastIndex > lastIndex2){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 4);
						                			}else if (lastIndex2 > lastIndex){
						                				firstPart = sqlText.substring(0, firstIndex-1);
						                				secondPart = sqlText.substring(lastIndex + 5);
						                			}
						                			sqlText = firstPart + secondPart;
						                		}		
					                		}
					                		classroot.txt_qb_sql_textEdit.setText(sqlText);	
					                	</method>
					                	<hinttip tipid="ENDUSERACCESS-msgquery-sort_remove" />                            
		                            </mdn_button>
		                        </view>
								<view height="10"/>
								<view name="groupFieldView" >
									<simplelayout axis="x"/>
			                        <text datapath="gui:/gui-labels/lbl-group-on/@label" width="100" fgcolor="0xFFFFFF" />
			                        <text name="groupFieldNameEdit" datapath="qb_query_builder_query_msg:/root/query/query/@groupFieldName" visible="false">
				                        <method event="ondata">
			            					var p = qb_query_builder_query_msg.getPointer();
						            		var ok = p.selectChild(2);
											var groupFieldName = "";
											var groupFieldID = ""; 
						            		while (ok){
						            			var nodename = p.getNodeName();
						            			if (nodename == "query"){
								            		var ok2 = p.selectChild(1);
								            		Debug.write(p);
								            		groupFieldName = p.p.getAttr('groupFieldName');	
								            		groupFieldID = p.p.getAttr('groupFieldID');	
						            			}
						            			ok = p.selectNext();
						            		}
						            		classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.groupFieldView.comGroupFieldEditN.selectItem(groupFieldID);
				                        </method>
			                        </text>
			                        <hinttip tipid="ENDUSERACCESS-msgquery-sort_group" />
		                            <!-- <combobox name="comGroupFieldEditN" datapath="qb_query_builder_query_msg:/root/query/query/@groupFieldName" width="250" editable="false" shownitems="8">
		                                <textlistitem datapath="qb_query_builder_query_msg:/root/query/query/field" text="$path{'@name'}" value="$path{'@id'}" />
		                                <method event="onselect">
					                		Debug.write(this.getText(), getValue());
					                		var groupFieldName = this.getText();
					                		var sqlText = classroot.txt_qb_sql_textEdit.getText();
					                		var secondPart = "";
						                	if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_messageEdit._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("GROUP BY");
						                		var firstPart = "";
						                		if (firstIndex > 0){
						                			Debug.write("firstIndex of GROUP BY", firstIndex);
							                		var secondIndex= sqlText.indexOf(".", firstIndex);
						          					var thirdIndex= sqlText.indexOf(" ", secondIndex);
						          					Debug.write("firstIndex", firstIndex, "secondIndex", secondIndex, "thirdIndex", thirdIndex);
					                				firstPart = sqlText.substring(0, firstIndex-1);
					                				if (thirdIndex == -1)
					                					secondPart = ""
					                				else
					                					secondPart = sqlText.substring(thirdIndex);
						                			
						                			sqlText = firstPart;
						                		}else{
							                		firstIndex = sqlText.indexOf("ORDER BY");
							                		Debug.write("firstIndex of ORDER BY", firstIndex);
							                		if (firstIndex > 0){
							                			var lastIndex = sqlText.lastIndexOf("ASC");
							                			var lastIndex2 = sqlText.lastIndexOf("DESC");
							                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
							                			if (lastIndex > lastIndex2){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}else if (lastIndex2 > lastIndex){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}
							                			sqlText = firstPart;
							                		}					                		
						                		}
					                		}
					                		if (groupFieldName.length > 0){
					                			sqlText += " GROUP BY " + groupFieldName;
					                		}		
					                		Debug.write("secondPart", secondPart);	           
					                		if (secondPart.length > 0){
					                			sqlText += secondPart;
					                		}              
					                		classroot.txt_qb_sql_textEdit.setText(sqlText);       
		                                </method>
		                            </combobox> -->
		                            
					            <datacombobox name="comGroupFieldEditN" width="250" editable="false" shownitems="8" bgcolor="${canvas.bgcolor}"
					            	itemdatapath="qb_query_builder_query_msg:/root/query/query/field" textdatapath='@name' valuedatapath='@id' selectfirst="false">      
		                                <method event="onselect">
											var sel = this.itemdatapath;
											Debug.write("sel [", sel, "]");
											var dp = new LzDatapointer(this);
											var nodes = dp.xpathQuery(this.itemdatapath);
											Debug.write("nodes [", nodes, "]");
											if (! (nodes instanceof Array)) nodes = [nodes];
											var index = this.getItemIndex(this.getValue());
											Debug.write("index [", index, "]");
											dp.setPointer(nodes[index]);
											
											var groupFieldName = dp.xpathQuery("@name");
					                		//var groupFieldName = this.getText();
					                		
					                		var sqlText = classroot.txt_qb_sql_textEdit.getText();
					                		var secondPart = "";
						                	if (sqlText == null || sqlText == "" || sqlText == undefined){
					                			sqlText = classroot.qb_query_builder_messageEdit._qb_controller.getSQL();
					                		}else{
						                		var firstIndex = sqlText.indexOf("GROUP BY");
						                		var firstPart = "";
						                		if (firstIndex > 0){
						                			Debug.write("firstIndex of GROUP BY", firstIndex);
							                		var secondIndex= sqlText.indexOf(".", firstIndex);
						          					var thirdIndex= sqlText.indexOf(" ", secondIndex);
						          					Debug.write("firstIndex", firstIndex, "secondIndex", secondIndex, "thirdIndex", thirdIndex);
					                				firstPart = sqlText.substring(0, firstIndex-1);
					                				if (thirdIndex == -1)
					                					secondPart = ""
					                				else
					                					secondPart = sqlText.substring(thirdIndex);
						                			
						                			sqlText = firstPart;
						                		}else{
							                		firstIndex = sqlText.indexOf("ORDER BY");
							                		Debug.write("firstIndex of ORDER BY", firstIndex);
							                		if (firstIndex > 0){
							                			var lastIndex = sqlText.lastIndexOf("ASC");
							                			var lastIndex2 = sqlText.lastIndexOf("DESC");
							                			Debug.write(sqlText, "firstIndex", firstIndex, "lastIndex", lastIndex, "lastIndex2", lastIndex2)
							                			if (lastIndex > lastIndex2){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}else if (lastIndex2 > lastIndex){
							                				firstPart = sqlText.substring(0, firstIndex-1);
							                				secondPart = sqlText.substring(firstIndex-1);
							                			}
							                			sqlText = firstPart;
							                		}					                		
						                		}
					                		}
					                		if (groupFieldName.length > 0){
					                			sqlText += " GROUP BY " + groupFieldName;
					                		}		
					                		Debug.write("secondPart", secondPart);	           
					                		if (secondPart.length > 0){
					                			sqlText += secondPart;
					                		}              
					                		classroot.txt_qb_sql_textEdit.setText(sqlText);       
		                                </method>					            	
					            </datacombobox>					            					            		                            
		                        </view>
		                </tabelement> 
                    </tabslider>                 
                    <view align="right">
				        <mdn_button datapath="gui:/gui-labels/btn-save/@label" width="50">
				            <method event="onclick">
					            <![CDATA[
					            var p = dbMsg.getPointer();
					            p.selectChild(1);
					            var msgId = p.p.getAttr('msgId');
					            var viewID2 = p.p.getAttr('viewOrTableId');
					            var connIDConstants = p.p.getAttr('dbId');
					            var queryTypeName = p.p.getAttr('queryTypeName');	
					            
		                		var sorts = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.sortTextView.txtSortEditN.getText();
		                		var groupFieldName = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.groupFieldView.groupFieldNameEdit.getText();
		                		var groupFieldId = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.groupFieldView.comGroupFieldEditN.getValue();
		                		
		                		var sqlString;
							   	if(queryTypeName == 'select') {
							   		sqlString = classroot.qb_query_builder_messageEdit._qb_controller.getSQL();
			                		if (groupFieldName.length > 0){
			                			sqlString += " GROUP BY " + groupFieldName;
			                		}
			                		if (sorts.length > 1){
			                			sqlString += " ORDER BY " + sorts;
			                		}
								}else if(queryTypeName == 'update'){
									sqlString = classroot.qb_query_builder_messageEdit._qb_controller.getSQLForUpdate();
								}else if(queryTypeName == 'insert'){
									sqlString = classroot.qb_query_builder_messageEdit._qb_controller.getSQLForInsert();
								}
								//classroot.txt_qb_sql_textEdit.setAttribute("text", sqlString);
								
								var sqlText = classroot.txt_qb_sql_textEdit.getText();
								if (sqlText == null || sqlText == "" || sqlText == undefined){
									sqlText = sqlString;
								}
		                        var allRootNode = qb_query_builder_query_msg.getFirstChild();
								var rootNode = allRootNode.getElementsByTagName("query")[0];
					            var queryNode = rootNode.getElementsByTagName("query")[0];
					            var queryId = queryNode.getAttr('queryID');
					            Debug.write('SAVE QUERY BUTTON CLICKED ++ queryID: ' + queryId  );
		                		var viewID = queryNode.getAttr("viewOrTableID");
		                		
		                		saveState = "1";//DataObject.IN_DB
 		                        
				        		var valueOrConditions = [];
				        		var ids = [];
				        		var rows = [];
				        		var types = [];
				        		var useds = [];
				        		var indents = [];
				        		var parents = [];
				        		var numbers = [];
				        		var fields = [];
				        		var compIDs = [];	
				        		var comparisons = [];
				        		var values = [];
				        		var connections = [];
				        		var value2s = [];	// The second value field, 'value2'. It is only used and visible when
													//	dealing with the 'is between' and 'is not between' operators.					
				        		var groupings = [];
				        		var userInputSeqs = [];
				        		var userInputSeqs2 = [];
								
								var tableIndex = 0;
				        		
			               		rootNode = allRootNode.getElementsByTagName("criteria")[0];											
				        		var numberNodes = rootNode.childNodes.length;
		                		for (var i = 0; i < numberNodes; i++){
									queryNode = rootNode.childNodes[i];
									var id = queryNode.getAttr("id");
				        			var row = queryNode.getAttr("row");
				        			var type = queryNode.getAttr("type");
				        			var used = queryNode.getAttr("used");
				        			var indent = queryNode.getAttr("indent");
					        		var valueOrCondition = queryNode.getAttr("valueOrCondition");
				        			var number = queryNode.getAttr("number");	
				        			var parent = queryNode.getAttr("parent");		        		
					        		var field = queryNode.getAttr("field");  			        		
					        		var compID = queryNode.getAttr("compID");
				        			var comparison = queryNode.getAttr("comparison");			        		
					        		var value = queryNode.getAttr("value");  			        		
					        		var connection = queryNode.getAttr("connection");
				        			var value2 = queryNode.getAttr("value2");			        		
					        		var grouping = queryNode.getAttr("grouping");
					        		var userInputSeq = queryNode.getAttr("valueUserInput");
					        		var userInputSeq2 = queryNode.getAttr("value2UserInput");
					        		
					        		ids[tableIndex] = id;
					        		rows[tableIndex] = row;
					        		types[tableIndex] = type;
									useds[tableIndex] = used;
									indents[tableIndex] = indent;
				        			valueOrConditions[tableIndex] = valueOrCondition;
				        			numbers[tableIndex] = number;
				        			parents[tableIndex] = parent;
				        			fields[tableIndex] = field;
				        			compIDs[tableIndex] = compID;	
					        		comparisons[tableIndex] = comparison;
					        		values[tableIndex] = value;
					        		connections[tableIndex] = connection;
					        		value2s[tableIndex] = value2;
					        		groupings[tableIndex] = grouping;
					        		userInputSeqs[tableIndex] = userInputSeq;
					        		userInputSeqs2[tableIndex] = userInputSeq2;
				        			
				        			tableIndex++;
				        		}		
				        						
				        		controller.saveQuery(saveState, connIDConstants, msgId, viewID2, queryTypeName, sqlText, ids, rows, types, useds, indents, valueOrConditions, parents, numbers, fields, compIDs, comparisons, values, connections, value2s, groupings, userInputSeqs, userInputSeqs2, sorts, groupFieldId, classroot.maintab.currProjectId);						
				            	]]>
				            </method>
				            <hinttip tipid="ENDUSERACCESS-msgquery-save-button" />
				        </mdn_button>
                    </view>
                </tabpane>
                <tabpane datapath="gui:/gui-labels/tab-query-result/@label" name="qTestTab">
                	
                	<method event="onselect">
			            var p3 = dbMsg.getPointer();
			            p3.selectChild(1);
			            var queryTypeName = p3.p.getAttr('queryTypeName');                		

						var ds = p3.p.getAttr('queryDSId');
						Debug.write("onSelect QBN tab #####################!!" + ds);								
						if(ds == 1)                		
						{
	                		if(queryTypeName == 'select') {
		                       	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setAttribute("visible", false);
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.notSelectQuery.setAttribute("visible", true);				                        	
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.setAttribute("visible", false);                		
							}else {
	                        	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setAttribute("visible", false);
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.notSelectQuery.setAttribute("visible", true);				                        	
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.setAttribute("visible", false);						
							}
						}else{
							Debug.write("web serviiiiiiiiiiiice");								
	                       	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setAttribute("visible", false);
							classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.notSelectQuery.setAttribute("visible", true);				                        	
							classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.setAttribute("visible", false);                									
						}
                	</method>
	                <view name="view1" width="620" height="51" id="qResultViewAnimate2" y="160" bgcolor="0x4386cc">
						 <animator attribute="y" name="startQuery" to="0" duration="1000" start="false"></animator>
						 <view name="wholeUserInputView" x="5" y="5" visible="true">
						        <text datapath="gui:/gui-labels/lbl-user-input/@label" name="labeltext" y="3" width="150" fgcolor="0xFFFFFF"></text>
						        <edittext name="txtUserInput" width="200" enabled="true" x="150" />
						        <text name="userInputTxtN" datapath="gui:/gui-labels/lbl-query-result-userinput/@label" resize="true" x="0" y="25" fgcolor="0xFFFFFF" />						
			                </view>
			                <!-- Direct SQL Button -->
			                <view name="btnView" x="470" y="5">
				                <mdn_button datapath="gui:/gui-labels/btn-test-direct-sql/@label">
				                	<method event="onclick">
					                	<![CDATA[  
				                		Debug.write("Direct SQL button clicked!");
				                		
							            var sqlString = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.bordertheedittext.qb_sql_textEdit_n.getText();
							            Debug.write("### SQL TO TEST: ", sqlString);
							            var p3 = dbMsg.getPointer();
							            p3.selectChild(1);
							            var connIDConstants = p3.p.getAttr('dbId');
							            var viewID = p3.p.getAttr('viewOrTableId');
							            var queryTypeName = p3.p.getAttr('queryTypeName');
							            var ds = p3.p.getAttr('queryDSId');
							            var msgId = p3.p.getAttr('msgId');
							            Debug.write("!!!!!!!!!!!!!!!!!!!!!!! msgId: "+ msgId);
							            							            
							            var userInputTestValues = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.wholeUserInputView.txtUserInput.getText();
							            if(ds == 1){
					                        if(queryTypeName == 'select') {
					                        	controller.getSelectQueryResultEdit(classroot.maintab.currProjectId, connIDConstants, viewID, sqlString, null, userInputTestValues);
					                        	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setAttribute("visible", true);
												classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.notSelectQuery.setAttribute("visible", false);				                        	
												classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.setAttribute("visible", true);
												//classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.wholeUserInputView.setAttribute("visible", true);
												//classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.btnView.setAttribute("visible", true);
						                        //var p2 = qb_query_result.getPointer();   
					                        }else if(queryTypeName == 'update'){
					                        	
					                        	//controller.getUpdateQueryResultEdit(classroot.maintab.currProjectId, connIDConstants, sqlString, userInputTestValues);
					                        	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setAttribute("visible", false);
												classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.notSelectQuery.setAttribute("visible", true);				                        	
												classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.setAttribute("visible", false);
												//classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.btnView.setAttribute("visible", false);
					                        }else if(queryTypeName == 'insert'){
					                        	
												//controller.getInsertQueryResultEdit(classroot.maintab.currProjectId, connIDConstants, sqlString, userInputTestValues);                
												classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setAttribute("visible", false);
												classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.notSelectQuery.setAttribute("visible", true);
												classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.setAttribute("visible", false);
												//classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.btnView.setAttribute("visible", false);
											}
										}else{
											////////////////////////////////////////////////////////////////////////
											var wsOperationID = p3.p.getAttr('wsOperationID');
											
						        		var valueOrConditions = [];
						        		var ids = [];
						        		var rows = [];
						        		var types = [];
						        		var useds = [];
						        		var indents = [];
						        		var parents = [];
						        		var numbers = [];
						        		var fields = [];
						        		var compIDs = [];	
						        		var comparisons = [];
						        		var values = [];
						        		var connections = [];
						        		var value2s = [];	// The second value field, 'value2'. It is only used and visible when
															//	dealing with the 'is between' and 'is not between' operators.					
						        		var groupings = [];
						        		var userInputSeqs = [];
						        		var userInputSeqs2 = [];
										
										var tableIndex = 0;
						        		
				                		var allNodes = qb_query_builder_query_msg.getFirstChild();
										var rootNode = allNodes.getElementsByTagName("criteria")[0];
						        		var numberNodes = rootNode.childNodes.length;
				                		for (var i = 0; i < numberNodes; i++){
				                			Debug.write("%%%%%%%% wsOperationID = " + wsOperationID);
											queryNode = rootNode.childNodes[i];
											var id = queryNode.getAttr("id");
						        			var row = queryNode.getAttr("row");
						        			Debug.write("%%%%%%%% row = " + row);
						        			var type = queryNode.getAttr("type");
						        			var used = queryNode.getAttr("used");
						        			var indent = queryNode.getAttr("indent");
							        		var valueOrCondition = queryNode.getAttr("valueOrCondition");
						        			var number = queryNode.getAttr("number");	
						        			var parent = queryNode.getAttr("parent");		        		
							        		var field = queryNode.getAttr("field");  			        		
							        		var compID = queryNode.getAttr("compID");
						        			var comparison = queryNode.getAttr("comparison");			        		
							        		var value = queryNode.getAttr("value");  			        		
							        		var connection = queryNode.getAttr("connection");
						        			var value2 = queryNode.getAttr("value2");			        		
							        		var grouping = queryNode.getAttr("grouping");
							        		var userInputSeq = queryNode.getAttr("valueUserInput");
							        		var userInputSeq2 = queryNode.getAttr("value2UserInput");
							        		
							        		ids[tableIndex] = id;
							        		rows[tableIndex] = row;
							        		types[tableIndex] = type;
											useds[tableIndex] = used;
											indents[tableIndex] = indent;
						        			valueOrConditions[tableIndex] = valueOrCondition;
						        			numbers[tableIndex] = number;
						        			parents[tableIndex] = parent;
						        			fields[tableIndex] = field;
						        			compIDs[tableIndex] = compID;	
							        		comparisons[tableIndex] = comparison;
							        		values[tableIndex] = value;
							        		connections[tableIndex] = connection;
							        		value2s[tableIndex] = value2;
							        		groupings[tableIndex] = grouping;
							        		userInputSeqs[tableIndex] = userInputSeq;
							        		userInputSeqs2[tableIndex] = userInputSeq2;
						        			
						        			tableIndex++;
						        		}										
										
										var params = new LzParam();
										params.addValue('action', 'testWebServiceQuery');
										params.addValue('userInputTestValues', userInputTestValues, true);						
										//params.addValue('WSDLUrl', classroot.currentUrl, true);
										//params.addValue('service', classroot.currentService, true);
										//params.addValue('port', classroot.currentPort, true);
										//params.addValue('operation', classroot.currentOperation, true);
										params.addValue('ids', ids, true);
										params.addValue('rows', rows, true);
										params.addValue('types', types, true);
										params.addValue('useds', useds, true);
										params.addValue('indents', indents, true);
										params.addValue('valueOrConditions', valueOrConditions, true);
										params.addValue('parents', parents, true);
										params.addValue('numbers', numbers, true);
										params.addValue('fields', fields, true);
										params.addValue('compIDs', compIDs, true);			
										params.addValue('comparisons', comparisons, true);
										params.addValue('values', values, true);
										params.addValue('connections', connections, true);
										params.addValue('value2s', value2s, true);
										params.addValue('groupings', groupings, true);
										params.addValue('sorts', sorts, true);
										params.addValue('groupFieldId', groupFieldId, true);
										params.addValue('userInputSeqs', userInputSeqs, true);
										params.addValue('userInputSeqs2', userInputSeqs2, true);
										//params.addValue('uiStr', uiStr, true);
										params.addValue('msgId', msgId, true);
										params.addValue('wsOperationID', wsOperationID, true);
		
										qb_query_result_edit.setQueryString(params);
										qb_query_result_edit.doRequest();											
										////////////////////////////////////////////////////////////////////////
										}
										]]>
				                	</method>  
				                	<hinttip tipid="ENDUSERACCESS-msgquery-directsql-test" />              
				                </mdn_button>
				                
				                <!-- Save Query Button -->
				                <!-- 
				                <mdn_button datapath="gui:/gui-labels/btn-save-direct-sql/@label">
				                	<method event="onclick">
				                	<![CDATA[
	
				                        var sqlString = classroot.msgInfoViewTabs.queryResultTabsN.qTestTab.view1.qb_sql_textEdit_n.getText();
				                        var allRootNode = qb_query_builder.getFirstChild();
										var rootNode = allRootNode.getElementsByTagName("query")[0];
							            var queryNode = rootNode.getElementsByTagName("query")[0];
							            var queryId = queryNode.getAttr('queryID');						
							            Debug.write('SAVE QUERY BUTTON CLICKED ++ queryID: ' + queryId  );
				                		
				                		var saveState = "0";//DataObject.NEW default
				                		if (queryId == "-1"){
				                			saveState = "0";//DataObject.NEW
				                		}else{
				                			saveState = "1";//DataObject.IN_DB
				                		}
				                	
				                		var viewID = queryNode.getAttr("viewOrTableID");

							            var p3 = dbMsg.getPointer();
							            p3.selectChild(1);
							            var connIDConstants = p3.p.getAttr('dbId');

						        		controller.saveQuery(saveState, connIDConstants, queryId, viewID, "select", sqlString, classroot.maintab.currProjectId);			                	
				                	]]>
				                	</method>
				                	<hinttip tipid="ENDUSERACCESS-msgquery-save-button" />
				                </mdn_button>
				                 -->
			                </view>                    	
	                	</view>
	                	<ftdynamicgrid name="resultGridEditN" datapath="qb_query_result_edit:/root"
					                   contentdatapath="resultset/row"
					                   metadatapath="metadata/column"
					                   width="620" height="385" rowheight="20" visible="true" y="55" id="resultGridNAnimate2" opacity="0">
					                   <animator attribute="opacity" name="startQueryOpacity" to="1" duration="1000" start="false"></animator>
					    </ftdynamicgrid>
					    <text name="notSelectQuery" datapath="gui:/gui-labels/no-select-query/@label" fgcolor="red" 
					    	alialign="center" visible="false" width="500" fontstyle="bold" multiline="true"/> 
	               </tabpane>
                <tabpane datapath="gui:/gui-labels/tab-message-builder/@label" name="tabmbN">
	                <simplelayout axis="y" spacing="4"/>
          			<method event="onselect" reference="this.tab">
                    	if (this.tab.selected) {
							Debug.write("Selected Message Builder tab");							
							
							classroot.errorView.txtErrorMsgQEditN.setText("");
							
							//classroot.msgInfoViewTabs.queryResultTabsN.setVisible(false);
							//classroot.msgInfoViewTabs.messageResultTabsN.setVisible(true);
							
				            var p = dbMsg.getPointer();
				            p.selectChild(1);
				            var msgId = p.p.getAttr('msgId');
				            
							//controller.displayMessagingInfo(msgId);
							
							//classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.email.cbxEmailAddressEditN.selectItemAt(1);
							//classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.responseFormatTxtAreaN.setAttribute('text', "");
							classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgTest_1.msgHolderView.view2.enterFormatMessageTxtN.setAttribute('text', "");
							
							tabMbSlider.completeInstantiation();
							
				            var p = dbMsg.getPointer();
				            p.selectChild(1);
				            var imStatus = p.p.getAttr('imStatus');			
				            //var mobileStatus = p.p.getAttr('mobileStatus');			
			
				           	if(imStatus == 1){
				            	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.cbxImNameEditN.selectItemAt(1);
				           	}else{
				              	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.cbxImNameEditN.selectItemAt(2);//No IM (index=2)
				           	}					                	
				           	/* if(mobileStatus == 1){
				            	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.cbxMobileNumberEditN.selectItemAt(1);
				           	}else{
				               classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.cbxMobileNumberEditN.selectItemAt(2);//No sms (index=2)
				           	}*/	
				           	
				           	//Manage DS Status//
							var ds = p.p.getAttr('queryDSId');
							if(ds == 1){
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.wsResultFormat.setVisible(false);
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.wsResultFormat2.setVisible(false);								
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.defaultBtnName.setVisible(true);																
							}else{
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.wsResultFormat.setVisible(true);
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.wsResultFormat2.setVisible(true);																							
								classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.defaultBtnName.setVisible(false);
							}
				           	

			           	}
					</method>  
          			<tabslider sliderRH="true" name="tabMbSlider" width="620" height="434" > <!-- initstage="defer" -->
		                <tabelement name="msgDetailesEditN" datapath="gui:/gui-labels/slider-messaging-details/@label" align="center" selected="true">
			                <simplelayout axis="y" spacing="2"/>
					        <view name="msgTitle" spacing="2">
		            			<simplelayout axis="x"/>
				            	<text text="" width="150"  fontstyle="bold" fgcolor="0xffffff" />
		        		    	<text width="250" text=""/>
		        		    	<text name="imStatusInVTxt" width="80" datapath="dbMsg:/root/@imStatus" visible="false" />
		        		    	<text name="mobilestatus22N" width="80" datapath="dbMsg:/root/@mobileStatus" visible="false"/>
		        		    	<text name="imstatus2N" width="80" datapath="dbMsg:/root/@imStatus" visible="false"/>
		        		    	<text name="emailAddressIdN" width="80" datapath="dbMsg:/root/@emailId" visible="false"/>
		        		    	<text datapath="gui:/gui-labels/lbl-keyword/@label" width="80" fontstyle="bold" fgcolor="0xffffff"><hinttip tipid="ENDUSERACCESS-msgquery-msgdetails_keyword" /></text>
				            	<text datapath="gui:/gui-labels/lbl-display-result/@label" width="50" fontstyle="bold" fgcolor="0xffffff"><hinttip tipid="ENDUSERACCESS-msgquery-msgdetails_results"/></text>            
		        			</view>
		
					        <view name="email">
		            			<simplelayout axis="x" spacing="2"/>
					            <text datapath="gui:/gui-labels/lbl-email-address/@label" width="150" fontstyle="bold" fgcolor="0xffffff"></text>
					            <hinttip tipid="ENDUSERACCESS-msgquery-msgdetails_email" />
					            
					            <datacombobox name="cbxEmailAddressEditN" width="250" editable="false" shownitems="8" bgcolor="${canvas.bgcolor}"
					            	itemdatapath="dbMsg:/root/emailAddress" textdatapath='@name' valuedatapath='@id' selectfirst="false">      
					            </datacombobox>					            					            
					            
					            <text datapath="dbMsg:/root/@emailId" visible="false">
									<method event="ondata">
							            var p = dbMsg.getPointer();
							            p.selectChild(1);
										var emailId = p.p.getAttr('emailId');
							            classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.email.cbxEmailAddressEditN.selectItem(emailId);
							            if(emailId == -1){
							            	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.email.cbxEmailAddressEditN.selectItemAt(1);
							            }					                						            										            
									</method>
					            </text>
			                    <method event="onselect" reference="cbxEmailAddressEditN">
		    	                	var v = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.email.cbxEmailAddressEditN.getValue();
		
			    	                if(v == 0) {
										settingBox.setAttribute("goToSpecialView", true);
										settingBox.open();
										controller.addMdnEmail();
									}
		            	    	</method>
		            			<edittext name="txtEmailKeyEditN" width="80" datapath="dbMsg:/root/@emailKeyword"/>
		            			<edittext name="txtEmailDisplayResultEditN" datapath="dbMsg:/root/@emailDisplayResult" width="40" text="" maxlength="2"/>
					        </view>
		
					        <view name="mobile">
		            			<simplelayout axis="x" spacing="2"/>
					            <text datapath="gui:/gui-labels/lbl-mobile-number/@label" width="150" fontstyle="bold" fgcolor="0xffffff"></text>
					            <hinttip tipid="ENDUSERACCESS-msgquery-msgdetails_sms" />
					            
					            <datacombobox name="cbxMobileNumberEditN" width="250" editable="false" shownitems="8" bgcolor="${canvas.bgcolor}"
					            	itemdatapath="dbMsg:/root/smpp" textdatapath='@number' valuedatapath='@id' selectfirst="false">      
					            </datacombobox>					            					            
					            
					            <text datapath="dbMsg:/root/@mobileStatus" visible="false">
									<method event="ondata">
							            var p = dbMsg.getPointer();
							            p.selectChild(1);
										var smsServerId = p.p.getAttr('mobileStatus');
							            classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.cbxMobileNumberEditN.selectItem(smsServerId);
							            if(smsServerId == -1){
							            	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.cbxMobileNumberEditN.selectItemAt(1);
							            }					                						            			 
									</method>
					            </text>
				                <method event="onselect" reference="cbxMobileNumberEditN">
		    	                	var v = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.cbxMobileNumberEditN.getValue();
			    	                if(v == 0) {
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.txtSmsKeyEditN.setAttribute('enabled', true);
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.txtMobileDisplayResultEditN.setAttribute('enabled', true);
										settingBox.setAttribute("goToSpecialView", true);
										settingBox.open();
										//controller.displaySmsSett();
										controller.displayAddSmpp();
				                    }else if (v == -1){
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.txtSmsKeyEditN.setAttribute('enabled', false);
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.txtMobileDisplayResultEditN.setAttribute('enabled', false);
				                    }else{
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.txtSmsKeyEditN.setAttribute('enabled', true);
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.txtMobileDisplayResultEditN.setAttribute('enabled', true);
				                    }
						 		</method>
		            			<edittext name="txtSmsKeyEditN" width="80" datapath="dbMsg:/root/@smsKeyword"/>
		            			<edittext name="txtMobileDisplayResultEditN" width="40" text="" maxlength="2" datapath="dbMsg:/root/@mobileDisplayResult"/>
					        </view>
		        
					        <view name="im">
		            			<simplelayout axis="x" spacing="2"/>
					            <text datapath="gui:/gui-labels/lbl-im-details-name/@label" width="150" fontstyle="bold" fgcolor="0xffffff"></text>
					            <hinttip tipid="ENDUSERACCESS-msgquery-msgdetails_im" />
		            			<combobox name="cbxImNameEditN" width="250" editable="false" shownitems="8">
					                <textlistitem datapath="gui:/gui-labels/lbl-add-new-item/@label" value="0" />
		            			    <textlistitem datapath="gui:/gui-labels/lbl-all-im/@label" value="1" />
		            			    <textlistitem datapath="gui:/gui-labels/lbl-no-im/@label" value="-1" />            			    
					            </combobox>
			                    <method event="onselect" reference="cbxImNameEditN">
		    	                	var v = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.cbxImNameEditN.getValue();
			    	                if(v == 0) {
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.txtImKeyEditN.setAttribute('enabled', true);
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.txtImDisplayResultEditN.setAttribute('enabled', true);
										settingBox.setAttribute("goToSpecialView", true);
										settingBox.open();
										controller.displayEmptyIMConnection();
				                    }else if (v == -1){
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.txtImKeyEditN.setAttribute('enabled', false);
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.txtImDisplayResultEditN.setAttribute('enabled', false);
				                    }else{
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.txtImKeyEditN.setAttribute('enabled', true);
				                    	classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.txtImDisplayResultEditN.setAttribute('enabled', true);
				                    }

		            	    	</method>
		            			<edittext name="txtImKeyEditN" width="80" datapath="dbMsg:/root/@imKeyword"/>
		            			<edittext name="txtImDisplayResultEditN" width="40" text="" maxlength="2" datapath="dbMsg:/root/@imDisplayResult"/>
					        </view>
						    <view height="20"/>
		              </tabelement>
					  <tabelement name="msgDetailesResEditN" datapath="gui:/gui-labels/slider-response-format/@label" align="center">
						  <view name="responseAreaView">
						  	<simplelayout axis="y" spacing="2"/>

							  <view name="wsResultFormat" visible="false">
							  	<simplelayout axis="x" spacing="2"/>
						        <text datapath="gui:/gui-labels/lbl-user-input/@label" name="labeltext" width="150" fgcolor="0xFFFFFF" />
						        <edittext name="txtUserInput" width="200" enabled="true" x="150"/>	                	
								<mdn_button datapath="gui:/gui-labels/btn-show-result-format/@label">	
									<method event="onclick">
									<![CDATA[
										var p = dbMsg.getPointer();
							            p.selectChild(1);
							            var msgId = p.p.getAttr('msgId');
							            Debug.write("%%%%%%%% msgId = " + msgId);
							            
										var uiStr = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.wsResultFormat.txtUserInput.getText();
										
						        		var valueOrConditions = [];
						        		var ids = [];
						        		var rows = [];
						        		var types = [];
						        		var useds = [];
						        		var indents = [];
						        		var parents = [];
						        		var numbers = [];
						        		var fields = [];
						        		var compIDs = [];	
						        		var comparisons = [];
						        		var values = [];
						        		var connections = [];
						        		var value2s = [];	// The second value field, 'value2'. It is only used and visible when
															//	dealing with the 'is between' and 'is not between' operators.					
						        		var groupings = [];
						        		var userInputSeqs = [];
						        		var userInputSeqs2 = [];
										
										var tableIndex = 0;
						        		
				                		var allNodes = qb_query_builder_query_msg.getFirstChild();
										var rootNode = allNodes.getElementsByTagName("criteria")[0];
						        		var numberNodes = rootNode.childNodes.length;
				                		for (var i = 0; i < numberNodes; i++){
											queryNode = rootNode.childNodes[i];
											var id = queryNode.getAttr("id");
						        			var row = queryNode.getAttr("row");
						        			var type = queryNode.getAttr("type");
						        			var used = queryNode.getAttr("used");
						        			var indent = queryNode.getAttr("indent");
							        		var valueOrCondition = queryNode.getAttr("valueOrCondition");
						        			var number = queryNode.getAttr("number");	
						        			var parent = queryNode.getAttr("parent");		        		
							        		var field = queryNode.getAttr("field");  			        		
							        		var compID = queryNode.getAttr("compID");
						        			var comparison = queryNode.getAttr("comparison");			        		
							        		var value = queryNode.getAttr("value");  			        		
							        		var connection = queryNode.getAttr("connection");
						        			var value2 = queryNode.getAttr("value2");			        		
							        		var grouping = queryNode.getAttr("grouping");
							        		var userInputSeq = queryNode.getAttr("valueUserInput");
							        		var userInputSeq2 = queryNode.getAttr("value2UserInput");
							        		
							        		ids[tableIndex] = id;
							        		rows[tableIndex] = row;
							        		types[tableIndex] = type;
											useds[tableIndex] = used;
											indents[tableIndex] = indent;
						        			valueOrConditions[tableIndex] = valueOrCondition;
						        			numbers[tableIndex] = number;
						        			parents[tableIndex] = parent;
						        			fields[tableIndex] = field;
						        			compIDs[tableIndex] = compID;	
							        		comparisons[tableIndex] = comparison;
							        		values[tableIndex] = value;
							        		connections[tableIndex] = connection;
							        		value2s[tableIndex] = value2;
							        		groupings[tableIndex] = grouping;
							        		userInputSeqs[tableIndex] = userInputSeq;
							        		userInputSeqs2[tableIndex] = userInputSeq2;
						        			
						        			tableIndex++;
						        		}										
										
										var params = new LzParam();
										params.addValue('action', 'getDefaultResponseForEditWS');									
										params.addValue('WSDLUrl', classroot.currentUrl, true);
										params.addValue('service', classroot.currentService, true);
										params.addValue('port', classroot.currentPort, true);
										params.addValue('operation', classroot.currentOperation, true);
										params.addValue('ids', ids, true);
										params.addValue('rows', rows, true);
										params.addValue('types', types, true);
										params.addValue('useds', useds, true);
										params.addValue('indents', indents, true);
										params.addValue('valueOrConditions', valueOrConditions, true);
										params.addValue('parents', parents, true);
										params.addValue('numbers', numbers, true);
										params.addValue('fields', fields, true);
										params.addValue('compIDs', compIDs, true);			
										params.addValue('comparisons', comparisons, true);
										params.addValue('values', values, true);
										params.addValue('connections', connections, true);
										params.addValue('value2s', value2s, true);
										params.addValue('groupings', groupings, true);
										params.addValue('sorts', sorts, true);
										params.addValue('groupFieldId', groupFieldId, true);
										params.addValue('userInputSeqs', userInputSeqs, true);
										params.addValue('userInputSeqs2', userInputSeqs2, true);
										params.addValue('uiStr', uiStr, true);
										params.addValue('msgId', msgId, true);
		
										//dbQueryReq.setQueryString(params);
										//dbQueryReq.doRequest();		
										
										dbMsgWS.setQueryString(params);
										dbMsgWS.doRequest();

									]]>
									</method>		  	
								</mdn_button>					        
							  </view>						  
							  <view name="wsResultFormat2" visible="false">
								  <text name="userInputTxtN" datapath="gui:/gui-labels/lbl-query-result-format/@label" resize="true" fgcolor="0xFFFFFF" />							
							  </view>
						  	
						  	
						  	
						  	<text name="defaultResponseN" datapath="dbMsg:/root/@defaultResponseFormat" visible="false"/>
	               			<scrolledittext name="responseFormatTxtAreaN" datapath="dbMsg:/root/@responseFormat" width="602" height="320"
					            defaultfontname="arial" 
					            defaultfontcolor="black"
					            bgcolor="white"
					            border="1" >
	               			</scrolledittext>
	               			<view name="defaultBtnName">
							  	<mdn_button datapath="gui:/gui-labels/btn-default/@label">
							  		<method event="onclick">
										var defaultResponse = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.defaultResponseN.getText();
										classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.responseFormatTxtAreaN.setAttribute('text', defaultResponse);
							  		</method>
							  	</mdn_button>	
						  	</view>               				               			
						  </view>
		              </tabelement>
          			</tabslider>
	                <view align="right">
		                <simplelayout axis="x" spacing="5" />
					  	<mdn_button datapath="gui:/gui-labels/btn-restore/@label">
					  		<method event="onclick">
					            var p = dbMsg.getPointer();
					            p.selectChild(1);
					            var msgId = p.p.getAttr('msgId');
	
								//controller.displayMessagingInfo(msgId);		
								controller.displayMsgInfo(msgId);								
					  		</method>
					  	</mdn_button>								  		                
					    <mdn_button datapath="gui:/gui-labels/btn-save/@label" width="50" >
					          <method event="onclick">
					            var p = dbMsg.getPointer();
					            p.selectChild(1);
					            var msgId = p.p.getAttr('msgId');
					          
		        		        var emailId = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.email.cbxEmailAddressEditN.getValue();
		        		        var mobileStatus = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.cbxMobileNumberEditN.getValue();
				                var imStatus = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.cbxImNameEditN.getValue();
	
				                var emailKeyword = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.email.txtEmailKeyEditN.getText();
		        		        var smsKeyword = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.txtSmsKeyEditN.getText();
		                		var imKeyword = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.txtImKeyEditN.getText();
	
				                var emailDisplayResult = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.email.txtEmailDisplayResultEditN.getText();
		                		var mobileDisplayResult = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.txtMobileDisplayResultEditN.getText();
		        		        var imDisplayResult = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.txtImDisplayResultEditN.getText();
	
					          	var response = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.responseFormatTxtAreaN.getText();
					          
				        		controller.saveMsgDetailsInfo(msgId, '1', emailId, mobileStatus, imStatus, emailKeyword, smsKeyword ,imKeyword ,
				        		emailDisplayResult, mobileDisplayResult, imDisplayResult, response);
	
					          </method>
					          <hinttip tipid="ENDUSERACCESS-msgquery-save-button" />
					    </mdn_button>
			        </view> 
                </tabpane>
               <!-- Message Result -->
               <tabpane name="msgTest_1" datapath="gui:/gui-labels/tab-message-result/@label">
					<view name="msgHolderView" id="msgHolderViewAnimation2" width="621" height="69" bgcolor="0x4386cc" y="160">
						<animator attribute="y" name="startMessageTest" to="0" duration="1000" start="false"></animator>
		               <view name="view1" x="5" y="5">
							<radiogroup layout="axis: x; spacing:7"  name="messagingTypeRadioN" height="20">
								<radiobutton datapath="gui:/gui-labels/lbl-email2/@label" width="110" value="1" name="radio1">
									<hinttip tipid="ENDUSERACCESS-msgquery-msgtest-email" />
									<method event="oninit">
										this._title.setAttribute("fgcolor", 0xFFFFFF);
									</method>
								</radiobutton>
								<radiobutton datapath="gui:/gui-labels/lbl-sms/@label" width="110" value="2" name="radio2">
									<hinttip tipid="ENDUSERACCESS-msgquery-msgtest-sms" />
									<method event="oninit">
										this._title.setAttribute("fgcolor", 0xFFFFFF);
									</method>
								</radiobutton>
								<radiobutton datapath="gui:/gui-labels/lbl-im/@label" width="110" value="3" name="radio3">
									<hinttip tipid="ENDUSERACCESS-msgquery-msgtest-im" />
									<method event="oninit">
										this._title.setAttribute("fgcolor", 0xFFFFFF);
									</method>
								</radiobutton>
							</radiogroup>
						</view>
						<view x="5" y="25">
						   	<text datapath="gui:/gui-labels/lbl-msg-result-userinput/@label" id="userInputTxt2" width="600" fgcolor="0xFFFFFF" />
						   	<hinttip tipid="ENDUSERACCESS-msgquery-msgtest-enter" />
						</view>	
						<view name="view2" x="5" y="42">
							<simplelayout axis="x"  spacing="5"/>
			               	<edittext name="enterFormatMessageTxtN" text="" width="300"/>
			                <mdn_button datapath="gui:/gui-labels/btn-test-message/@label">
			                	<method event="onclick">
			                	<![CDATA[   
						            var p = dbMsg.getPointer();
						            p.selectChild(1);
						            var msgId = p.p.getAttr('msgId');
						            var wsOperationID = p.p.getAttr('wsOperationID');
						            var ds = p.p.getAttr('queryDSId');
	
			                		var messagingType = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgTest_1.msgHolderView.view1.messagingTypeRadioN.getValue();
			                		var sql = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.criteriaEditN.bordertheedittext.qb_sql_textEdit_n.getText();
			                		var enterFormatMessage = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.msgTest_1.msgHolderView.view2.enterFormatMessageTxtN.getText();
			        		        var emailId = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.email.cbxEmailAddressEditN.getValue();
			        		        var mobileStatus = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.cbxMobileNumberEditN.getValue();
					                var imStatus = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.cbxImNameEditN.getValue();
		
					                var emailKeyword = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.email.txtEmailKeyEditN.getText();
			        		        var smsKeyword = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.txtSmsKeyEditN.getText();
			                		var imKeyword = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.txtImKeyEditN.getText();
		
					                var emailDisplayResult = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.email.txtEmailDisplayResultEditN.getText();
			                		var mobileDisplayResult = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.mobile.txtMobileDisplayResultEditN.getText();
			        		        var imDisplayResult = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesEditN.im.txtImDisplayResultEditN.getText();
		
						          	var response = classroot.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.responseFormatTxtAreaN.getText();			
	
									//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
							        var rows = [];
						        		var fields = [];
						        		var values = [];
						        		var numbers = [];
										
										var tableIndex = 0;
										
					               		var allNodes = qb_query_builder_query_msg.getFirstChild();
										var rootNode = allNodes.getElementsByTagName("criteria")[0];											
						        		var numberNodes = rootNode.childNodes.length;
				                		for (var i = 0; i < numberNodes; i++){
											queryNode = rootNode.childNodes[i];
						        			var row = queryNode.getAttr("row");
						        			var number = queryNode.getAttr("number");	
						        			var parent = queryNode.getAttr("parent");		        		
							        		var field = queryNode.getAttr("field");  			        		
							        		var value = queryNode.getAttr("value");  			        		
							        		
							        		rows[tableIndex] = row;
						        			valueOrConditions[tableIndex] = valueOrCondition;
						        			numbers[tableIndex] = number;
						        			parents[tableIndex] = parent;
						        			fields[tableIndex] = field;
							        		values[tableIndex] = value;
						        			
						        			tableIndex++;
						        		}										
	
									var params = new LzParam();
									params.addValue('action', 'testMessaginResultXML', true);
									params.addValue('msgId', msgId, true);
									params.addValue('wsId', wsOperationID, true);
									params.addValue('dsStatus', ds, true);									
									params.addValue('sql', sql, true);
									
						            params.addValue('emailId',emailId);	    
						            params.addValue('mobileStatus',mobileStatus);	    
						            params.addValue('imStatus',imStatus);	    
									
						            params.addValue('emailKeyword',emailKeyword);	    
						            params.addValue('smsKeyword',smsKeyword);
						            params.addValue('imKeyword',imKeyword);	                	
						            	
						            params.addValue('emailDisplayResult',emailDisplayResult);
						            params.addValue('mobileDisplayResult',mobileDisplayResult);
						            params.addValue('imDisplayResult',imDisplayResult);
						            
						            params.addValue('responseFormat',response, true);   
	
						            params.addValue('messagingType',messagingType);            
						            params.addValue('enterFormatMessage',enterFormatMessage);            
						            params.addValue('projectId',classroot.maintab.currProjectId);
						            
						            //criteria parameters
									params.addValue('rows', rows, true);
									params.addValue('numbers', numbers, true);
									params.addValue('fields', fields, true);
									params.addValue('values', values, true);		
									Debug.write("rows: " + rows + ", fields: " + fields + ", values: " + values);				            
						            /////////////////////
									
									dbMsg2.setQueryString(params);
									dbMsg2.doRequest();
									
									//Animate
									msgHolderViewAnimation2.startMessageTest.doStart();
									msgResultNAnimation2.startMessageTest.doStart();
									msgHolderViewAnimation2.setAttribute("bgcolor", 0xebf3fc);
									msgHolderViewAnimation2.view1.messagingTypeRadioN.radio1._title.setAttribute("fgcolor", 0x454545);
									msgHolderViewAnimation2.view1.messagingTypeRadioN.radio2._title.setAttribute("fgcolor", 0x454545);
									msgHolderViewAnimation2.view1.messagingTypeRadioN.radio3._title.setAttribute("fgcolor", 0x454545);
									userInputTxt2.setAttribute("fgcolor", 0x454545);
									]]>
			                	</method>
			                	<hinttip tipid="ENDUSERACCESS-msgquery-directsql-test" />
			                </mdn_button>
						</view>	
	               		<view clip="true" name="view3">
	               			<scrolledittext name="msgResultEditN" id="msgResultNAnimation2" datapath="dbMsg2:/root/@replyMessaing" width="621" height="359" 
					            defaultfontname="arial" 
					            defaultfontcolor="black"
					            border="1" y="73" opacity="0">
					            <animator attribute="opacity" name="startMessageTest" to="1" duration="1000" start="false"></animator>
	               			</scrolledittext>
	               		</view>
               		</view>
               </tabpane>
			</tabs>	
	           
        </view>
              
        <view name="errorView" y="473">
            <text  name="txtErrorMsgQEditN" fgcolor="red" fontstyle="bold" resize="true"  width="600" height="60" multiline="true" />
        </view>
	    <!-- Deals with the query result. -->
	   	<datapointer xpath="qb_query_result_edit:/root" rerunxpath="true"
	    ondata="processData();" onerror="canvas.showError(this);"
	    ontimeout="canvas.showTimeout();">
	    <method name="processData">
	        Debug.write("received qb_query_result_edit return data ");
	        var result = this.getNodeText();
	        var action = this.getNodeAttribute('action');
	        var errorMessage = this.getNodeAttribute('errorMessage');
	        var updateData = false;
	        if (action == 'getUpdateQueryResult'){
	            classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setVisible(false);
	            if (result == 'OK'){
	                classroot.errorView.txtErrorMsgQEditN.setText('Update Query Successful: ' + errorMessage);
	                
	            } else {
	                classroot.errorView.txtErrorMsgQEditN.setText('Update Query Failed: ' + errorMessage);
	            }
			}else if(action == 'getInsertQueryResult'){
	            classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setVisible(false);
	            if (result == 'OK'){
	                classroot.errorView.txtErrorMsgQEditN.setText('Insert Query Successful: ' + errorMessage);
	            } else {
	                classroot.errorView.txtErrorMsgQEditN.setText('Insert Query Failed: ' + errorMessage);	
	            }
	        }else if (action == 'getEmptySelectQueryResult'){
		        classroot.errorView.txtErrorMsgQEditN.setText('');
	        }else {//if(action == 'getSelectQueryResult'){
               if (result == 'NoData'){
               		classroot.errorView.txtErrorMsgQEditN.setText('Select Query Result: No Data');
               		classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setVisible(false);
               }else if (result == 'Failed'){
               		classroot.errorView.txtErrorMsgQEditN.setText('Select Query Failed: ' + errorMessage);
               		classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setVisible(false);
               }else{
					//Animate
					qResultViewAnimate2.startQuery.doStart();
					resultGridNAnimate2.startQueryOpacity.doStart();
					qResultViewAnimate2.setAttribute("bgcolor", 0xebf3fc);
					qResultViewAnimate2.wholeUserInputView.labeltext.setAttribute("fgcolor", 0x454545);
					qResultViewAnimate2.wholeUserInputView.userInputTxtN.setAttribute("fgcolor", 0x454545);
					//Animate End
	               classroot.errorView.txtErrorMsgQEditN.setText('Select Query Successful');
	               classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setVisible(true);

	               var initialLoad = classroot.getAttribute("initialLoadColumns");
	               if (initialLoad == true){
			       		classroot.setAttribute("initialLoadColumns", false);
			       }else{
		               var viewChanged = classroot.getAttribute("viewChanged");
		               if (viewChanged == true){			               		
			               //Try to set the column name again
			               Debug.write("Try to set the column name again");
			               classroot.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.inferColumns();
			               classroot.setAttribute("viewChanged", false);
		               }else{
							Debug.write("View is same, do not need to set the column name again");
		               }
				       		
			       }
	           }
	        }
	        
	    </method>
	   </datapointer>	
	</class>

   <datapointer xpath="dbQueryReq:/root" rerunxpath="true"
    ondata="processData();" onerror="canvas.showError(this);"
    ontimeout="canvas.showTimeout();">
    <method name="processData">
        Debug.write("received addMsgInfo return data ");
        var action = this.getNodeAttribute('action');
        var result = this.getNodeAttribute('result');
        var msgId = this.getNodeAttribute('msgId');  
        var btnType = this.getNodeAttribute('btnType');
        var projectId = this.getNodeAttribute('projectId');        
        
        if (action == 'saveQueryMsgProps'){
            msgInfo.errorView.txtErrorMsgQEditN.setAttribute('text', result);
		}            
        if (action == 'saveQuery'){
            msgInfo.errorView.txtErrorMsgQEditN.setAttribute('text', result);
		}            
        if (action == 'saveQueryMsgDetails'){
            msgInfo.errorView.txtErrorMsgQEditN.setAttribute('text', result);
		}            

        if (action == 'addQueryAndMsgInfo'){
            newMsg.newMsg.errorView.txtErrorMsgQN.setAttribute('text', result);
        } else if (action == 'editQueryAndMsgInfo'){
			msgInfo.errorView.txtErrorMsgQEditN.setAttribute('text', result);
        }
        
        if (result == 'OK'){//If query can be saved then open response window
	        controller.navEndUserAccess(projectId);
	        msgInfo.clearData();
        	if(action == 'addQueryAndMsgInfo'){
        		controller.displayMsgInfo(msgId,projectId);
        	}else{
				projectTabs.currTab.setCaptions("Messaging Query Definition", "");	        			        	
				var params = new LzParam();
	//			params.addValue('action', 'displayMsgInfo', true);
				params.addValue('action', 'displayQueryProperties', true);
				params.addValue('msgId', msgId, true);
				params.addValue('projectId', projectId, true);
				dbMsg.setQueryString(params);
				dbMsg.doRequest(); 
	           	//controller.displayMsgInfo(msgId,projectId);
         	}
		}                    
		
    </method>
   </datapointer>
   
   <!-- dbMsgTest -->
   <datapointer xpath="dbMsg:/root" rerunxpath="true"
    ondata="processData();" onerror="canvas.showError(this);"
    ontimeout="canvas.showTimeout();">
    <method name="processData">
        var ds = this.getNodeAttribute('queryDSId');
         var action = this.getNodeAttribute('action');

            var queryType = this.getNodeAttribute('queryTypeName');
			
			if(queryType != null){
				if( queryType == 'select'){
	               	msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.setAttribute("visible", true);
	               	
                    msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setAttribute("visible", true);
					msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.notSelectQuery.setAttribute("visible", false);				                        	
					msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.setAttribute("visible", true);	               	
	            }else{
					msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.tabqbN.tabQbSlider.sortTabEditN.setAttribute("visible", false);
					
                    msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.resultGridEditN.setAttribute("visible", false);
					msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.notSelectQuery.setAttribute("visible", true);				                        	
					msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.qTestTab.view1.setAttribute("visible", false);	               										               					               	
	            }    
            }

	   </method>
   </datapointer>

   <datapointer xpath="dbMsgTest:/root" rerunxpath="true"
    ondata="processData();" onerror="canvas.showError(this);"
    ontimeout="canvas.showTimeout();">
    <method name="processData">
         var action = this.getNodeAttribute('action');
         var result = this.getNodeAttribute('result');

		newMsg.newMsg.errorView.txtErrorMsgQN.setAttribute('text', result);
	   </method>
   </datapointer>

   <datapointer xpath="dbMsg2:/root" rerunxpath="true"
    ondata="processData();" onerror="canvas.showError(this);"
    ontimeout="canvas.showTimeout();">
    <method name="processData">
         var action = this.getNodeAttribute('action');
         var result = this.getNodeAttribute('result');

		msgInfo.errorView.txtErrorMsgQEditN.setAttribute('text', result);
	   </method>
   </datapointer>

   <datapointer xpath="dbMsgWS:/root" rerunxpath="true"
    ondata="processData();" onerror="canvas.showError(this);"
    ontimeout="canvas.showTimeout();">
    <method name="processData">
         var action = this.getNodeAttribute('action');
         var result = this.getNodeAttribute('result');
         var responseFormat = this.getNodeAttribute('responseFormat');
         Debug.write("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ responseFormat = " + responseFormat);
		 msgInfo.msgInfoViewTabs.msgInfoViewUpperTabs.tabmbN.tabMbSlider.msgDetailesResEditN.responseAreaView.responseFormatTxtAreaN.setAttribute('text', responseFormat);
	   </method>
   </datapointer>
      
   <datapointer xpath="imNew:/root" rerunxpath="true"
    ondata="processData();" onerror="canvas.showError(this);"
    ontimeout="canvas.showTimeout();">
    <method name="processData">
        Debug.write("received newImConn return data ");
        var result = this.getNodeText();
        var action = this.getNodeAttribute('action');
        var result = this.getNodeAttribute('result');
        var connId = this.getNodeAttribute('connId');        
        var updateData = false;
        if (action == 'imNew'){
            txtImErrorW.setAttribute('text', result);
            if (result == 'OK'){//Add a tree node in GlobalSetting Tree
                var name = txtIMNameW.getText();
                var username = txtUserNameW.getText();
                var password = txtPassW.getText();
                var type = cbxProviderW.getText();                

           		var leaf = main.getLeafForNode(apples_dp_id.p);
           		var imParent = leaf.data;
           		var imChilderen = imParent.childNodes;
            	var newChild = imChilderen[0].cloneNode();
			  	newChild.attributes.name = type + "-" + name;
			  	newChild.attributes.type = "im-conn";
			  	newChild.attributes.value = connId;
			  	newChild.attributes._iconstate = "im";
           		imParent.appendChild(newChild);
            }
        }
    </method>
   </datapointer>   
</library>
