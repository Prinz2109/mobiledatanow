<library>
	<class name="binView" width="100" 
			height="50" extends="basewindow"><!-- bgcolor="${canvas.bgcolor}" extends="mdn_roundrect" -->
			
		
		<attribute name="isFull" type="boolean" value="false"/>
		<attribute name="whichTree"/>
		<attribute name="maintab"/>
		
		<datapointer xpath="recycleData:/*" rerunxpath="true"
			ondata="processData();" onerror="canvas.showError(this);"
			ontimeout="canvas.showTimeout();">
			<method name="processData">
				Debug.write("received recycleData: " + this.serialize());
				rootNode = recycleData.getFirstChild();
		    	if (rootNode.hasChildNodes()){
		    		classroot.setAttribute("isFull", true);
		    	}
			</method>
		</datapointer>
					
		<view name="rubbishBinIcon" align="center" valign="middle" 
					resource="../images/rubbish_bin.png"
					clickable="true">
			
			<state apply="${parent.parent.isFull}">
				<attribute name="resource" value="../images/rubbish_bin_full.png"/>
			</state>
			<state apply="${!parent.parent.isFull}">
				<attribute name="resource" value="../images/rubbish_bin.png"/>
			</state>
			
			<method event="oninit">
		        Debug.write("which tree", classroot.whichTree);
		        classroot.whichTree.registerExternalDropTarget(this);
		        /*treeNavUsers.registerExternalDropTarget(this);
		        treeSett.registerExternalDropTarget(this);
		        treePres.registerExternalDropTarget(this);
		        treeDbs.registerExternalDropTarget(this);
		        */      
		    </method>
	    	
	    	<method event="onmouseover">
				//Debug.write("Hovered over 'ze Bin!");
			</method>
			
			<method event="onmouseout">
				//Debug.write("Hovered out of 'ze Bin!");
			</method>
			
	        <method event="onclick">
		      	Debug.write("Manage the rubbish bin window");
		      	if (rubbishBinWindow.isMax){
		      		Debug.write('close window');
		      		rubbishBinWindow.max.remove(); 
		      		rubbishBinWindow.min.apply();
		      	} else {
		      		Debug.write('open window and get the rubbish data from db');
		      		recycleData.doRequest();
		      		rubbishBinWindow.max.apply(); 
		      		rubbishBinWindow.min.remove();
		      		//Create Modal / Clickable
		      		LzModeManager.makeModal(rubbishBinWindow);
		      		
		      		Debug.write("classroot.maintab.currProjectId", classroot.maintab.currProjectId);
		      		Debug.write("current tree is ", classroot.whichTree);
		      		if (classroot.whichTree.name == "treeDbsName"){
		      			Debug.write("current tree is tree Dbs", classroot.whichTree);
		      			controller.updateDBRecycleBin(classroot.maintab.currProjectId);
		      		}
		      		else if (classroot.whichTree.name == "treeNavUsers"){
		      			Debug.write("current tree is treeNavUsersId", classroot.whichTree);
		      			controller.updateUsersRecycleBin(classroot.maintab.currProjectId);
		      		}
		      	}
		      	rubbishBinWindow.isMax = !rubbishBinWindow.isMax;
		      	//Set Rubbish To Front
		      	rubbishBinWindow.bringToFront();
	        </method>
		</view>
	</class>
	
	<view id="rubbishBinWindow" width="400" height="300" visible="false">
		<roundrect name="strokeRoundRect" x="0" y="0" width="400" height="300" backgroundStartColor="#2b5686" backgroundStopColor="#2b5686" borderColor="#2b5686" borderRadius="4">
				<method event="oninit">
					this.content.setAttribute("x", 1);
					this.content.setAttribute("y", 1);
				</method>
			<roundrect name="blueRoundRect" width="${parent.width - 2}" height="${parent.height - 2}" backgroundStartColor="#3b72b1" backgroundStopColor="#3b72b1" borderColor="#4579b3" borderRadius="4">
				<method event="oninit">
					this.content.setAttribute("x", 0);
					this.content.setAttribute("y", 2);
				</method>
				<view width="${parent.width - 2}" height="26" x="1">
					<!-- <view width="100%" height="100%" resource="../images/window_highlight_top.gif" stretches="width" /> -->
					<view width="21" height="38" x="375" y="1" resource="close_button" clickable="true">
						<method event="onclick">
							rubbishBinWindow.close();
						</method>
						
						<method event="onmouseover">
					    	this.setResourceNumber(2);
					    </method>
					    
					    <method event="onmouseout">
					   		this.setResourceNumber(1);
					    </method>
					</view>
				</view>
	       	</roundrect>
	       </roundrect>
	       
		<attribute name="isMax" value="false"/>
		<attribute name="parent"/>
		
	    <state name="max">
	      <animatorgroup duration="1000" process="simultaneous">
	        <animator attribute="width" to="400"/>
	        <animator attribute="height" to="300"/>
	        <animator attribute="x" to="300"/>
	        <animator attribute="y" to="200"/>
	        <animator attribute="opacity" to="1"/>
	        <animator attribute="visible" to="true"/>
	      </animatorgroup>
	    </state>
	    <state name="min" apply="true">
	      <animatorgroup duration="1000" process="simultaneous">
	        <animator attribute="width" to="48"/>
	        <animator attribute="height" to="48"/>
	        <animator attribute="x" to="${rubbishView.x + rubbishBinIcon.x}"/>
	        <animator attribute="y" to="${rubbishView.y + rubbishBinIcon.y}"/>
	        <animator attribute="opacity" to="0"/>
	        <animator attribute="visible" to="false"/>
	      </animatorgroup>
	    </state>
	    
	    <method name="restoreNode">
	    	var selItem = binItems.getSelection();
	    	if (selItem != null){
	    		var selNode = selItem.datapath.p;
	    		var selType = selNode.getAttr("type");
	    		var selID = selNode.getAttr("id");
	    		var projectId = selNode.getAttr("projectId");
	    		Debug.write("Try to restore node: ",selType, selID, projectId);
		    	switch (selType){
		    		case "datasource":
		    			// Send request to clear connection.
		    			Debug.write("Request to clear the connection ", projectId, selID);
			            var params = new LzParam();
			            params.addValue('action', 'clearConn', true);
			            params.addValue('projectID', projectId, true);
			            params.addValue('connID', selID, true);
			            dbNewConn.setQueryString(params);
			            dbNewConn.doRequest();

						// Update the database dataset.
						controller.updateDatabases(projectId);
						
						Debug.write("Recycled node: ", selNode);
						
						var pointer = new LzDatapointer();
						pointer.setPointer(selNode);
						pointer.deleteNode();
						
						binItems.clearSelection();
		    			break;
		    		case "dataView":
		    			// Send request to clear dataview.
		    			Debug.write("Request to clear the view ", selID);
			            var params = new LzParam();
			            params.addValue('action', 'clearDataView', true);
			            params.addValue('viewID', selID, true);
			            dbViewDelete.setQueryString(params);
			            dbViewDelete.doRequest();

						// Update the database dataset.
						controller.updateDatabases(projectId);
						
						Debug.write("Recycled node: ", selNode);
						
						var pointer = new LzDatapointer();
						pointer.setPointer(selNode);
						pointer.deleteNode();
						
						binItems.clearSelection();
		    			break;
		    		case "user":
		    			// Send request to clear user.
		    			controller.updateUserDeleteStatus('clearUser',selID,projectId);
		    			
						// Update the usergroups dataset.
						//controller.updateDbUsergroups();
		    			var rootNode = dbUsergroups.getFirstChild();
						var usersNode = null;
						for (var i in rootNode.childNodes){
						  usersNode = rootNode.childNodes[i];
						  if (usersNode.getAttr('type') == 'users'){
						   	break;
						  }
						}
						Debug.write("Recycled node: ", selNode);
						usersNode.appendChild(selNode.cloneNode());
						var pointer = new LzDatapointer();
						pointer.setPointer(selNode);
						pointer.deleteNode();
						binItems.clearSelection();
		    			break;
		    		case "group":
		    			// Send request to clear group.
		    			controller.updateGroupDeleteStatus('clearGroup',selID, projectId);
		    			var rootNode = dbUsergroups.getFirstChild();
						var usersNode = null;
						for (var i in rootNode.childNodes){
						  usersNode = rootNode.childNodes[i];
						  if (usersNode.getAttr('type') == 'groups'){
						   	break;
						  }
						}
						usersNode.appendChild(selNode.cloneNode());
						
						var pointer = new LzDatapointer();
						pointer.setPointer(selNode);
						pointer.deleteNode();
						binItems.clearSelection();
		    			break;
		    		case "im-conn":
			            var params = new LzParam();
			            params.addValue('action', 'restoreMsgSett', true);
			            params.addValue('id', selID, true);
			            params.addValue('type', selType, true);			            
			            restoreObjSett.setQueryString(params);
			            restoreObjSett.doRequest();

						controller.getNavSett();
						
						var pointer = new LzDatapointer();
						pointer.setPointer(selNode);
						pointer.deleteNode();
						
						binItems.clearSelection();
		    			break;
		    		case "edit_mdn_email":	
			            var params = new LzParam();
			            params.addValue('action', 'restoreMsgSett', true);
			            params.addValue('id', selID, true);
			            params.addValue('type', selType, true);			            
			            restoreObjSett.setQueryString(params);
			            restoreObjSett.doRequest();

						controller.getNavSett();
						
						var pointer = new LzDatapointer();
						pointer.setPointer(selNode);
						pointer.deleteNode();
						
						binItems.clearSelection();
		    			break;		    		
		    		case "smpp-sett":	
			            var params = new LzParam();
			            params.addValue('action', 'restoreMsgSett', true);
			            params.addValue('id', selID, true);
			            params.addValue('type', selType, true);			            
			            restoreObjSett.setQueryString(params);
			            restoreObjSett.doRequest();

						controller.getNavSett();
						
						var pointer = new LzDatapointer();
						pointer.setPointer(selNode);
						pointer.deleteNode();
						
						binItems.clearSelection();
		    			break;		    				    			
		    		case "project":
		    			// Send request to clear project.
		    			Debug.write("Request to clear the project ", projectId, selID);
			            var params = new LzParam();
			            params.addValue('action', 'clearProject', true);
			            params.addValue('projectID', projectId, true);
			            dbProjectDelete.setQueryString(params);
			            dbProjectDelete.doRequest();

						// Update the dataset.
						controller.navHome();
						
						Debug.write("Recycled node: ", selNode);
						
						var pointer = new LzDatapointer();
						pointer.setPointer(selNode);
						pointer.deleteNode();
						
						binItems.clearSelection();
		    			break;
		    	}
		    	// Check whether rubbish dataset is empty. --> in data pointer.
		    	rootNode = recycleData.getFirstChild();
		    	if (!rootNode.hasChildNodes()){
		    		rubbishView.setAttribute("isFull", false);
		    	}
		    }
	    </method>
	    
	    <method name="emptyBin">
	    <![CDATA[
	    	var rootNode = recycleData.getFirstChild();
			var childNode = null;
			var pointer = new LzDatapointer();
			while (rootNode.hasChildNodes()){
			  childNode = rootNode.getFirstChild();
			  pointer.setPointer(childNode);
			  var itemID = pointer.getNodeAttribute("id");
			  var itemType = pointer.getNodeAttribute("type");
			  var projectId = pointer.getNodeAttribute("projectId");
			  if (itemType == 'datasource'){
	    			// Send request to delete connection.
	    			Debug.write("Request to delete the connection ", projectId, itemID);
		            var params = new LzParam();
		            params.addValue('action', 'deleteConn', true);
		            params.addValue('projectID', projectId, true);
		            params.addValue('connID', itemID, true);
		            dbNewConn.setQueryString(params);
		            dbNewConn.doRequest();

					// Update the database dataset.
					//controller.updateDatabases(projectId);
					
					//Debug.write("Recycled node: ", selNode);
					
					/*var pointer = new LzDatapointer();
					pointer.setPointer(selNode);
					pointer.deleteNode();
					
					binItems.clearSelection();
	    			break;*/
			  } if (itemType == 'dataView'){
	    			// Send request to delete dataview.
	    			Debug.write("Request to delete the view ", itemID);
		            var params = new LzParam();
		            params.addValue('action', 'deleteDataView', true);
		            params.addValue('viewID', itemID, true);
		            dbViewDelete.setQueryString(params);
		            dbViewDelete.doRequest();

			  } else if (itemType == 'user'){
					controller.updateUserDeleteStatus("deleteUser",itemID,classroot.maintab.currProjectId);
			  } else if (itemType == 'group'){
					controller.updateGroupDeleteStatus("deleteGroup",itemID,classroot.maintab.currProjectId);
			  } else if(itemType == 'edit_mdn_email' || itemType == 'im-conn' || itemType == 'smpp-sett'){
					var params = new LzParam();
					params.addValue('action', 'clearMsgSett', true);
					params.addValue('id', itemID, true);
					params.addValue('type', itemType, true);	            
					restoreObjSett.setQueryString(params);
					restoreObjSett.doRequest();			  
			  } else if (itemType == 'project'){
	    			// Send request to delete dataview.
	    			Debug.write("Request to delete the project ", projectId, itemID);
		            var params = new LzParam();
		            params.addValue('action', 'deleteProject', true);
		            params.addValue('projectID', projectId, true);
		            dbProjectDelete.setQueryString(params);
		            dbProjectDelete.doRequest();

			  }
			  pointer.deleteNode();
			}
	   		rubbishView.setAttribute("isFull", false);
	   		]]>
	    </method>
	    
	    <roundrect name="whiteRoundRect" width="384" height="264" x="8" y="28" backgroundStartColor="#F9F9F9" backgroundStopColor="#F9F9F9" borderColor="#455463" borderRadius="4">
	    </roundrect>
	    
	    <view width="${immediateparent.width - 32}" height="${immediateparent.height - 20}"
	    			x="16" y="36" name="binTestingView">
	    	<simplelayout axis="y" spacing="10"/>
		    <list id="binItems" width="${immediateparent.width}" height="210">
		    	<textlistitem datapath="recycleData:/root/node" text="$path{'@name'}"/>
		    </list>
		    <view align="center">
		    	<simplelayout axis="x" spacing="3"/>
		    	<!-- 
		    	<mdn_button text="Close">
		    		<method event="onclick">
		    			rubbishBinWindow.close();
		    		</method>
		    	</mdn_button>
		    	-->
		    	<mdn_button text="Restore">
		    		<method event="onclick">
		    			rubbishBinWindow.restoreNode();
		    		</method>
		    	</mdn_button>
		    	<mdn_button text="Empty">
		    		<method event="onclick">
		    			rubbishBinWindow.emptyBin();
		    		</method>
		    	</mdn_button>
		    </view>
		  </view>
	    
	    <method name="close">
	      if (this.isMax) {
	      	this.max.remove(); 
	      	this.min.apply();
	      	//Remove Modal / Unclickable
		    LzModeManager.release(rubbishBinWindow);
	      } else {
	      	this.max.apply(); 
	      	this.min.remove();
	      }
	      this.isMax = !this.isMax;
	    </method>
	    
	    
	</view>
</library> 