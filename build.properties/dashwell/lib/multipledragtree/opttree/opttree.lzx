<library>
    <script>
    <![CDATA[
        function alphaNameSortComparator(a,b) {
            var r;
            if (a.getAttr("name") < b.getAttr("name")) {
                r = -1;
            } else if (a.getAttr("name") > b.getAttr("name")) {
                r = 1;
            } else if (a.getAttr("name") == b.getAttr("name")) {
                r = 0;
            }
            return r;
        }
    ]]>
    </script>
    <!-- A keyboard navigable (with arrow keys) tree control that supports 
         selection and dynamic data loading. This tree must be backed by an
         XML DOM datastructure and presented within a clipping region. 
         
         The datapath for an opttree must resolve to a single LzDataElement
         which is the undisplayed root of the tree. -->
    <class name="opttree" focusable="true" width="100">
        <!--- The xpath expression to use to retrieve nodes out of the 
              datapath. -->
        <attribute name="nodepath" value="*" type="string"/>


        <!--- The name of the class to use to represent nodes in the tree.-->
        <attribute name="nodeclass" type="string"
                   setter="setNodeInst( nodeclass )"/>

        <!--- (Protected) The attribute name to use in the data to mark a
              a node as open.-->
        <attribute name="openattr" value="__OPTTREE_META_open" type="string"/>
        <!--- (Protected) An xpath that selects the openattr attribute from
              a node. This should match openattr but prepend the '@' symbol.
              This cannot be when=always or when=once because it is used as
              a reference in a $path expression in baseopttreenode -->
        <attribute name="openattrpath" 
                   value="@__OPTTREE_META_open" type="string"/>

        <!--- (Protected) The attribute name to use in the data to mark a
              a node's depth in the tree hierarchy -->
        <attribute name="depthattr" value="__OPTTREE_META_depth" type="string"/>

        <!--- (Protected) The attribute name for the index of the node,
              within its parents childnodes, as it will 
              appear when replicated -->
        <attribute name="indexattr" value="__OPTTREE_META_index" 
                   type="string" />

        <!--- (Protected) An xpath that selects the depthattr attribute from
              a node. This should match depthattr but prepend the '@' symbol.
              This cannot be when=always or when=once because it is used as
              a reference in a $path expression n baseopttreenode -->
        <attribute name="depthattrpath" 
                   value="@__OPTTREE_META_depth" type="string"/>

        <attribute name="nodecollection" 
                   value="${ opttreecontroller.nodelist }"/>

        <attribute name="nodelist" value="nodecollection" when="always"
                   setter="nodeinst.datapath.setNodes( nodelist )"/>

        <attribute name="_openNodes" value="$once{new Array()}" />

        <!--- Sent when a node gets selected -->
        <attribute name="onselect" value="null" />

        <!-- Display tree connector lines if true. -->
        <attribute name="showtreelines" type="boolean" value="false" />

        <!-- Default selectable to true, force true if multiselect is true, 
             otherwise read value from declaration -->
        <attribute name="selectable" 
                   value="$once{multiselect ? true : 
                                this.selectable!=null ? this.selectable : true}" 
                   setter="setSelectable(selectable)"
                   type="boolean" />

        <event name="oncontextselect" />

        <method name="handleRightClick" args="e, caption">
            var o = {datanode: e, caption: caption};
            this.oncontextselect.sendEvent(o);
        </method>

        <method name="setSelectable" args="sel">
            this.selectable = sel;
            if (!this.selectable) {
                this.clearSelection();
            }
        </method>

        <attribute name="multiselect" value="false" type="boolean"
                   setter="setMultiSelect(multiselect)" />

        <method name="setMultiSelect" args="ms">
            this.multiselect = ms;
            if (this.multiselect) {
                this.setAttribute("selectable", true);
            } else {
                this.clearSelection();
            }
        </method>

        <include href="opttreecontroller.lzx"/>

        <dataselectionmanager name="selman">
        </dataselectionmanager>

        <!--- Used to recursively drill through dataset. Sends an event
              when it reaches a node by a given name.
              -->
        <recursivedriller name="drillDown_dp" />

        <!--- @keywords private -->
        <method name="setNodeInst" args="nc">
            this.nodeclass = global[ nc ];
            new nodeclass( this , { name : "nodeinst" } ); 
        </method>

        <!--- Return an array of currently open leaves.
              @return Array: Array of LzDataElements.
              -->
        <method name="getOpenLeaves">
        <![CDATA[
            this._openNodes = new Array();
            drillDown_dp.setStart(this.datapath.p);
            var nodeName = this.nodepath == "*" ? null : this.nodepath;
            drillDown_dp.drillDown(nodeName);
            return this._openNodes;
        ]]>
        </method>

        <!--- Callback for getOpenLeaves -->
        <method name="_leafParseHandler" event="onnode" args="n"
                reference="drillDown_dp">
            if (n.getAttr(this.openattr)=="true") {
                this._openNodes.push(n);
            }
        </method>

        <!--- Obtain a reference to the leaf view for a given
              XML node.
              @param LzDataElement n: The LzDataElement to search for.
              @return LzView n: The view.
              -->
        <method name="getLeafForNode" args="n">
            return nodeinst.getCloneForNode(n);
        </method>

        <!--- Retrieve the current selection
              @return Array: Array of LzDataElements.
              -->
        <method name="getSelection">
        <![CDATA[
            var sel = new Array();
            var arrayDatapointers = selman.getSelection();
            var count = arrayDatapointers.length;
            for (var i=0;i< arrayDatapointers.length;i++) {
                sel.push(arrayDatapointers[i].p);
            }
            return sel;
        ]]>
        </method>

        <!--- Clear the current selection from the tree
              -->
        <method name="clearSelection">
            if (this["selman"]) {
                this.selman.clearSelection();
            }
        </method>

        <!--- Set the tree node that represents the given LzDataElement to 
              be open. Open elements display their children; not open elements
              do not.
              @param LzDataElement p: The LzDataElement to set this on.
              @param boolean val: The new value for the "open" attribute for 
                                  the given LzDataElement. -->
        <method name="setOpen" args="p , val">
            p.setAttr( openattr, val ? "true" : "false" );
            if (val) {
                onexpand.sendEvent(p);
            } else {
                oncontract.sendEvent(p);
            }
        </method>

        <method event="onexpand" />
        <method event="oncontract" />

        <method name="recursiveOpen" args="p, val">
            opttreecontroller.lock( p );
            this.setOpen( p , val );
            var c = opttreecontroller.getChildNodes( p );
            for ( var k in c ){
                this.recursiveOpen( c[ k ] , val );
            }
            opttreecontroller.unlock( p );
        </method>

        <method name="setAllOpen" args="val">
            var ilist = opttreecontroller.getChildNodes( datapath.p );
            opttreecontroller.lock( "ao" );
            for ( var k in ilist ){
                this.recursiveOpen( ilist[ k ], val );
            }
            opttreecontroller.unlock( "ao" );
        </method>

        <!--- Make the element
              be open. Open elements display their children; not open elements
              do not.-->
        <method name="select" args="el">
            if (this.selectable) {
                if (!this.multiselect) {
                    this.clearSelection();
                }
                selman.select( el );
                this.onselect.sendEvent(el);
            }
        </method>

        <!-- empty method to avoid debugger warning -->
        <method event="onselect">
        </method>

        <!--- The keyboard nav highlighted baseopttreenode or null. This
              attribute is read-only. -->
        <attribute name="highlighted" value="null"/>

        <!--- Sets the keyboard selection (highlight) to the given 
              baseopttreenode. 
              @params baseopttreenode who: The baseopttreenode to give the 
                                           keyboard highlight to. -->
        <method event="onkeyup" args="k">
            var curr = this.highlighted;

            if ( !curr ){
                var cls = nodeinst.clones;
                if ( !cls.length ) return;
                this.select( cls[ 0 ] );
                return;
            }

            if ( k == 38 || k == 40 ){
                //up down
                var dir = k - 39;
                var cl = this._findNextClone( curr , dir );
                this.select( cl );
            } else if ( k == 37 ){
                //left
                if ( curr.open ) {
                    this.setOpen( curr.datapath.p , false );
                }else {
                    var pnode = curr.datapath.p.parentNode;
                    if ( pnode == datapath.p ) return;
                    var cl = this._findInClones( pnode );
                    var wentin = false;
                    while( cl == null ){
                        wentin = true;
                        this._adjustMargin( - 1 );
                        cl = this._findInClones( pnode );
                    }
                    if ( wentin ) this._adjustMargin( - 1 );
                    this.select( cl );
                }
            } else if ( k == 39 ){
                //right
                if ( !curr.open ) {
                    this.setOpen( curr.datapath.p , true );
                }else {
                    var cl = this._findNextClone( curr , 1 );
                    this.select( cl );
                }
            } else if ( k == 32 || k == 13 ){
                if ( highlighted ){
                    highlighted.doSelected();
                }
            }
        </method>

        <!--- @keywords private -->
        <method name="_findNextClone" args="who, dir">
            <![CDATA[ 
            //returns the next clone in the flattened list given an existing
            //clone and a direction to move in. adjusts the position of the
            //opttree within its clipping region if necessary.
            var cls = nodeinst.clones;
            if ( !cls.length ) return null;

            var clnum = null;
            for ( var i = 0; i < cls.length; i++ ){
                if ( cls[ i ] == who ) {
                    clnum = i;
                    break;
                }
            }
            if ( clnum == null ) return null;

            var nextnum = clnum + dir;
            var nextone = null;
            if  ( nextnum >= 0 && nextnum < cls.length ){
                var nextone =  cls[ nextnum ];
            } 

            if ( nextone ){
                var itheight = cls[ 0 ].height;
                var adjy = nextone.y + y;  
                if ( adjy < itheight ){
                    this._adjustMargin( -1 );
                } else if ( adjy > mask.height - 2*itheight ){
                    this._adjustMargin( 1 );
                }
                return nextone;
            }

            var clptr = who.datapath.p;
            var clptrnum = null;

            var nodes = nodeinst.nodes;

            var clptrnum = null;
            for ( var i = 0; i < nodes.length; i++ ){
                if ( nodes[ i ] == clptr ) {
                    clptrnum = i;
                    break;
                }
            }

            var nexthnode = nodes[ clptrnum + dir ];

            this._adjustMargin( nextnum < 0 ? -1 : 1 );

            return this._findInClones( nexthnode );

            ]]>
        </method>
        
        <!--- @keywords private -->
        <method name="_adjustMargin" args="dir">
            //moves the opttree up or down (depending on the dir) in within
            //its clipping region.
            var cls = nodeinst.clones;
            var itheight = cls[ 0 ].height;
            var adj = itheight * -dir;
            var ny = y + adj;
            this.setY( Math.min( 0 , Math.max( mask.height - height, ny ) ) );

        </method>

        <!--- @keywords private -->
        <method name="_findInClones" args="p">
            <![CDATA[ 
            //finds the clone pointing to the given LzDataElement or returns
            //null if that clone is not mapped
            var cls = nodeinst.clones;
            for ( var i = 0; i < cls.length; i++ ){
                if ( cls[ i ].datapath.p == p ) {
                    return cls[ i ];
                }
            }
            return null;
            ]]>
        </method>


        <method name="updateHierarchy" args="p">
            //Debug.write( 'update', p );
        </method>

        <!--
            TODO: Below is a workaround for LPP-1560, and should be 
                    removed when it is fixed. It moves the views well
                    out of the clipping region and replaces them to force
                    re-bound clones to send an ondata event. 
                    If performance is particularly bad, consider reducing
                    the amount (100000 currently) of pixels that the
                    entire tree is moved off screen. NOTE: The tree
                    cannot have its y-value constrained.
        -->
        <method name="forceRefreshForRepBug">
            this.initialY = this.y;
            this.setY(-100000);
            this.setY(this.initialY);
        </method>

        <!--- Tests whether the given view is selected.
              @params LzView who: The view  to test
              @return Boolean: True if the view is selected`
              -->
        <method name="isSelected" args="who">
            return this.selman.isSelected(who);
        </method>

    </class>
</library>
