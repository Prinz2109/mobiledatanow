<canvas width="100%" height="100%" debug="true" >
    <include href="tree/dragtree/library.lzx" />
    <dragtreefloater id="floater" />
    <dataset name="dsFlat">
        <root>
            <node name="Fruits" _dragtarget="true"
                  __OPTTREE_META_open="true">
                <node name="Apples" _draggable="true">
                    <node name="Granny Smith" price="0.89" _draggable="true" />
                    <node name="Fuji" price="1.29" _draggable="true" />
                    <node name="Golden Delicious" price="0.89" _draggable="true" />
                </node>
                <node name="Peppers" price="1.39" _draggable="true" />
                <node name="Oranges" price="1.39" _draggable="true" />
                <node name="Pears" price="0.59" _draggable="true" />
            </node>
            <node name="Vegetables" _dragtarget="true">
                <node name="Carrots" price="0.25" />
                <node name="Potatoes">
                    <node name="Jersey Potatoes" price="0.99" />
                    <node name="Idaho Potatoes" price="0.69" />
                    <node name="King Edward Potatoes" price="1.29" />
                </node>
            </node>
            <node name="Shopping List" _dragtarget="true">
                <node name="Loo Paper" price="0.99" />
            </node>
            <node name="Zeta" _dragtarget="true">
            </node>
        </root>
    </dataset>
  <view width="${immediateparent.width}" height="${immediateparent.height}">   
	<view name="all" x="0" y="0" width="${immediateparent.width}"
	      height="${immediateparent.height}" bgcolor="${canvas.bgcolor}">
		<simplelayout axis="x"/>  
		<view name="projectButton" x="0" width="21" valign="middle" resource="images/projectsClosed.png" clickable="true">
			<method event="onclick">
				Debug.write("projectButton clicked....");
				/*
				 * We have to assign background once again.(in class defintion or instance level)
				*/
				var newTab=new mainTab(projectTabs,{bgcolor:'0xffffff',text:"Sample2",currProjectId:"2"});
				Debug.write("currProjectID in projectView", "2");
					newTab.content.setWidth(projectTabs.immediateparent.width);
					newTab.content.setHeight(projectTabs.immediateparent.height);				    		
				// save this instance to the array
				projectTabs.newtappaneArray[projectTabs.newtappaneArray.length]=newTab;
				newTab.tab.setAttribute("selected", true);
			</method>
		</view>
		<tabs id="projectTabs" _contentWidth="${immediateparent.width-21}" _contentHeight="${immediateparent.height}" bgcolor="${canvas.bgcolor}"> 
                       <!-- an array which refer to all new tabpanes-->
			<attribute name="newtappaneArray" value="new Array()"/>
			<attribute name="currTab"/>
			<attribute name="projectIDConstants" value="1"/>
			<method event="oninit">
				<![CDATA[
				Debug.write("projectIDConstants: ", projectIDConstants);
				projectIDConstants = 1;
				Debug.write("projectIDConstants: ", projectIDConstants);	
				var newTab=new mainTab(this,{bgcolor:'0xffffff',text:"Sample1",currProjectId:"1"});
				newTab.content.setWidth(this.immediateparent.width);						
					newTab.content.setHeight(this.immediateparent.height);				    		
				// save this instance to the array
				this.newtappaneArray[this.newtappaneArray.length]=newTab;
				newTab.tab.setAttribute("selected", true);
				this.setAttribute("currTab", newTab);
				newTab.tab.setAttribute("bgcolor", canvas.bgcolor);
					]]>
			</method>					
		</tabs> 	
	</view>		
    </view>
    
    <class name="mainTab" extends="tabpane" inset_left="0" inset_top="0" inset_bottom="0" inset_right="0" bgcolor="${canvas.bgcolor}">
        <method event="oninit">
           this.content.setWidth(this.immediateparent.width);
		   this.content.setHeight(this.immediateparent.height);
		   projectTabs.setAttribute("currTab", this);	    
        </method>     	

		<attribute name="currProject" type="string" value="null"/>
		<attribute name="currProjectId" type="number" value="1"/>
		<attribute name="currView" type="string" value=""/>
		<attribute name="currDBView" type="string" value="none"/>
		<attribute name="currDBSelNode"/>
		<attribute name="currUserView" type="string" value="none"/>
		<attribute name="currUserSelNode"/>
		<attribute name="currTabelement"/>

        <method event="onselect" reference="this.tab">
       		 if (this.tab.selected) {
       		 	//Debug.write("which projectTabs selected....", this.tab.text, this.currTabelement.text);	
       		 	projectTabs.setAttribute("currTab", this);				
				
			//parent.content.setWidth(parent.immediateparent.width-10);				
			this.content.setWidth(this.immediateparent.width);
			
			//parent.content.setHeight(parent.immediateparent.height-20);
			this.content.setHeight(this.immediateparent.height);
			
			Debug.write("maintab selected Current tab is: ", projectTabs.currTab.currProjectId);
			Debug.write("maintab selected Current projectId is: ", currProjectId);
			
			//this.currTabelement.openned();       		 	
       		 }
       		 	        		
       	</method>
       	
       	<view name="_projectView" x="0" y="0" width="${parent.width}" height="${parent.height}" visible="true" opacity="1">
	    <simplelayout axis="x" locked="true" />
	    
            <view name="nav" height="${immediateparent.height}"  width="${parent._horiz_divider.x}">
		    <simplelayout axis="y"/>
		    <navigationView name="navigation" maintab="${classroot}" width="${immediateparent.width}" 
                                    height="${immediateparent.height-30}" spacing="1"
                                    treeDatapath="dsFlat:/root" treeFloater="${floater}"/>      
	    </view><!-- leftPanel -->
	    
	    <view name="_horiz_divider" x="${parent.width / 6}" width="5"
			    bgcolor="#e3e3e3" height="${immediateparent.height}" 
			    onmousedown="dragging.apply()"
				onmouseup="dragging.remove()">
		<state name="dragging">
		    <attribute name="minX" value="150"/>
		    <attribute name="maxX" value="${parent.width / 2}"/>
		    <attribute name="thisX" value="${parent.getMouse('x')}"/>
	            <attribute name="x" value="${Math.max(Math.min(this.maxX, this.thisX), this.minX )}"/>
	        </state>
	    </view><!-- _horiz_divider -->
	
	    <view name="_rightView" x="${parent._horiz_divider.x + parent._horiz_divider.width}"
		width="${immediateparent.width - parent.nav.navigation.width - parent._horiz_divider.width}"
		height="${immediateparent.height}">
	
			<simplelayout axis="y" />
		
			<method event="onwidth">
			    this._upperPart._mainView.setAttribute("width", this.width - 1);
			</method>
		
			<view name="_upperPart" width="${immediateparent.width}" height="${10}" >
                            
			    <simplelayout axis="y" />
			    <!-- The main view. -->
			    <view name="_mainView" width="${immediateparent.width}"
					height="${parent.height }">
			    </view><!-- _mainView -->
			</view><!-- upperPart -->
	
            </view><!-- rightView -->
	</view><!-- project view -->		
    </class>
    
    <class name="navigationView" width="${immediateparent.width / 6}"
                height="${immediateparent.height}" x="0" y="0"
                extends="tabslider" clip="true" slideduration="1000">
        <attribute name="maintab"/>
        
        <attribute name="dragtree"/>
        <attribute name="treeDatapath" type="string"/>
        <attribute name="treeFloater"/>
        
	    <tabelement name="databases" text="database" height="500" selected="true">
			<!-- <attribute name="currProjectId" value="$once{classroot.currProjectId}"/> -->
			<method event="oninit">
				//classroot.maintab.setAttribute("currTabelement", this);
	        </method> 
	        <stableborderlayout axis="y" />
	        <view width="${immediateparent.width}" height="${parent.parent.height - 10}">

	            <view width="100%" height="100%" clip="true">
	                <dragtree  name="treeDbsName"  	nodepath="node" nodeclass="dragtreenode"  multiselect="true" >
	                    <attribute name="currselnode" value="null"/>
					    <method event="oninit">
	                        classroot.setAttribute('dragtree', this);
	                        this.setAttribute("datapath", classroot.getAttribute('treeDatapath'));
	                        this.setAttribute('floaterref', classroot.getAttribute('treeFloater'));
	                        this.getAttribute('floaterref').setAttribute('_dragtreeref', this);
					    </method>                   
					    <handler name="oncurrselnode">
	                        this.select(this.getAttribute("currselnode"));
	                    </handler>
			
					    <attribute name="currselnodeData" />
					    <handler name="oncurrselnodeData"/>  
		
			            <handler name="onselect" args="selNode">
						   <![CDATA[
                           if(selNode != null){ 
								this.setAttribute("currselnode", selNode);
								var selNode_dp = selNode.datapath.p;                        
								this.setAttribute("currselnodeData", selNode_dp);  
								var selNodeName = selNode_dp.getAttr("name");
								Debug.write("!!!!!!!!!!Selected node is selNodeName: ", selNode, selNodeName);	                    
                            }
						    ]]>
					    </handler>
                        <datapointer name="copyFrom_dp" />
                        <datapointer name="copyTo_dp" />
                             <method event="ondragdrop" args="resp">
                                <![CDATA[
                                Debug.write('haha');
                                var dragees = resp.draggedNodes;
                                var fromNode = resp.from;
                                //Debug.write("------drag from node", fromNode.getAttr("name"));
                                if (resp.type == "internal") {
                                    // Dragging a node from one place in the tree to another
                                    // node
                                    var toNode = resp.to.datapath.p;
                                    switch (toNode.getAttr("name")) {
                                        case "Fruits":
                                            Debug.write( ">> COPYING TO FRUITS");
                                            for (var i in dragees) {                                           	
                                                copyFrom_dp.setPointer(dragees[i]);
                                                var draggedName = copyFrom_dp.getNodeAttribute("name");
                                                Debug.write("Dragged name is: "+ draggedName);
                                                
                                            	
                                            	copyTo_dp.setPointer(toNode);
                                                copyTo_dp.addNodeFromPointer(copyFrom_dp);
                                                copyFrom_dp.deleteNode();
                                            }
                                        break;
                                        case "Vegetables":
                                            Debug.write( ">> COPYING TO VEGETABLES");
                                            for (var i in dragees) {
                                                copyFrom_dp.setPointer(dragees[i]);
                                                
                                                var draggedName = copyFrom_dp.getNodeAttribute("name");
                                                Debug.write("Dragged name is: "+ draggedName);
                                                
                                                copyTo_dp.setPointer(toNode);
                                                copyTo_dp.addNodeFromPointer(copyFrom_dp);
                                                copyFrom_dp.deleteNode();
                                            }
                                        break;
                                        case "Shopping List":
                                            Debug.write( ">> ADDING TO SHOPPING LIST");
                                            //for (var i in dragees) {
                                            //    copyFrom_dp.setPointer(dragees[i]);
	                                          for (var i in dragees) {
	                                                copyFrom_dp.setPointer(dragees[i]);
	                                                var draggedName = copyFrom_dp.getNodeAttribute("name");
                                                	Debug.write("Dragged name is: "+ draggedName);
	                                                
	                                                copyTo_dp.setPointer(toNode);
	                                                copyFrom_dp.setPointer(dragees[i]);
	                                                copyTo_dp.setPointer(toNode);
	                                                copyTo_dp.addNodeFromPointer(copyFrom_dp);
	                                          }
                                           // }
                                        break;
                                        case "Zeta":
                                            Debug.write( ">> ADDING TO ZETA");
                                            for (var i in dragees) {
                                                copyFrom_dp.setPointer(dragees[i]);
                                                
                                                var draggedName = copyFrom_dp.getNodeAttribute("name");
                                                Debug.write("Dragged name is: "+ draggedName);
                                                
                                                copyTo_dp.setPointer(toNode);
                                                copyTo_dp.addNodeFromPointer(copyFrom_dp);
                                                main.setY(-2000);
                                                main.setY(0);
                                            }
                                        break;
                                    }
                                } else if (resp.type=="external") {
                                    // Dragging a node from a tree to an outside drop
                                    // target
                                    switch (resp.to) {
                                        case externalDropTargetExample:
                                            Debug.write(">> DROP ON FIRST EXTERNAL DROP TARGET");
                                        break;

                                        case externalDropTargetExampleTwo:
                                            Debug.write(">> DROP ON OTHER EXTERNAL DROP TARGET");
                                        break
                                    }
                                }
                                ]]>
                            </method>
	               </dragtree>
	               
	            </view>
	        </view>
	        <method name="openned">
	            super.openned();
                    /*
	            Debug.write("Current project id in navigationView", classroot.maintab.currProjectId);
	            // Needs to be changed to ondata event and finding the first database.
	            classroot.maintab.setAttribute("currTabelement", this);  
	            
	            if (projectTabs.currTab.text == "Sample1"){
	            	Debug.write("set tree datapath to dsFlat");
	            	classroot.treeDbs.setAttribute("datapath", "dsFlat:/root");
	            }else if (projectTabs.currTab.text == "Sample2") {
	            	Debug.write("set tree datapath to dsFlat2");
	            	classroot.treeDbs.setAttribute("datapath", "dsFlat2:/root");
	            } */		
                   if(classroot.dragtree.getAttribute("currselnode") != null){
                	    Debug.write("DB openned A DB view exists already.", classroot.maintab.currProjectId, 
                                      classroot.dragtree.getAttribute("currselnode").datapath.p.getAttr("name"));               
                    }
	                classroot.dragtree.select(classroot.dragtree.getAttribute("currselnode"));
	                return;
                     
	        </method>
	    </tabelement>        
    </class>
</canvas>


