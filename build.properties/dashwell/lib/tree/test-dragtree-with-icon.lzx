<canvas debug="true">
    <include href="dragtree/library.lzx"/>


    <dragtreefloater id="floater"
                     _dragtreeref="$once{main}" />

    <resource name="folder_rsrc">
        <frame src="iconresources/blank.png" />
        <frame src="iconresources/folder_closed.png" />
        <frame src="iconresources/folder_open.png" />
    </resource>

    
    <class name="dragfiletreenode" extends="dragtreenode">
        <attribute name="labelx" value="${40}" />
        <attribute name="iconstate" value="$path{'@_iconstate'}" />
        <method name="updateIcon">
            var frameNum = 1;
            switch (this.iconstate) {
                case "openclosed":
                    frameNum = this.open ? 3 : 2;
                break;
            }
            // If there is no icon, don't indent the text.
            if (this["icon"]) {
                this.icon.setResourceNumber(frameNum);
            }
        </method>

        <method event="oniconstate">
            this.updateIcon();
        </method>
        
        <method event="onopen">
            this.updateIcon();
        </method>
        
        <method event="oninit">
            this.updateIcon();
        </method>

        <!-- This method must be overwritten -->

        <view name="icon" x="${parent.leafindent+19}" 
              resource="folder_rsrc">
        </view>
    </class>


    <dataset name="dsFlat">
        <root>
            <node name="Fruits" _dragtarget="true"
                  __OPTTREE_META_open="true"
                  _iconstate="openclosed">
                <node name="Apples" _iconstate="openclosed">
                    <node name="Granny Smith" price="0.89" />
                    <node name="Fuji" price="1.29" />
                    <node name="Golden Delicious" price="0.89" />
                </node>
                <node name="Peppers" price="1.39" _draggable="true" />
                <node name="Oranges" price="1.39" _draggable="true" />
                <node name="Pears" price="0.59" />
            </node>
            <node name="Vegetables" _dragtarget="true"
                  _iconstate="openclosed">
                <node name="Carrots" price="0.25" />
                <node name="Potatoes" _iconstate="openclosed">
                    <node name="Jersey Potatoes" price="0.99" />
                    <node name="Idaho Potatoes" price="0.69" />
                    <node name="King Edward Potatoes" price="1.29" />
                </node>
            </node>
            <node name="Shopping List" _dragtarget="true"
                  _iconstate="openclosed">
                <node name="Loo Paper" price="0.99" />
            </node>
        </root>
    </dataset>

    <window title="dragtree"
            x="20" y="20" height="320" width="220" resizable="true">
      <view width="200" height="150" clip="true">
        <dragtree id="main" datapath="dsFlat:/root"
                nodepath="node" nodeclass="dragfiletreenode"
                floaterref="$once{floater}"
                width="100%">
            <method name="updateHierarchy" args="p">
                //update the model
            </method>
        </dragtree>
        <scrollbar />
      </view>
    </window>


    <!-- ========================= Test Harness ========================= -->
    <window x="260" y="20" width="240">
        <simplelayout axis="y" spacing="10" />
        <text width="100%" multiline="true">
            Drag Peppers from Fruits to Vegetables and back again.
        </text>

        <datapointer name="copyFrom_dp" />
        <datapointer name="copyTo_dp" />

        <method event="ondragdrop" reference="main" 
                args="resp">
            <![CDATA[
            Debug.write("ondragdrop event sent by dragtree with arguments: ",
                        resp);

            
            var dragee = resp.draggedNode;
            var fromNode = resp.from;
            if (resp.type == "internal") {
                var toNode = resp.to.datapath.p;
                switch (toNode.getAttr("name")) {
                    case "Fruits":
                        Debug.write( ">> COPYING TO FRUITS");
                        copyFrom_dp.setPointer(dragee);
                        copyTo_dp.setPointer(toNode);
                        copyTo_dp.addNodeFromPointer(copyFrom_dp);
                        copyFrom_dp.deleteNode();
                    break;
                    case "Vegetables":
                        Debug.write( ">> COPYING TO VEGETABLES");
                        copyFrom_dp.setPointer(dragee);
                        copyTo_dp.setPointer(toNode);
                        copyTo_dp.addNodeFromPointer(copyFrom_dp);
                        copyFrom_dp.deleteNode();
                    break;
                    case "Shopping List":
                        // TODO: Bug - if you add a node to a leaf with
                        //       no children, it never displays. Try
                        //       removing foo from data above and
                        //       adding something to the list.
                        Debug.write( ">> ADDING TO SHOPPING LIST");
                        copyFrom_dp.setPointer(dragee);
                        copyTo_dp.setPointer(toNode);
                        copyTo_dp.addNodeFromPointer(copyFrom_dp);
                    break;
                }
            } else if (resp.type=="external") {
                Debug.write( "External drop:",resp);
                switch (resp.to) {
                    case externalDropTargetExample:
                        Debug.write(">> DROP ON FIRST EXTERNAL DROP TARGET");
                    break;

                    case externalDropTargetExampleTwo:
                        Debug.write(">> DROP ON OTHER EXTERNAL DROP TARGET");
                    break
                }
            }
            ]]>
        </method>

        <text width="100%" multiline="true">
            Drag Oranges to Shopping List a few times.
        </text>

        <text width="100%" multiline="true">
            <b>getSelection()</b>: Return a list of currently-selected 
            LzDataElements. Click button below:
        </text>

        <button align="center">getSelection()
            <method event="onclick">
                var sel = main.getSelection();
                Debug.write(sel);
            </method>
        </button>

        <text width="100%" multiline="true">
            <b>getOpenLeaves()</b>: Return a list of currently-open 
            LzDataElements. Click button below:
        </text>

        <button align="center">getOpenLeaves()
            <method event="onclick">
                var sel = main.getOpenLeaves();
                Debug.write(sel);
            </method>
        </button>

        <text width="100%" multiline="true">
            <b>getLeafForNode()</b>: Return reference to a view (leaf) based
            on an LzDataElement. Make sure you open Fruits first, so
            you can see the view be highlighted in red.
            Click button below:
        </text>

        <button align="center">getLeafForNode()
            <datapointer name="apples_dp"
                         xpath="dsFlat:/root/node[1]/node[1]" />
            <method event="onclick">
                var leaf = main.getLeafForNode(this.apples_dp.p);
                Debug.write("The leaf is ", leaf);
                leaf.setBGColor(0xff0000);
            </method>
        </button>

        <text width="100%" multiline="true">
            <b>onselect</b>: Sent when a user selects a node. 
            Passes LzDataElement as argument.
        </text>
        
        <method event="onselect" reference="main" args="n">
            Debug.write("onselect event sent: ", n);
        </method>

        <text width="100%" multiline="true">
            <b>onexpand</b>: Sent when a user opens a node. 
            Passes LzDataElement as argument.
        </text>
        
        <method event="onexpand" reference="main" args="n">
            Debug.write("onexpand event sent: ", n);
        </method>

        <text width="100%" multiline="true">
            <b>oncontract</b>: Sent when a user closes a node. 
            Passes LzDataElement as argument.
        </text>
        
        <method event="oncontract" reference="main" args="n">
            Debug.write("oncontract event sent: ", n);
        </method>

    </window>



    <!-- External drop target -->
    <window x="540" y="20" width="240" title="Shopping List">
        <simplelayout axis="y" spacing="10" />
         
        <text align="center" width="100%" multiline="true">
            Test an external drop target by dragging a draggable item
            from the tree example (Peppers, Oranges) to the area below:
        </text>

        <view id="externalDropTargetExample"
              width="100%" height="100" bgcolor="0xeaeaea"
              clickable="true">
            <method event="oninit">
                main.registerExternalDropTarget(this);
            </method>
            <text align="center"><b>First External Drop Target</b></text>
        </view>

        <method event="ondragdrop" reference="main" args="a">
            Debug.write( "ondragdrop sent by the main tree" );
        </method>

        <text align="center" width="100%" multiline="true">
            <b>unregisterExternalDropTarget</b>: Unregister the above drop
            target at run-time. This stops it from being a place that you can
            drag to:
        </text>

        <button align="center">unregisterExternalDropTarget()
            <method event="onclick">
                main.unregisterExternalDropTarget(externalDropTargetExample);
            </method>
        </button>

        <text align="center" width="100%" multiline="true">
            <b>registerExternalDropTarget</b>: Re-register the above drop
            target at run-time. This allows you to drag tree leaves onto
            it:
        </text>


        <button align="center">registerExternalDropTarget()
            <method event="onclick">
                main.registerExternalDropTarget(externalDropTargetExample);
            </method>
        </button>

        <view id="externalDropTargetExampleTwo"
              width="100%" height="100" bgcolor="0xeaeaea"
              clickable="true">
            <method event="oninit">
                main.registerExternalDropTarget(this);
            </method>
            <text align="center"><b>Second External Drop Target</b></text>
        </view>
    </window>
</canvas>
