<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2005-2006 Laszlo Systems, Inc. All Rights Reserved.                    *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
<!--- 
This file defines the <roundrectbuton class, which is a class for making nice-
looking, styleable buttons with gradients, without any art assets.

See test/test-roundrectbutton.lzx for several examples of how to use this component. 

The component attributes are only used for initialization. They are not live constraints.
The best way to change them at runtime is to apply a <style>; the best way to 
change them at compile time is with CSS. 
-->
<library>

<include href="firetrustroundrect.lzx" />

<class name="firetrustroundrectbutton" extends="basecomponent" styleable="false">

    <attribute name="downStartColor" type="color" value="0xd38326" />
    <attribute name="downStopColor" type="color" value="0xd38326" />

    <attribute name="upStartColor" type="color" value="0xe08b28" />
    <attribute name="upStopColor" type="color" value="0xe08b28" />

    <attribute name="overStartColor" type="color" value="0xeb922a" />
    <attribute name="overStopColor" type="color" value="0xeb922a" />
    
    <roundrect name="_rr" width="100%" height="100%">
        <attribute name="borderRadius" value="3"/>
        <attribute name="borderColor" type="color" value="0xd98627"/>
        <attribute name="borderWidth" value="1" />
        <attribute name="backgroundStartColor" type="color" value="0xe6a150"/>
        <attribute name="backgroundStopColor" type="color" value="0xe6a150"/>

		<method event="oninit">
			this.content.setAttribute("x", 0);
			this.content.setAttribute("y", 2);
		</method>
		
		
        
    </roundrect>
    
	<roundrect name="_rrInner" width="${parent._rr.width - 2}" height="20" x="1" y="1">
		<attribute name="borderRadius" value="3"/>
		<attribute name="borderColor" type="color" value="0xe6a150"/>
		<attribute name="borderWidth" value="1" />
		<attribute name="backgroundStartColor" type="color" value="$once{parent.upStartColor}"/>
		<attribute name="backgroundStopColor" type="color" value="$once{parent.upStartColor}"/>
	</roundrect>
	
    <!-- 
    <view name="highlightGradient" width="${parent._rr.width - 4}" height="11" x="2" y="1" resource="../../images/button_gradient.swf" stretches="width" />
     -->
     
     <text name="_label" 
         clickable="false"
         resize="true"
         align="center" valign="middle"
         text="${classroot.text}"
         fgcolor="0xFFFFFF"
         fontsize="11"
     />     

    <method event="onmouseover">
        _rrInner.setAttribute("backgroundStartColor", this.overStartColor);
        _rrInner.setAttribute("backgroundStopColor", this.overStopColor);        
        _rrInner.drawStructure();
    </method>

    <!--- @keywords private -->
    <method name="_applystyle" args="s">
        // Change the color for the up, down, over states
        /*this.setAttribute("downStartColor", s.basecolor)
        this.setAttribute("downStopColor", s.bgcolor)

        this.setAttribute("overStartColor", white)
        this.setAttribute("overStopColor", s.basecolor)

        this.setAttribute("upStartColor", s.hilitecolor)
        this.setAttribute("upStopColor", s.basecolor)*/

        // Change the color attributes on the inner roundrect
       /* this._rr.setAttribute("backgroundStartColor", this.upStartColor);
        this._rr.setAttribute("backgroundStopColor", this.upStopColor);
        
        this._rr.setAttribute("bordercolor", s.bordercolor)
        this._rr.setAttribute("borderwidth", s.bordersize)*/

        // Redraw the inner roundrect
        //_rr.drawStructure(); 
    </method>

    <method event="onmouseup">
        /*_rr.setAttribute("backgroundStartColor", this.upStartColor);
        _rr.setAttribute("backgroundStopColor", this.upStopColor);        
        _rr.drawStructure();*/ 
    </method>
    
    
    <method event="onmouseout">
        _rrInner.setAttribute("backgroundStartColor", this.upStartColor);
        _rrInner.setAttribute("backgroundStopColor", this.upStopColor);        
        _rrInner.drawStructure();
    </method>
        
    <method event="onmousedown">
        _rrInner.setAttribute("backgroundStartColor", this.downStartColor);
        _rrInner.setAttribute("backgroundStopColor", this.downStopColor);        
        _rrInner.drawStructure();
    </method>
    
    <method event="onwidth">
        if (!this['_rr']) return;     // ignore these events if the roundrect 
                                      // itself hasn't been built yet
        _rr.setWidth(this.width);
        _rr.drawStructure();
        _rrInner.setWidth(this.width - 2);
        _rrInner.drawStructure();
    </method>
    
    <method event="onheight">
        if (!this['_rr']) return;     // ignore these events if the roundrect 
                                      // itself hasn't been built yet
        _rr.setHeight(this.height);
        _rr.drawStructure();
    </method>
    
    <method name="changeRadius" args="radius">
    	/*_rr.setAttribute("borderRadius", radius);
    	_rr.drawStructure();*/
    </method>
    
</class>

</library>
                                                                                            
